package Analizador;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Bool, BitAnd, BitOr, Break, Byte, Case, Char, Cin, Coma, Comilla_simple, Comillas,
    ComparadorIgual, Const, Continue, Corchete_a, Corchete_c, Cout, Default, Define, Decremento,
    Diferente, Division, DivisionIgual, Do, Double, DobleMayor, DobleMenor, DosPuntos, Else, Endl,
    ERROR, Et, False, Float, For, Identificador, If, Igual, Int, Include, Incremento, Iostream, Linea,
    Llave_a, Llave_c, Long, Main, MasIgual, MenosIgual, MayorQue, MenorQue, MayorIgual, MenorIgual,
    Modulo, ModuloIgual, Multiplicacion, MultiplicacionIgual, Namespace, Negador, Numero, Numeral,    
    O_logico, Parent_a, Parent_c, P_coma, Printf, Punto, Register, Resta, Return, Scanf, Short, Suma, _System,
    Std, _String, Struct, Switch, Typedef, True, Unsigned, Using, Void, While, Y_logico, STRING_LITERAL;

non terminal INICIO, SENTENCIA, DECLARACION, IF, FOR, COMPLEMENTO,
    SENTENCIA_BOOLEANA_COMPUESTA, SENTENCIA_BOOLEANA_SIMPLE,
    OPERADORES_RELACIONALES, DECLARACION_ANIDADA, IMPORTACION,
    SENTENCIA_BOOLEANA_ANIDADA, FOR_PARTE_UNO, OPERACIONES_COMPLEMENTARIAS,
    WHILE, DO_WHILE, OPERADORES_ARITMETICOS, COUT, SALIDA, CIN, ENTRADA,
    CASE, SWITCH, CREACION_ARREGLO, DECLARACION_ARREGLO_ANIDADA,
    DECLARACION_ARREGLO, IDENTIFICADORES, PRINTF, SCANF;

start with INICIO;

IMPORTACION ::=
    Numeral Include MenorQue Identificador Punto Identificador MayorQue |
    Numeral Include STRING_LITERAL |
    Numeral Include MenorQue Identificador MayorQue |
    Numeral Include MenorQue Iostream MayorQue |
    IMPORTACION Numeral Include MenorQue Identificador Punto Identificador MayorQue |
    IMPORTACION Numeral Include STRING_LITERAL |
    IMPORTACION Numeral Include MenorQue Identificador MayorQue |
    IMPORTACION Numeral Include MenorQue Iostream MayorQue
;

INICIO ::= 
    IMPORTACION Using Namespace Std P_coma Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    IMPORTACION Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    Main Parent_a Parent_c Llave_a SENTENCIA Llave_c
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF |
    IF |
    SENTENCIA FOR|
    FOR |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE |
    DO_WHILE |
    SENTENCIA OPERACIONES_COMPLEMENTARIAS P_coma |
    OPERACIONES_COMPLEMENTARIAS P_coma |
    SENTENCIA COUT |
    COUT |
    SENTENCIA CIN |
    CIN |
    SENTENCIA SWITCH|
    SWITCH |
    SENTENCIA PRINTF |
    PRINTF |
    SENTENCIA SCANF | 
    SCANF
;
DECLARACION_ANIDADA::=
    Identificador Igual Numero |
    Identificador Igual Numero Coma DECLARACION_ANIDADA |
    Identificador Igual STRING_LITERAL |
    Identificador Igual STRING_LITERAL Coma DECLARACION_ANIDADA |
    Identificador Coma DECLARACION_ANIDADA |
    Identificador Igual Identificador |
    Identificador Igual True Coma DECLARACION_ANIDADA |
    Identificador Igual False Coma DECLARACION_ANIDADA |
    Identificador Igual True |
    Identificador Igual False |
    Identificador 
;
CREACION_ARREGLO::=
    Numero Coma CREACION_ARREGLO |
    Numero |
    STRING_LITERAL Coma CREACION_ARREGLO |
    STRING_LITERAL
;
DECLARACION_ARREGLO_ANIDADA::=
    Int DECLARACION_ARREGLO P_coma |
    _String DECLARACION_ARREGLO P_coma |
    Char DECLARACION_ARREGLO P_coma 
;
DECLARACION_ARREGLO::=
    Identificador Corchete_a Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c Coma DECLARACION_ARREGLO |
    Identificador Corchete_a Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c |
    Identificador Corchete_a Numero Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c Coma DECLARACION_ARREGLO |
    Identificador Corchete_a Numero Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c |
    Identificador Corchete_a Numero Corchete_c Coma DECLARACION_ARREGLO |
    Identificador Corchete_a Numero Corchete_c 
;
DECLARACION ::=   
    Int DECLARACION_ANIDADA P_coma |
    Unsigned Int DECLARACION_ANIDADA P_coma |
    Short Int DECLARACION_ANIDADA P_coma |
    Unsigned Short Int DECLARACION_ANIDADA P_coma |
    Long Int DECLARACION_ANIDADA P_coma |
    Unsigned Long Int DECLARACION_ANIDADA P_coma |
    Double DECLARACION_ANIDADA P_coma |
    Long Double DECLARACION_ANIDADA P_coma |
    Float DECLARACION_ANIDADA P_coma |
    Char DECLARACION_ANIDADA P_coma |
    Unsigned Char DECLARACION_ANIDADA P_coma |
    _String DECLARACION_ANIDADA P_coma |
    Bool DECLARACION_ANIDADA  P_coma |
    DECLARACION_ARREGLO_ANIDADA
;
OPERADORES_ARITMETICOS::=
    Suma |
    Resta |
    Multiplicacion |
    Division |
    Modulo
;
OPERADORES_RELACIONALES::=
    BitOr |
    BitAnd |
    ComparadorIgual |
    MenorIgual |
    MayorIgual |
    Diferente |
    MenorQue |
    MayorQue 
;
SENTENCIA_BOOLEANA_SIMPLE::=
    True |
    False |
    IDENTIFICADORES |
    IDENTIFICADORES OPERADORES_ARITMETICOS IDENTIFICADORES |
    IDENTIFICADORES OPERADORES_ARITMETICOS Numero |
    Numero OPERADORES_ARITMETICOS IDENTIFICADORES |
    Numero OPERADORES_ARITMETICOS Numero |
    Numero |
    STRING_LITERAL |
    Parent_a SENTENCIA_BOOLEANA_SIMPLE Parent_c
;
SENTENCIA_BOOLEANA_COMPUESTA::=
    Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE |
    SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE |
    SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE |
    Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE |
    Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c |
    Negador Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c |
    Negador SENTENCIA_BOOLEANA_SIMPLE 
;
SENTENCIA_BOOLEANA_ANIDADA::=
    SENTENCIA_BOOLEANA_COMPUESTA |    
    SENTENCIA_BOOLEANA_SIMPLE |    
    SENTENCIA_BOOLEANA_COMPUESTA Y_logico SENTENCIA_BOOLEANA_ANIDADA |    
    SENTENCIA_BOOLEANA_COMPUESTA O_logico SENTENCIA_BOOLEANA_ANIDADA |
    SENTENCIA_BOOLEANA_SIMPLE Y_logico SENTENCIA_BOOLEANA_ANIDADA |
    SENTENCIA_BOOLEANA_SIMPLE O_logico SENTENCIA_BOOLEANA_ANIDADA 
;
IF ::=
    If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c |
    If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c |
    If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else IF
;
FOR_PARTE_UNO::=
    Int IDENTIFICADORES Igual Numero |
    IDENTIFICADORES |
    IDENTIFICADORES Igual Numero |
    Int IDENTIFICADORES Igual IDENTIFICADORES 
;
IDENTIFICADORES::=
    Identificador |
    Identificador Corchete_a Numero Corchete_c
    Identificador Corchete_a Identificador Corchete_c
;
OPERACIONES_COMPLEMENTARIAS::=
    Return Numero |
    Incremento IDENTIFICADORES |
    Decremento IDENTIFICADORES |
    IDENTIFICADORES Incremento |
    IDENTIFICADORES Decremento |
    IDENTIFICADORES MasIgual IDENTIFICADORES |
    IDENTIFICADORES MenosIgual IDENTIFICADORES |
    IDENTIFICADORES MultiplicacionIgual IDENTIFICADORES |
    IDENTIFICADORES DivisionIgual IDENTIFICADORES |
    IDENTIFICADORES ModuloIgual IDENTIFICADORES |
    IDENTIFICADORES Igual IDENTIFICADORES |
    IDENTIFICADORES Igual IDENTIFICADORES OPERADORES_ARITMETICOS IDENTIFICADORES |
    IDENTIFICADORES MasIgual Numero |
    IDENTIFICADORES MenosIgual Numero |
    IDENTIFICADORES MultiplicacionIgual Numero |
    IDENTIFICADORES DivisionIgual Numero |
    IDENTIFICADORES ModuloIgual Numero |
    IDENTIFICADORES Igual Numero |
    IDENTIFICADORES Igual Numero OPERADORES_ARITMETICOS IDENTIFICADORES |
    IDENTIFICADORES Igual IDENTIFICADORES OPERADORES_ARITMETICOS Numero |
    IDENTIFICADORES Igual Numero OPERADORES_ARITMETICOS Numero |
    _System Parent_a STRING_LITERAL Parent_c 
;
FOR::=
    For Parent_a FOR_PARTE_UNO P_coma SENTENCIA_BOOLEANA_ANIDADA P_coma OPERACIONES_COMPLEMENTARIAS Parent_c Llave_a SENTENCIA Llave_c
;
WHILE::=
    While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c
;
DO_WHILE::=
    Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c P_coma
;
COUT::=
    Cout DobleMenor SALIDA P_coma
;
SALIDA::=
    IDENTIFICADORES |
    STRING_LITERAL |
    STRING_LITERAL DobleMenor SALIDA |
    IDENTIFICADORES DobleMenor SALIDA |
    Endl
;
ENTRADA::=
    IDENTIFICADORES |
    IDENTIFICADORES DobleMayor ENTRADA 
;
CIN::=
    Cin DobleMayor ENTRADA P_coma
;
CASE::=
    Case Numero DosPuntos SENTENCIA Break P_coma |
    Case STRING_LITERAL DosPuntos SENTENCIA Break P_coma |
    Case IDENTIFICADORES DosPuntos SENTENCIA Break P_coma |
    CASE Case Numero DosPuntos SENTENCIA Break P_coma |
    CASE Case IDENTIFICADORES DosPuntos SENTENCIA Break P_coma |
    CASE Case STRING_LITERAL DosPuntos SENTENCIA Break P_coma 
;
SWITCH::=
    Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Default DosPuntos SENTENCIA Break P_coma Llave_c |
    Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Default DosPuntos SENTENCIA Llave_c |
    Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Llave_c
;
PRINTF::=
    Printf Parent_a STRING_LITERAL Coma COMPLEMENTO Parent_c P_coma |
    Printf Parent_a STRING_LITERAL Parent_c P_coma
;
COMPLEMENTO::=
    Identificador |
    Identificador Coma COMPLEMENTO
;
SCANF::=
    Scanf Parent_a STRING_LITERAL Coma BitAnd Identificador Parent_c P_coma
;