
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 29 23:38:36 CDT 2022
//----------------------------------------------------

package Analizador;

import java.io.*;
import java.util.*;
import java_cup.runtime.*;
import javax.xml.stream.*;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import java.util.ArrayList;
import Analizador.Lexico;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 29 23:38:36 CDT 2022
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\240\000\002\002\004\000\002\014\011\000\002\014" +
    "\005\000\002\014\007\000\002\014\007\000\002\014\012" +
    "\000\002\014\006\000\002\014\010\000\002\014\010\000" +
    "\002\002\016\000\002\002\012\000\002\002\011\000\002" +
    "\002\010\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\005\000\002\003\004\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\031\005\000\002\031\003\000\002\031\005\000\002" +
    "\031\003\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\033\013\000\002\033\011\000\002\033\014" +
    "\000\002\033\012\000\002\033\010\000\002\033\006\000" +
    "\002\013\003\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\002\000\002\004\005\000\002\004" +
    "\006\000\002\004\006\000\002\004\007\000\002\004\006" +
    "\000\002\004\007\000\002\004\005\000\002\004\006\000" +
    "\002\004\005\000\002\004\005\000\002\004\006\000\002" +
    "\004\005\000\002\004\005\000\002\004\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\003\000\002\011\003\000\002\011\005\000\002" +
    "\010\006\000\002\010\005\000\002\010\006\000\002\010" +
    "\007\000\002\010\005\000\002\010\006\000\002\010\004" +
    "\000\002\015\003\000\002\015\003\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\005\011\000\002\005\015\000\002\005\013\000\002\016" +
    "\006\000\002\016\003\000\002\016\005\000\002\016\006" +
    "\000\002\034\003\000\002\034\012\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\007\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\007\000\002\017\007\000\002\017" +
    "\007\000\002\017\006\000\002\006\015\000\002\020\011" +
    "\000\002\021\013\000\002\023\006\000\002\024\003\000" +
    "\002\024\003\000\002\024\005\000\002\024\005\000\002" +
    "\024\003\000\002\026\003\000\002\026\005\000\002\025" +
    "\006\000\002\027\010\000\002\027\010\000\002\027\010" +
    "\000\002\027\011\000\002\027\011\000\002\027\011\000" +
    "\002\030\016\000\002\030\014\000\002\030\011\000\002" +
    "\035\011\000\002\035\007\000\002\007\003\000\002\007" +
    "\005\000\002\036\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u018a\000\010\052\010\062\005\101\006\001\002\000" +
    "\010\052\u0172\101\u0171\126\u0170\001\002\000\004\103\u016b" +
    "\001\002\000\004\053\u0161\001\002\000\004\002\u0160\001" +
    "\002\000\004\062\011\001\002\000\004\103\012\001\002" +
    "\000\004\104\013\001\002\000\004\057\014\001\002\000" +
    "\060\004\060\012\043\013\057\024\026\027\024\033\045" +
    "\034\017\045\036\046\037\047\056\050\022\052\034\054" +
    "\015\061\030\106\040\112\032\113\053\114\052\116\044" +
    "\120\061\122\041\125\020\130\033\001\002\000\004\047" +
    "\056\001\002\000\064\004\uffdf\007\uffdf\012\uffdf\013\uffdf" +
    "\024\uffdf\027\uffdf\033\uffdf\034\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\052\uffdf\054\uffdf\060\uffdf\061\uffdf\106\uffdf" +
    "\112\uffdf\113\uffdf\114\uffdf\116\uffdf\120\uffdf\122\uffdf\125" +
    "\uffdf\130\uffdf\001\002\000\006\047\123\105\uffcd\001\002" +
    "\000\012\012\u014f\052\u0152\061\u0150\114\u0151\001\002\000" +
    "\064\004\uffbf\007\uffbf\012\uffbf\013\uffbf\024\uffbf\027\uffbf" +
    "\033\uffbf\034\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\052" +
    "\uffbf\054\uffbf\060\uffbf\061\uffbf\106\uffbf\112\uffbf\113\uffbf" +
    "\114\uffbf\116\uffbf\120\uffbf\122\uffbf\125\uffbf\130\uffbf\001" +
    "\002\000\004\103\u0144\001\002\000\062\004\060\012\043" +
    "\013\057\024\026\027\024\033\045\034\017\045\036\046" +
    "\037\047\056\050\022\052\034\054\015\060\u0143\061\030" +
    "\106\040\112\032\113\053\114\052\116\044\120\061\122" +
    "\041\125\020\130\033\001\002\000\004\047\056\001\002" +
    "\000\064\004\uffef\007\uffef\012\uffef\013\uffef\024\uffef\027" +
    "\uffef\033\uffef\034\uffef\045\uffef\046\uffef\047\uffef\050\uffef" +
    "\052\uffef\054\uffef\060\uffef\061\uffef\106\uffef\112\uffef\113" +
    "\uffef\114\uffef\116\uffef\120\uffef\122\uffef\125\uffef\130\uffef" +
    "\001\002\000\004\036\u0138\001\002\000\064\004\uffeb\007" +
    "\uffeb\012\uffeb\013\uffeb\024\uffeb\027\uffeb\033\uffeb\034\uffeb" +
    "\045\uffeb\046\uffeb\047\uffeb\050\uffeb\052\uffeb\054\uffeb\060" +
    "\uffeb\061\uffeb\106\uffeb\112\uffeb\113\uffeb\114\uffeb\116\uffeb" +
    "\120\uffeb\122\uffeb\125\uffeb\130\uffeb\001\002\000\006\034" +
    "\u0132\052\u0133\001\002\000\004\105\u0131\001\002\000\004" +
    "\077\u0130\001\002\000\004\103\u012a\001\002\000\006\047" +
    "\063\105\uffcd\001\002\000\064\004\ufff1\007\ufff1\012\ufff1" +
    "\013\ufff1\024\ufff1\027\ufff1\033\ufff1\034\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\050\ufff1\052\ufff1\054\ufff1\060\ufff1\061\ufff1" +
    "\106\ufff1\112\ufff1\113\ufff1\114\ufff1\116\ufff1\120\ufff1\122" +
    "\ufff1\125\ufff1\130\ufff1\001\002\000\006\047\123\105\uffcd" +
    "\001\002\000\004\103\u0112\001\002\000\004\103\u0107\001" +
    "\002\000\004\103\332\001\002\000\064\004\uffe5\007\uffe5" +
    "\012\uffe5\013\uffe5\024\uffe5\027\uffe5\033\uffe5\034\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\050\uffe5\052\uffe5\054\uffe5\060\uffe5" +
    "\061\uffe5\106\uffe5\112\uffe5\113\uffe5\114\uffe5\116\uffe5\120" +
    "\uffe5\122\uffe5\125\uffe5\130\uffe5\001\002\000\006\047\063" +
    "\105\uffcd\001\002\000\004\103\323\001\002\000\004\057" +
    "\216\001\002\000\064\004\uffe1\007\uffe1\012\uffe1\013\uffe1" +
    "\024\uffe1\027\uffe1\033\uffe1\034\uffe1\045\uffe1\046\uffe1\047" +
    "\uffe1\050\uffe1\052\uffe1\054\uffe1\060\uffe1\061\uffe1\106\uffe1" +
    "\112\uffe1\113\uffe1\114\uffe1\116\uffe1\120\uffe1\122\uffe1\125" +
    "\uffe1\130\uffe1\001\002\000\064\004\uffe3\007\uffe3\012\uffe3" +
    "\013\uffe3\024\uffe3\027\uffe3\033\uffe3\034\uffe3\045\uffe3\046" +
    "\uffe3\047\uffe3\050\uffe3\052\uffe3\054\uffe3\060\uffe3\061\uffe3" +
    "\106\uffe3\112\uffe3\113\uffe3\114\uffe3\116\uffe3\120\uffe3\122" +
    "\uffe3\125\uffe3\130\uffe3\001\002\000\022\027\163\032\162" +
    "\051\166\054\161\063\157\064\165\072\160\074\164\001" +
    "\002\000\064\004\ufff3\007\ufff3\012\ufff3\013\ufff3\024\ufff3" +
    "\027\ufff3\033\ufff3\034\ufff3\045\ufff3\046\ufff3\047\ufff3\050" +
    "\ufff3\052\ufff3\054\ufff3\060\ufff3\061\ufff3\106\ufff3\112\ufff3" +
    "\113\ufff3\114\ufff3\116\ufff3\120\ufff3\122\ufff3\125\ufff3\130" +
    "\ufff3\001\002\000\004\052\154\001\002\000\004\103\145" +
    "\001\002\000\064\004\uffe7\007\uffe7\012\uffe7\013\uffe7\024" +
    "\uffe7\027\uffe7\033\uffe7\034\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\050\uffe7\052\uffe7\054\uffe7\060\uffe7\061\uffe7\106\uffe7\112" +
    "\uffe7\113\uffe7\114\uffe7\116\uffe7\120\uffe7\122\uffe7\125\uffe7" +
    "\130\uffe7\001\002\000\064\004\uffed\007\uffed\012\uffed\013" +
    "\uffed\024\uffed\027\uffed\033\uffed\034\uffed\045\uffed\046\uffed" +
    "\047\uffed\050\uffed\052\uffed\054\uffed\060\uffed\061\uffed\106" +
    "\uffed\112\uffed\113\uffed\114\uffed\116\uffed\120\uffed\122\uffed" +
    "\125\uffed\130\uffed\001\002\000\074\005\uff93\006\uff93\017" +
    "\uff93\022\136\027\uff93\030\uff93\031\uff93\032\uff93\035\uff93" +
    "\036\uff93\037\uff93\051\uff93\054\uff93\063\uff93\064\uff93\065" +
    "\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93\073\uff93" +
    "\074\uff93\102\uff93\104\uff93\105\uff93\111\uff93\115\uff93\131" +
    "\uff93\001\002\000\004\035\130\001\002\000\006\047\123" +
    "\105\uffcd\001\002\000\006\047\063\105\uffcd\001\002\000" +
    "\004\105\125\001\002\000\012\014\066\022\067\051\070" +
    "\105\uffd1\001\002\000\004\105\065\001\002\000\064\004" +
    "\uffc1\007\uffc1\012\uffc1\013\uffc1\024\uffc1\027\uffc1\033\uffc1" +
    "\034\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\052\uffc1\054" +
    "\uffc1\060\uffc1\061\uffc1\106\uffc1\112\uffc1\113\uffc1\114\uffc1" +
    "\116\uffc1\120\uffc1\122\uffc1\125\uffc1\130\uffc1\001\002\000" +
    "\006\047\123\105\uffcd\001\002\000\006\023\074\077\073" +
    "\001\002\000\006\047\072\077\071\001\002\000\004\105" +
    "\uffce\001\002\000\004\105\uffcf\001\002\000\004\023\112" +
    "\001\002\000\004\051\075\001\002\000\004\057\076\001" +
    "\002\000\006\077\077\132\100\001\002\000\006\014\110" +
    "\060\uffdd\001\002\000\006\014\106\060\uffdb\001\002\000" +
    "\004\060\102\001\002\000\006\014\103\105\uffd6\001\002" +
    "\000\004\047\105\001\002\000\004\105\uffd7\001\002\000" +
    "\004\022\067\001\002\000\006\077\077\132\100\001\002" +
    "\000\004\060\uffdc\001\002\000\006\077\077\132\100\001" +
    "\002\000\004\060\uffde\001\002\000\010\014\113\051\114" +
    "\105\uffd2\001\002\000\004\047\105\001\002\000\004\057" +
    "\115\001\002\000\006\077\077\132\100\001\002\000\004" +
    "\060\117\001\002\000\006\014\120\105\uffd4\001\002\000" +
    "\004\047\105\001\002\000\004\105\uffd5\001\002\000\004" +
    "\105\uffd3\001\002\000\010\014\066\051\070\105\uffd1\001" +
    "\002\000\004\105\uffd0\001\002\000\064\004\uffd9\007\uffd9" +
    "\012\uffd9\013\uffd9\024\uffd9\027\uffd9\033\uffd9\034\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\052\uffd9\054\uffd9\060\uffd9" +
    "\061\uffd9\106\uffd9\112\uffd9\113\uffd9\114\uffd9\116\uffd9\120" +
    "\uffd9\122\uffd9\125\uffd9\130\uffd9\001\002\000\004\105\127" +
    "\001\002\000\064\004\uffc0\007\uffc0\012\uffc0\013\uffc0\024" +
    "\uffc0\027\uffc0\033\uffc0\034\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\052\uffc0\054\uffc0\060\uffc0\061\uffc0\106\uffc0\112" +
    "\uffc0\113\uffc0\114\uffc0\116\uffc0\120\uffc0\122\uffc0\125\uffc0" +
    "\130\uffc0\001\002\000\004\047\056\001\002\000\006\035" +
    "\134\105\uff72\001\002\000\004\105\133\001\002\000\064" +
    "\004\uff70\007\uff70\012\uff70\013\uff70\024\uff70\027\uff70\033" +
    "\uff70\034\uff70\045\uff70\046\uff70\047\uff70\050\uff70\052\uff70" +
    "\054\uff70\060\uff70\061\uff70\106\uff70\112\uff70\113\uff70\114" +
    "\uff70\116\uff70\120\uff70\122\uff70\125\uff70\130\uff70\001\002" +
    "\000\004\047\056\001\002\000\004\105\uff71\001\002\000" +
    "\004\077\137\001\002\000\004\023\140\001\002\000\004" +
    "\047\141\001\002\000\004\022\142\001\002\000\004\047" +
    "\143\001\002\000\004\023\144\001\002\000\072\005\uff92" +
    "\006\uff92\017\uff92\027\uff92\030\uff92\031\uff92\032\uff92\035" +
    "\uff92\036\uff92\037\uff92\051\uff92\054\uff92\063\uff92\064\uff92" +
    "\065\uff92\066\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073" +
    "\uff92\074\uff92\102\uff92\104\uff92\105\uff92\111\uff92\115\uff92" +
    "\131\uff92\001\002\000\004\132\146\001\002\000\004\014" +
    "\147\001\002\000\004\005\150\001\002\000\004\047\151" +
    "\001\002\000\004\104\152\001\002\000\004\105\153\001" +
    "\002\000\064\004\uff62\007\uff62\012\uff62\013\uff62\024\uff62" +
    "\027\uff62\033\uff62\034\uff62\045\uff62\046\uff62\047\uff62\050" +
    "\uff62\052\uff62\054\uff62\060\uff62\061\uff62\106\uff62\112\uff62" +
    "\113\uff62\114\uff62\116\uff62\120\uff62\122\uff62\125\uff62\130" +
    "\uff62\001\002\000\006\047\123\105\uffcd\001\002\000\004" +
    "\105\156\001\002\000\064\004\uffca\007\uffca\012\uffca\013" +
    "\uffca\024\uffca\027\uffca\033\uffca\034\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\052\uffca\054\uffca\060\uffca\061\uffca\106" +
    "\uffca\112\uffca\113\uffca\114\uffca\116\uffca\120\uffca\122\uffca" +
    "\125\uffca\130\uffca\001\002\000\006\047\056\077\214\001" +
    "\002\000\006\047\056\077\212\001\002\000\006\104\uff8e" +
    "\105\uff8e\001\002\000\006\047\056\077\210\001\002\000" +
    "\006\104\uff8d\105\uff8d\001\002\000\006\047\056\077\206" +
    "\001\002\000\006\047\056\077\204\001\002\000\006\047" +
    "\056\077\167\001\002\000\020\031\171\071\172\073\176" +
    "\104\uff80\105\uff80\111\174\115\175\001\002\000\020\031" +
    "\171\071\172\073\176\104\uff87\105\uff87\111\174\115\175" +
    "\001\002\000\006\047\uffbb\077\uffbb\001\002\000\006\047" +
    "\uffba\077\uffba\001\002\000\006\047\056\077\177\001\002" +
    "\000\006\047\uffbd\077\uffbd\001\002\000\006\047\uffbe\077" +
    "\uffbe\001\002\000\006\047\uffbc\077\uffbc\001\002\000\006" +
    "\104\uff7e\105\uff7e\001\002\000\006\104\uff86\105\uff86\001" +
    "\002\000\006\047\056\077\202\001\002\000\006\104\uff7d" +
    "\105\uff7d\001\002\000\006\104\uff7f\105\uff7f\001\002\000" +
    "\006\104\uff84\105\uff84\001\002\000\006\104\uff8b\105\uff8b" +
    "\001\002\000\006\104\uff83\105\uff83\001\002\000\006\104" +
    "\uff8a\105\uff8a\001\002\000\006\104\uff82\105\uff82\001\002" +
    "\000\006\104\uff89\105\uff89\001\002\000\006\104\uff81\105" +
    "\uff81\001\002\000\006\104\uff88\105\uff88\001\002\000\006" +
    "\104\uff85\105\uff85\001\002\000\006\104\uff8c\105\uff8c\001" +
    "\002\000\060\004\060\012\043\013\057\024\026\027\024" +
    "\033\045\034\017\045\036\046\037\047\056\050\022\052" +
    "\034\054\015\061\030\106\040\112\032\113\053\114\052" +
    "\116\044\120\061\122\041\125\020\130\033\001\002\000" +
    "\062\004\060\012\043\013\057\024\026\027\024\033\045" +
    "\034\017\045\036\046\037\047\056\050\022\052\034\054" +
    "\015\060\220\061\030\106\040\112\032\113\053\114\052" +
    "\116\044\120\061\122\041\125\020\130\033\001\002\000" +
    "\004\130\235\001\002\000\064\004\uffe0\007\uffe0\012\uffe0" +
    "\013\uffe0\024\uffe0\027\uffe0\033\uffe0\034\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\052\uffe0\054\uffe0\060\uffe0\061\uffe0" +
    "\106\uffe0\112\uffe0\113\uffe0\114\uffe0\116\uffe0\120\uffe0\122" +
    "\uffe0\125\uffe0\130\uffe0\001\002\000\064\004\ufff0\007\ufff0" +
    "\012\ufff0\013\ufff0\024\ufff0\027\ufff0\033\ufff0\034\ufff0\045" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\052\ufff0\054\ufff0\060\ufff0" +
    "\061\ufff0\106\ufff0\112\ufff0\113\ufff0\114\ufff0\116\ufff0\120" +
    "\ufff0\122\ufff0\125\ufff0\130\ufff0\001\002\000\064\004\uffec" +
    "\007\uffec\012\uffec\013\uffec\024\uffec\027\uffec\033\uffec\034" +
    "\uffec\045\uffec\046\uffec\047\uffec\050\uffec\052\uffec\054\uffec" +
    "\060\uffec\061\uffec\106\uffec\112\uffec\113\uffec\114\uffec\116" +
    "\uffec\120\uffec\122\uffec\125\uffec\130\uffec\001\002\000\004" +
    "\105\234\001\002\000\064\004\ufff2\007\ufff2\012\ufff2\013" +
    "\ufff2\024\ufff2\027\ufff2\033\ufff2\034\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\052\ufff2\054\ufff2\060\ufff2\061\ufff2\106" +
    "\ufff2\112\ufff2\113\ufff2\114\ufff2\116\ufff2\120\ufff2\122\ufff2" +
    "\125\ufff2\130\ufff2\001\002\000\064\004\uffe6\007\uffe6\012" +
    "\uffe6\013\uffe6\024\uffe6\027\uffe6\033\uffe6\034\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\052\uffe6\054\uffe6\060\uffe6\061" +
    "\uffe6\106\uffe6\112\uffe6\113\uffe6\114\uffe6\116\uffe6\120\uffe6" +
    "\122\uffe6\125\uffe6\130\uffe6\001\002\000\064\004\uffe2\007" +
    "\uffe2\012\uffe2\013\uffe2\024\uffe2\027\uffe2\033\uffe2\034\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\050\uffe2\052\uffe2\054\uffe2\060" +
    "\uffe2\061\uffe2\106\uffe2\112\uffe2\113\uffe2\114\uffe2\116\uffe2" +
    "\120\uffe2\122\uffe2\125\uffe2\130\uffe2\001\002\000\064\004" +
    "\uffe4\007\uffe4\012\uffe4\013\uffe4\024\uffe4\027\uffe4\033\uffe4" +
    "\034\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\052\uffe4\054" +
    "\uffe4\060\uffe4\061\uffe4\106\uffe4\112\uffe4\113\uffe4\114\uffe4" +
    "\116\uffe4\120\uffe4\122\uffe4\125\uffe4\130\uffe4\001\002\000" +
    "\064\004\ufff4\007\ufff4\012\ufff4\013\ufff4\024\ufff4\027\ufff4" +
    "\033\ufff4\034\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\052" +
    "\ufff4\054\ufff4\060\ufff4\061\ufff4\106\ufff4\112\ufff4\113\ufff4" +
    "\114\ufff4\116\ufff4\120\ufff4\122\ufff4\125\ufff4\130\ufff4\001" +
    "\002\000\064\004\uffe8\007\uffe8\012\uffe8\013\uffe8\024\uffe8" +
    "\027\uffe8\033\uffe8\034\uffe8\045\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\052\uffe8\054\uffe8\060\uffe8\061\uffe8\106\uffe8\112\uffe8" +
    "\113\uffe8\114\uffe8\116\uffe8\120\uffe8\122\uffe8\125\uffe8\130" +
    "\uffe8\001\002\000\064\004\uffee\007\uffee\012\uffee\013\uffee" +
    "\024\uffee\027\uffee\033\uffee\034\uffee\045\uffee\046\uffee\047" +
    "\uffee\050\uffee\052\uffee\054\uffee\060\uffee\061\uffee\106\uffee" +
    "\112\uffee\113\uffee\114\uffee\116\uffee\120\uffee\122\uffee\125" +
    "\uffee\130\uffee\001\002\000\064\004\uffea\007\uffea\012\uffea" +
    "\013\uffea\024\uffea\027\uffea\033\uffea\034\uffea\045\uffea\046" +
    "\uffea\047\uffea\050\uffea\052\uffea\054\uffea\060\uffea\061\uffea" +
    "\106\uffea\112\uffea\113\uffea\114\uffea\116\uffea\120\uffea\122" +
    "\uffea\125\uffea\130\uffea\001\002\000\004\103\236\001\002" +
    "\000\020\044\244\047\056\076\240\077\247\103\243\124" +
    "\245\132\241\001\002\000\012\102\317\104\uffa0\105\uffa0" +
    "\131\320\001\002\000\016\044\244\047\056\077\247\103" +
    "\307\124\245\132\241\001\002\000\032\005\uffa9\006\uffa9" +
    "\017\uffa9\030\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\102" +
    "\uffa9\104\uffa9\105\uffa9\131\uffa9\001\002\000\004\104\305" +
    "\001\002\000\020\044\244\047\056\076\240\077\247\103" +
    "\243\124\245\132\241\001\002\000\032\005\uffb0\006\uffb0" +
    "\017\uffb0\030\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\102" +
    "\uffb0\104\uffb0\105\uffb0\131\uffb0\001\002\000\032\005\uffb1" +
    "\006\uffb1\017\uffb1\030\uffb1\065\uffb1\066\uffb1\067\uffb1\070" +
    "\uffb1\102\uffb1\104\uffb1\105\uffb1\131\uffb1\001\002\000\044" +
    "\005\uffaf\006\uffaf\017\uffaf\030\uffaf\031\171\065\uffaf\066" +
    "\uffaf\067\uffaf\070\uffaf\071\172\073\176\102\uffaf\104\uffaf" +
    "\105\uffaf\111\174\115\175\131\uffaf\001\002\000\044\005" +
    "\uffaa\006\uffaa\017\uffaa\030\uffaa\031\171\065\uffaa\066\uffaa" +
    "\067\uffaa\070\uffaa\071\172\073\176\102\uffaa\104\uffaa\105" +
    "\uffaa\111\174\115\175\131\uffaa\001\002\000\032\005\253" +
    "\006\257\017\263\030\262\065\252\066\261\067\260\070" +
    "\255\102\254\104\uff9f\105\uff9f\131\256\001\002\000\020" +
    "\044\244\047\056\076\266\077\247\103\267\124\245\132" +
    "\241\001\002\000\020\044\uffb2\047\uffb2\076\uffb2\077\uffb2" +
    "\103\uffb2\124\uffb2\132\uffb2\001\002\000\020\044\uffb8\047" +
    "\uffb8\076\uffb8\077\uffb8\103\uffb8\124\uffb8\132\uffb8\001\002" +
    "\000\020\044\244\047\056\076\240\077\247\103\243\124" +
    "\245\132\241\001\002\000\020\044\uffb6\047\uffb6\076\uffb6" +
    "\077\uffb6\103\uffb6\124\uffb6\132\uffb6\001\002\000\020\044" +
    "\244\047\056\076\240\077\247\103\243\124\245\132\241" +
    "\001\002\000\020\044\uffb9\047\uffb9\076\uffb9\077\uffb9\103" +
    "\uffb9\124\uffb9\132\uffb9\001\002\000\020\044\uffb5\047\uffb5" +
    "\076\uffb5\077\uffb5\103\uffb5\124\uffb5\132\uffb5\001\002\000" +
    "\020\044\uffb3\047\uffb3\076\uffb3\077\uffb3\103\uffb3\124\uffb3" +
    "\132\uffb3\001\002\000\020\044\uffb4\047\uffb4\076\uffb4\077" +
    "\uffb4\103\uffb4\124\uffb4\132\uffb4\001\002\000\020\044\uffb7" +
    "\047\uffb7\076\uffb7\077\uffb7\103\uffb7\124\uffb7\132\uffb7\001" +
    "\002\000\006\104\uff9c\105\uff9c\001\002\000\006\104\uff9b" +
    "\105\uff9b\001\002\000\016\044\244\047\056\077\247\103" +
    "\267\124\245\132\241\001\002\000\016\044\244\047\056" +
    "\077\247\103\267\124\245\132\241\001\002\000\012\102" +
    "\uffa6\104\uffa6\105\uffa6\131\uffa6\001\002\000\004\104\272" +
    "\001\002\000\032\005\uffa8\006\uffa8\017\uffa8\030\uffa8\065" +
    "\uffa8\066\uffa8\067\uffa8\070\uffa8\102\uffa8\104\uffa8\105\uffa8" +
    "\131\uffa8\001\002\000\012\102\uffa5\104\uffa5\105\uffa5\131" +
    "\uffa5\001\002\000\006\047\056\077\275\001\002\000\032" +
    "\005\uffab\006\uffab\017\uffab\030\uffab\065\uffab\066\uffab\067" +
    "\uffab\070\uffab\102\uffab\104\uffab\105\uffab\131\uffab\001\002" +
    "\000\032\005\uffac\006\uffac\017\uffac\030\uffac\065\uffac\066" +
    "\uffac\067\uffac\070\uffac\102\uffac\104\uffac\105\uffac\131\uffac" +
    "\001\002\000\006\047\056\077\300\001\002\000\032\005" +
    "\uffad\006\uffad\017\uffad\030\uffad\065\uffad\066\uffad\067\uffad" +
    "\070\uffad\102\uffad\104\uffad\105\uffad\131\uffad\001\002\000" +
    "\032\005\uffae\006\uffae\017\uffae\030\uffae\065\uffae\066\uffae" +
    "\067\uffae\070\uffae\102\uffae\104\uffae\105\uffae\131\uffae\001" +
    "\002\000\004\104\304\001\002\000\024\005\253\006\257" +
    "\017\263\030\262\065\252\066\261\067\260\070\255\104" +
    "\272\001\002\000\012\102\uffa3\104\uffa3\105\uffa3\131\uffa3" +
    "\001\002\000\004\105\306\001\002\000\064\004\uff79\007" +
    "\uff79\012\uff79\013\uff79\024\uff79\027\uff79\033\uff79\034\uff79" +
    "\045\uff79\046\uff79\047\uff79\050\uff79\052\uff79\054\uff79\060" +
    "\uff79\061\uff79\106\uff79\112\uff79\113\uff79\114\uff79\116\uff79" +
    "\120\uff79\122\uff79\125\uff79\130\uff79\001\002\000\020\044" +
    "\244\047\056\076\240\077\247\103\243\124\245\132\241" +
    "\001\002\000\032\005\253\006\257\017\263\030\262\065" +
    "\252\066\261\067\260\070\255\102\uffa1\104\uffa1\105\uffa1" +
    "\131\uffa1\001\002\000\020\044\244\047\056\076\312\077" +
    "\247\103\267\124\245\132\241\001\002\000\016\044\244" +
    "\047\056\077\247\103\267\124\245\132\241\001\002\000" +
    "\012\102\uffa7\104\uffa7\105\uffa7\131\uffa7\001\002\000\012" +
    "\102\uffa4\104\uffa4\105\uffa4\131\uffa4\001\002\000\004\104" +
    "\316\001\002\000\012\102\uffa2\104\uffa2\105\uffa2\131\uffa2" +
    "\001\002\000\020\044\244\047\056\076\240\077\247\103" +
    "\243\124\245\132\241\001\002\000\020\044\244\047\056" +
    "\076\240\077\247\103\243\124\245\132\241\001\002\000" +
    "\006\104\uff9e\105\uff9e\001\002\000\006\104\uff9d\105\uff9d" +
    "\001\002\000\004\132\324\001\002\000\004\104\325\001" +
    "\002\000\006\104\uff7c\105\uff7c\001\002\000\004\105\331" +
    "\001\002\000\004\105\330\001\002\000\064\004\uffc3\007" +
    "\uffc3\012\uffc3\013\uffc3\024\uffc3\027\uffc3\033\uffc3\034\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\050\uffc3\052\uffc3\054\uffc3\060" +
    "\uffc3\061\uffc3\106\uffc3\112\uffc3\113\uffc3\114\uffc3\116\uffc3" +
    "\120\uffc3\122\uffc3\125\uffc3\130\uffc3\001\002\000\064\004" +
    "\uffd8\007\uffd8\012\uffd8\013\uffd8\024\uffd8\027\uffd8\033\uffd8" +
    "\034\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\052\uffd8\054" +
    "\uffd8\060\uffd8\061\uffd8\106\uffd8\112\uffd8\113\uffd8\114\uffd8" +
    "\116\uffd8\120\uffd8\122\uffd8\125\uffd8\130\uffd8\001\002\000" +
    "\004\047\056\001\002\000\004\104\334\001\002\000\004" +
    "\057\335\001\002\000\004\011\336\001\002\000\010\047" +
    "\056\077\370\132\372\001\002\000\010\011\341\025\342" +
    "\060\340\001\002\000\064\004\uff67\007\uff67\012\uff67\013" +
    "\uff67\024\uff67\027\uff67\033\uff67\034\uff67\045\uff67\046\uff67" +
    "\047\uff67\050\uff67\052\uff67\054\uff67\060\uff67\061\uff67\106" +
    "\uff67\112\uff67\113\uff67\114\uff67\116\uff67\120\uff67\122\uff67" +
    "\125\uff67\130\uff67\001\002\000\010\047\056\077\351\132" +
    "\353\001\002\000\004\037\343\001\002\000\060\004\060" +
    "\012\043\013\057\024\026\027\024\033\045\034\017\045" +
    "\036\046\037\047\056\050\022\052\034\054\015\061\030" +
    "\106\040\112\032\113\053\114\052\116\044\120\061\122" +
    "\041\125\020\130\033\001\002\000\064\004\060\007\346" +
    "\012\043\013\057\024\026\027\024\033\045\034\017\045" +
    "\036\046\037\047\056\050\022\052\034\054\015\060\345" +
    "\061\030\106\040\112\032\113\053\114\052\116\044\120" +
    "\061\122\041\125\020\130\033\001\002\000\064\004\uff68" +
    "\007\uff68\012\uff68\013\uff68\024\uff68\027\uff68\033\uff68\034" +
    "\uff68\045\uff68\046\uff68\047\uff68\050\uff68\052\uff68\054\uff68" +
    "\060\uff68\061\uff68\106\uff68\112\uff68\113\uff68\114\uff68\116" +
    "\uff68\120\uff68\122\uff68\125\uff68\130\uff68\001\002\000\004" +
    "\105\347\001\002\000\004\060\350\001\002\000\064\004" +
    "\uff69\007\uff69\012\uff69\013\uff69\024\uff69\027\uff69\033\uff69" +
    "\034\uff69\045\uff69\046\uff69\047\uff69\050\uff69\052\uff69\054" +
    "\uff69\060\uff69\061\uff69\106\uff69\112\uff69\113\uff69\114\uff69" +
    "\116\uff69\120\uff69\122\uff69\125\uff69\130\uff69\001\002\000" +
    "\004\037\364\001\002\000\004\037\360\001\002\000\004" +
    "\037\354\001\002\000\060\004\060\012\043\013\057\024" +
    "\026\027\024\033\045\034\017\045\036\046\037\047\056" +
    "\050\022\052\034\054\015\061\030\106\040\112\032\113" +
    "\053\114\052\116\044\120\061\122\041\125\020\130\033" +
    "\001\002\000\062\004\060\007\356\012\043\013\057\024" +
    "\026\027\024\033\045\034\017\045\036\046\037\047\056" +
    "\050\022\052\034\054\015\061\030\106\040\112\032\113" +
    "\053\114\052\116\044\120\061\122\041\125\020\130\033" +
    "\001\002\000\004\105\357\001\002\000\010\011\uff6a\025" +
    "\uff6a\060\uff6a\001\002\000\060\004\060\012\043\013\057" +
    "\024\026\027\024\033\045\034\017\045\036\046\037\047" +
    "\056\050\022\052\034\054\015\061\030\106\040\112\032" +
    "\113\053\114\052\116\044\120\061\122\041\125\020\130" +
    "\033\001\002\000\062\004\060\007\362\012\043\013\057" +
    "\024\026\027\024\033\045\034\017\045\036\046\037\047" +
    "\056\050\022\052\034\054\015\061\030\106\040\112\032" +
    "\113\053\114\052\116\044\120\061\122\041\125\020\130" +
    "\033\001\002\000\004\105\363\001\002\000\010\011\uff6b" +
    "\025\uff6b\060\uff6b\001\002\000\060\004\060\012\043\013" +
    "\057\024\026\027\024\033\045\034\017\045\036\046\037" +
    "\047\056\050\022\052\034\054\015\061\030\106\040\112" +
    "\032\113\053\114\052\116\044\120\061\122\041\125\020" +
    "\130\033\001\002\000\062\004\060\007\366\012\043\013" +
    "\057\024\026\027\024\033\045\034\017\045\036\046\037" +
    "\047\056\050\022\052\034\054\015\061\030\106\040\112" +
    "\032\113\053\114\052\116\044\120\061\122\041\125\020" +
    "\130\033\001\002\000\004\105\367\001\002\000\010\011" +
    "\uff6c\025\uff6c\060\uff6c\001\002\000\004\037\u0103\001\002" +
    "\000\004\037\377\001\002\000\004\037\373\001\002\000" +
    "\060\004\060\012\043\013\057\024\026\027\024\033\045" +
    "\034\017\045\036\046\037\047\056\050\022\052\034\054" +
    "\015\061\030\106\040\112\032\113\053\114\052\116\044" +
    "\120\061\122\041\125\020\130\033\001\002\000\062\004" +
    "\060\007\375\012\043\013\057\024\026\027\024\033\045" +
    "\034\017\045\036\046\037\047\056\050\022\052\034\054" +
    "\015\061\030\106\040\112\032\113\053\114\052\116\044" +
    "\120\061\122\041\125\020\130\033\001\002\000\004\105" +
    "\376\001\002\000\010\011\uff6e\025\uff6e\060\uff6e\001\002" +
    "\000\060\004\060\012\043\013\057\024\026\027\024\033" +
    "\045\034\017\045\036\046\037\047\056\050\022\052\034" +
    "\054\015\061\030\106\040\112\032\113\053\114\052\116" +
    "\044\120\061\122\041\125\020\130\033\001\002\000\062" +
    "\004\060\007\u0101\012\043\013\057\024\026\027\024\033" +
    "\045\034\017\045\036\046\037\047\056\050\022\052\034" +
    "\054\015\061\030\106\040\112\032\113\053\114\052\116" +
    "\044\120\061\122\041\125\020\130\033\001\002\000\004" +
    "\105\u0102\001\002\000\010\011\uff6d\025\uff6d\060\uff6d\001" +
    "\002\000\060\004\060\012\043\013\057\024\026\027\024" +
    "\033\045\034\017\045\036\046\037\047\056\050\022\052" +
    "\034\054\015\061\030\106\040\112\032\113\053\114\052" +
    "\116\044\120\061\122\041\125\020\130\033\001\002\000" +
    "\062\004\060\007\u0105\012\043\013\057\024\026\027\024" +
    "\033\045\034\017\045\036\046\037\047\056\050\022\052" +
    "\034\054\015\061\030\106\040\112\032\113\053\114\052" +
    "\116\044\120\061\122\041\125\020\130\033\001\002\000" +
    "\004\105\u0106\001\002\000\010\011\uff6f\025\uff6f\060\uff6f" +
    "\001\002\000\004\132\u0108\001\002\000\006\014\u010a\104" +
    "\u0109\001\002\000\004\105\u0111\001\002\000\004\047\u010b" +
    "\001\002\000\006\014\u010f\104\uff64\001\002\000\004\104" +
    "\u010d\001\002\000\004\105\u010e\001\002\000\064\004\uff66" +
    "\007\uff66\012\uff66\013\uff66\024\uff66\027\uff66\033\uff66\034" +
    "\uff66\045\uff66\046\uff66\047\uff66\050\uff66\052\uff66\054\uff66" +
    "\060\uff66\061\uff66\106\uff66\112\uff66\113\uff66\114\uff66\116" +
    "\uff66\120\uff66\122\uff66\125\uff66\130\uff66\001\002\000\004" +
    "\047\u010b\001\002\000\004\104\uff63\001\002\000\064\004" +
    "\uff65\007\uff65\012\uff65\013\uff65\024\uff65\027\uff65\033\uff65" +
    "\034\uff65\045\uff65\046\uff65\047\uff65\050\uff65\052\uff65\054" +
    "\uff65\060\uff65\061\uff65\106\uff65\112\uff65\113\uff65\114\uff65" +
    "\116\uff65\120\uff65\122\uff65\125\uff65\130\uff65\001\002\000" +
    "\006\047\056\052\u0115\001\002\000\004\105\u011c\001\002" +
    "\000\006\051\u011a\105\uff96\001\002\000\004\047\056\001" +
    "\002\000\004\051\u0117\001\002\000\006\047\056\077\u0118" +
    "\001\002\000\004\105\uff97\001\002\000\004\105\uff94\001" +
    "\002\000\004\077\u011b\001\002\000\004\105\uff95\001\002" +
    "\000\020\044\244\047\056\076\240\077\247\103\243\124" +
    "\245\132\241\001\002\000\004\105\u011e\001\002\000\014" +
    "\027\024\047\056\054\015\112\032\116\044\001\002\000" +
    "\004\104\u0120\001\002\000\004\057\u0121\001\002\000\060" +
    "\004\060\012\043\013\057\024\026\027\024\033\045\034" +
    "\017\045\036\046\037\047\056\050\022\052\034\054\015" +
    "\061\030\106\040\112\032\113\053\114\052\116\044\120" +
    "\061\122\041\125\020\130\033\001\002\000\062\004\060" +
    "\012\043\013\057\024\026\027\024\033\045\034\017\045" +
    "\036\046\037\047\056\050\022\052\034\054\015\060\u0123" +
    "\061\030\106\040\112\032\113\053\114\052\116\044\120" +
    "\061\122\041\125\020\130\033\001\002\000\064\004\uff7b" +
    "\007\uff7b\012\uff7b\013\uff7b\024\uff7b\027\uff7b\033\uff7b\034" +
    "\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\052\uff7b\054\uff7b" +
    "\060\uff7b\061\uff7b\106\uff7b\112\uff7b\113\uff7b\114\uff7b\116" +
    "\uff7b\120\uff7b\122\uff7b\125\uff7b\130\uff7b\001\002\000\004" +
    "\105\u0125\001\002\000\064\004\uffc4\007\uffc4\012\uffc4\013" +
    "\uffc4\024\uffc4\027\uffc4\033\uffc4\034\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\052\uffc4\054\uffc4\060\uffc4\061\uffc4\106" +
    "\uffc4\112\uffc4\113\uffc4\114\uffc4\116\uffc4\120\uffc4\122\uffc4" +
    "\125\uffc4\130\uffc4\001\002\000\004\105\u0129\001\002\000" +
    "\004\105\u0128\001\002\000\064\004\uffcc\007\uffcc\012\uffcc" +
    "\013\uffcc\024\uffcc\027\uffcc\033\uffcc\034\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\052\uffcc\054\uffcc\060\uffcc\061\uffcc" +
    "\106\uffcc\112\uffcc\113\uffcc\114\uffcc\116\uffcc\120\uffcc\122" +
    "\uffcc\125\uffcc\130\uffcc\001\002\000\064\004\uffda\007\uffda" +
    "\012\uffda\013\uffda\024\uffda\027\uffda\033\uffda\034\uffda\045" +
    "\uffda\046\uffda\047\uffda\050\uffda\052\uffda\054\uffda\060\uffda" +
    "\061\uffda\106\uffda\112\uffda\113\uffda\114\uffda\116\uffda\120" +
    "\uffda\122\uffda\125\uffda\130\uffda\001\002\000\020\044\244" +
    "\047\056\076\240\077\247\103\243\124\245\132\241\001" +
    "\002\000\004\104\u012c\001\002\000\004\057\u012d\001\002" +
    "\000\060\004\060\012\043\013\057\024\026\027\024\033" +
    "\045\034\017\045\036\046\037\047\056\050\022\052\034" +
    "\054\015\061\030\106\040\112\032\113\053\114\052\116" +
    "\044\120\061\122\041\125\020\130\033\001\002\000\062" +
    "\004\060\012\043\013\057\024\026\027\024\033\045\034" +
    "\017\045\036\046\037\047\056\050\022\052\034\054\015" +
    "\060\u012f\061\030\106\040\112\032\113\053\114\052\116" +
    "\044\120\061\122\041\125\020\130\033\001\002\000\064" +
    "\004\uff7a\007\uff7a\012\uff7a\013\uff7a\024\uff7a\027\uff7a\033" +
    "\uff7a\034\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\052\uff7a" +
    "\054\uff7a\060\uff7a\061\uff7a\106\uff7a\112\uff7a\113\uff7a\114" +
    "\uff7a\116\uff7a\120\uff7a\122\uff7a\125\uff7a\130\uff7a\001\002" +
    "\000\006\104\uff91\105\uff91\001\002\000\064\004\uffe9\007" +
    "\uffe9\012\uffe9\013\uffe9\024\uffe9\027\uffe9\033\uffe9\034\uffe9" +
    "\045\uffe9\046\uffe9\047\uffe9\050\uffe9\052\uffe9\054\uffe9\060" +
    "\uffe9\061\uffe9\106\uffe9\112\uffe9\113\uffe9\114\uffe9\116\uffe9" +
    "\120\uffe9\122\uffe9\125\uffe9\130\uffe9\001\002\000\006\047" +
    "\123\105\uffcd\001\002\000\006\047\123\105\uffcd\001\002" +
    "\000\004\105\u0135\001\002\000\064\004\uffc8\007\uffc8\012" +
    "\uffc8\013\uffc8\024\uffc8\027\uffc8\033\uffc8\034\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\052\uffc8\054\uffc8\060\uffc8\061" +
    "\uffc8\106\uffc8\112\uffc8\113\uffc8\114\uffc8\116\uffc8\120\uffc8" +
    "\122\uffc8\125\uffc8\130\uffc8\001\002\000\004\105\u0137\001" +
    "\002\000\064\004\uffc5\007\uffc5\012\uffc5\013\uffc5\024\uffc5" +
    "\027\uffc5\033\uffc5\034\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\052\uffc5\054\uffc5\060\uffc5\061\uffc5\106\uffc5\112\uffc5" +
    "\113\uffc5\114\uffc5\116\uffc5\120\uffc5\122\uffc5\125\uffc5\130" +
    "\uffc5\001\002\000\010\041\u013a\047\056\132\u013c\001\002" +
    "\000\004\105\u0141\001\002\000\004\105\uff73\001\002\000" +
    "\006\036\u013f\105\uff77\001\002\000\006\036\u013d\105\uff76" +
    "\001\002\000\010\041\u013a\047\056\132\u013c\001\002\000" +
    "\004\105\uff75\001\002\000\010\041\u013a\047\056\132\u013c" +
    "\001\002\000\004\105\uff74\001\002\000\064\004\uff78\007" +
    "\uff78\012\uff78\013\uff78\024\uff78\027\uff78\033\uff78\034\uff78" +
    "\045\uff78\046\uff78\047\uff78\050\uff78\052\uff78\054\uff78\060" +
    "\uff78\061\uff78\106\uff78\112\uff78\113\uff78\114\uff78\116\uff78" +
    "\120\uff78\122\uff78\125\uff78\130\uff78\001\002\000\006\104" +
    "\uff8f\105\uff8f\001\002\000\004\002\ufff6\001\002\000\020" +
    "\044\244\047\056\076\240\077\247\103\243\124\245\132" +
    "\241\001\002\000\004\104\u0146\001\002\000\004\057\u0147" +
    "\001\002\000\060\004\060\012\043\013\057\024\026\027" +
    "\024\033\045\034\017\045\036\046\037\047\056\050\022" +
    "\052\034\054\015\061\030\106\040\112\032\113\053\114" +
    "\052\116\044\120\061\122\041\125\020\130\033\001\002" +
    "\000\062\004\060\012\043\013\057\024\026\027\024\033" +
    "\045\034\017\045\036\046\037\047\056\050\022\052\034" +
    "\054\015\060\u0149\061\030\106\040\112\032\113\053\114" +
    "\052\116\044\120\061\122\041\125\020\130\033\001\002" +
    "\000\066\004\uff9a\007\uff9a\012\uff9a\013\uff9a\024\uff9a\027" +
    "\uff9a\033\uff9a\034\uff9a\040\u014a\045\uff9a\046\uff9a\047\uff9a" +
    "\050\uff9a\052\uff9a\054\uff9a\060\uff9a\061\uff9a\106\uff9a\112" +
    "\uff9a\113\uff9a\114\uff9a\116\uff9a\120\uff9a\122\uff9a\125\uff9a" +
    "\130\uff9a\001\002\000\006\050\022\057\u014b\001\002\000" +
    "\060\004\060\012\043\013\057\024\026\027\024\033\045" +
    "\034\017\045\036\046\037\047\056\050\022\052\034\054" +
    "\015\061\030\106\040\112\032\113\053\114\052\116\044" +
    "\120\061\122\041\125\020\130\033\001\002\000\064\004" +
    "\uff98\007\uff98\012\uff98\013\uff98\024\uff98\027\uff98\033\uff98" +
    "\034\uff98\045\uff98\046\uff98\047\uff98\050\uff98\052\uff98\054" +
    "\uff98\060\uff98\061\uff98\106\uff98\112\uff98\113\uff98\114\uff98" +
    "\116\uff98\120\uff98\122\uff98\125\uff98\130\uff98\001\002\000" +
    "\062\004\060\012\043\013\057\024\026\027\024\033\045" +
    "\034\017\045\036\046\037\047\056\050\022\052\034\054" +
    "\015\060\u014e\061\030\106\040\112\032\113\053\114\052" +
    "\116\044\120\061\122\041\125\020\130\033\001\002\000" +
    "\064\004\uff99\007\uff99\012\uff99\013\uff99\024\uff99\027\uff99" +
    "\033\uff99\034\uff99\045\uff99\046\uff99\047\uff99\050\uff99\052" +
    "\uff99\054\uff99\060\uff99\061\uff99\106\uff99\112\uff99\113\uff99" +
    "\114\uff99\116\uff99\120\uff99\122\uff99\125\uff99\130\uff99\001" +
    "\002\000\006\047\123\105\uffcd\001\002\000\004\052\u0158" +
    "\001\002\000\004\052\u0155\001\002\000\006\047\123\105" +
    "\uffcd\001\002\000\004\105\u0154\001\002\000\064\004\uffcb" +
    "\007\uffcb\012\uffcb\013\uffcb\024\uffcb\027\uffcb\033\uffcb\034" +
    "\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\052\uffcb\054\uffcb" +
    "\060\uffcb\061\uffcb\106\uffcb\112\uffcb\113\uffcb\114\uffcb\116" +
    "\uffcb\120\uffcb\122\uffcb\125\uffcb\130\uffcb\001\002\000\006" +
    "\047\123\105\uffcd\001\002\000\004\105\u0157\001\002\000" +
    "\064\004\uffc9\007\uffc9\012\uffc9\013\uffc9\024\uffc9\027\uffc9" +
    "\033\uffc9\034\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\052" +
    "\uffc9\054\uffc9\060\uffc9\061\uffc9\106\uffc9\112\uffc9\113\uffc9" +
    "\114\uffc9\116\uffc9\120\uffc9\122\uffc9\125\uffc9\130\uffc9\001" +
    "\002\000\006\047\123\105\uffcd\001\002\000\004\105\u015a" +
    "\001\002\000\064\004\uffc7\007\uffc7\012\uffc7\013\uffc7\024" +
    "\uffc7\027\uffc7\033\uffc7\034\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\052\uffc7\054\uffc7\060\uffc7\061\uffc7\106\uffc7\112" +
    "\uffc7\113\uffc7\114\uffc7\116\uffc7\120\uffc7\122\uffc7\125\uffc7" +
    "\130\uffc7\001\002\000\004\105\u015c\001\002\000\064\004" +
    "\uffc2\007\uffc2\012\uffc2\013\uffc2\024\uffc2\027\uffc2\033\uffc2" +
    "\034\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\052\uffc2\054" +
    "\uffc2\060\uffc2\061\uffc2\106\uffc2\112\uffc2\113\uffc2\114\uffc2" +
    "\116\uffc2\120\uffc2\122\uffc2\125\uffc2\130\uffc2\001\002\000" +
    "\004\105\u015e\001\002\000\064\004\uffc6\007\uffc6\012\uffc6" +
    "\013\uffc6\024\uffc6\027\uffc6\033\uffc6\034\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\052\uffc6\054\uffc6\060\uffc6\061\uffc6" +
    "\106\uffc6\112\uffc6\113\uffc6\114\uffc6\116\uffc6\120\uffc6\122" +
    "\uffc6\125\uffc6\130\uffc6\001\002\000\006\104\uff90\105\uff90" +
    "\001\002\000\004\002\001\001\002\000\006\066\u0162\132" +
    "\u0163\001\002\000\006\047\u0164\055\u0165\001\002\000\010" +
    "\052\uffff\101\uffff\126\uffff\001\002\000\006\065\u0167\107" +
    "\u0168\001\002\000\004\065\u0166\001\002\000\010\052\ufffd" +
    "\101\ufffd\126\ufffd\001\002\000\010\052\ufffe\101\ufffe\126" +
    "\ufffe\001\002\000\004\047\u0169\001\002\000\004\065\u016a" +
    "\001\002\000\010\052\000\101\000\126\000\001\002\000" +
    "\004\104\u016c\001\002\000\004\057\u016d\001\002\000\060" +
    "\004\060\012\043\013\057\024\026\027\024\033\045\034" +
    "\017\045\036\046\037\047\056\050\022\052\034\054\015" +
    "\061\030\106\040\112\032\113\053\114\052\116\044\120" +
    "\061\122\041\125\020\130\033\001\002\000\062\004\060" +
    "\012\043\013\057\024\026\027\024\033\045\034\017\045" +
    "\036\046\037\047\056\050\022\052\034\054\015\060\u016f" +
    "\061\030\106\040\112\032\113\053\114\052\116\044\120" +
    "\061\122\041\125\020\130\033\001\002\000\004\002\ufff5" +
    "\001\002\000\004\075\u0183\001\002\000\004\053\u0179\001" +
    "\002\000\004\062\u0173\001\002\000\004\103\u0174\001\002" +
    "\000\004\104\u0175\001\002\000\004\057\u0176\001\002\000" +
    "\060\004\060\012\043\013\057\024\026\027\024\033\045" +
    "\034\017\045\036\046\037\047\056\050\022\052\034\054" +
    "\015\061\030\106\040\112\032\113\053\114\052\116\044" +
    "\120\061\122\041\125\020\130\033\001\002\000\062\004" +
    "\060\012\043\013\057\024\026\027\024\033\045\034\017" +
    "\045\036\046\037\047\056\050\022\052\034\054\015\060" +
    "\u0178\061\030\106\040\112\032\113\053\114\052\116\044" +
    "\120\061\122\041\125\020\130\033\001\002\000\004\002" +
    "\ufff7\001\002\000\006\066\u017a\132\u017b\001\002\000\006" +
    "\047\u017c\055\u017d\001\002\000\010\052\ufffb\101\ufffb\126" +
    "\ufffb\001\002\000\006\065\u017f\107\u0180\001\002\000\004" +
    "\065\u017e\001\002\000\010\052\ufff9\101\ufff9\126\ufff9\001" +
    "\002\000\010\052\ufffa\101\ufffa\126\ufffa\001\002\000\004" +
    "\047\u0181\001\002\000\004\065\u0182\001\002\000\010\052" +
    "\ufffc\101\ufffc\126\ufffc\001\002\000\004\117\u0184\001\002" +
    "\000\004\105\u0185\001\002\000\004\052\u0186\001\002\000" +
    "\004\062\u0187\001\002\000\004\103\u0188\001\002\000\004" +
    "\104\u0189\001\002\000\004\057\u018a\001\002\000\060\004" +
    "\060\012\043\013\057\024\026\027\024\033\045\034\017" +
    "\045\036\046\037\047\056\050\022\052\034\054\015\061" +
    "\030\106\040\112\032\113\053\114\052\116\044\120\061" +
    "\122\041\125\020\130\033\001\002\000\062\004\060\012" +
    "\043\013\057\024\026\027\024\033\045\034\017\045\036" +
    "\046\037\047\056\050\022\052\034\054\015\060\u018c\061" +
    "\030\106\040\112\032\113\053\114\052\116\044\120\061" +
    "\122\041\125\020\130\033\001\002\000\004\002\ufff8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u018a\000\006\002\006\014\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\022\004\050\005\034\006\024" +
    "\017\030\020\054\021\026\023\053\025\041\030\046\032" +
    "\020\034\047\035\045\036\015\001\001\000\004\034\u015e" +
    "\001\001\000\002\001\001\000\004\013\u015c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\230\005\224\006\221\017\223\020\232\021\222\023" +
    "\231\025\225\030\227\032\020\034\047\035\226\036\220" +
    "\001\001\000\004\034\u0141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\u0126\033\u0125\001\001\000\002\001\001\000\004\013\u0123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\326\033\325\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\125" +
    "\001\001\000\006\013\063\033\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\106\001\001\000\002" +
    "\001\001\000\004\031\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\121\001\001\000\002\001\001" +
    "\000\004\031\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\131" +
    "\034\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\134\034\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\214\001\001" +
    "\000\004\034\212\001\001\000\002\001\001\000\004\034" +
    "\210\001\001\000\002\001\001\000\004\034\206\001\001" +
    "\000\004\034\204\001\001\000\004\034\167\001\001\000" +
    "\004\022\200\001\001\000\004\022\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\216\004" +
    "\050\005\034\006\024\017\030\020\054\021\026\023\053" +
    "\025\041\030\046\032\020\034\047\035\045\036\015\001" +
    "\001\000\034\004\230\005\224\006\221\017\223\020\232" +
    "\021\222\023\231\025\225\030\227\032\020\034\047\035" +
    "\226\036\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\236" +
    "\011\247\015\241\034\245\001\001\000\002\001\001\000" +
    "\006\011\307\034\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\301\011\302\034\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\276\001\001" +
    "\000\004\022\273\001\001\000\004\012\250\001\001\000" +
    "\006\011\267\034\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\236\011\247\015\264\034\245\001" +
    "\001\000\002\001\001\000\012\010\236\011\247\015\263" +
    "\034\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\272\034\245\001" +
    "\001\000\006\011\270\034\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\275\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\300\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\314\011\302\034\245\001\001\000\004\012\310\001\001" +
    "\000\006\011\312\034\245\001\001\000\006\011\313\034" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\236\011\247\015" +
    "\321\034\245\001\001\000\012\010\236\011\247\015\320" +
    "\034\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\332\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\336\001\001\000\004\034\370\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\351" +
    "\001\001\000\002\001\001\000\036\003\343\004\050\005" +
    "\034\006\024\017\030\020\054\021\026\023\053\025\041" +
    "\030\046\032\020\034\047\035\045\036\015\001\001\000" +
    "\034\004\230\005\224\006\221\017\223\020\232\021\222" +
    "\023\231\025\225\030\227\032\020\034\047\035\226\036" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\354\004\050\005\034" +
    "\006\024\017\030\020\054\021\026\023\053\025\041\030" +
    "\046\032\020\034\047\035\045\036\015\001\001\000\034" +
    "\004\230\005\224\006\221\017\223\020\232\021\222\023" +
    "\231\025\225\030\227\032\020\034\047\035\226\036\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\360\004\050\005\034\006\024\017\030\020\054\021\026" +
    "\023\053\025\041\030\046\032\020\034\047\035\045\036" +
    "\015\001\001\000\034\004\230\005\224\006\221\017\223" +
    "\020\232\021\222\023\231\025\225\030\227\032\020\034" +
    "\047\035\226\036\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\364\004\050\005\034\006\024\017" +
    "\030\020\054\021\026\023\053\025\041\030\046\032\020" +
    "\034\047\035\045\036\015\001\001\000\034\004\230\005" +
    "\224\006\221\017\223\020\232\021\222\023\231\025\225" +
    "\030\227\032\020\034\047\035\226\036\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\373\004\050\005" +
    "\034\006\024\017\030\020\054\021\026\023\053\025\041" +
    "\030\046\032\020\034\047\035\045\036\015\001\001\000" +
    "\034\004\230\005\224\006\221\017\223\020\232\021\222" +
    "\023\231\025\225\030\227\032\020\034\047\035\226\036" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\377\004\050\005\034\006\024\017\030\020\054\021" +
    "\026\023\053\025\041\030\046\032\020\034\047\035\045" +
    "\036\015\001\001\000\034\004\230\005\224\006\221\017" +
    "\223\020\232\021\222\023\231\025\225\030\227\032\020" +
    "\034\047\035\226\036\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\u0103\004\050\005\034\006\024" +
    "\017\030\020\054\021\026\023\053\025\041\030\046\032" +
    "\020\034\047\035\045\036\015\001\001\000\034\004\230" +
    "\005\224\006\221\017\223\020\232\021\222\023\231\025" +
    "\225\030\227\032\020\034\047\035\226\036\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\u010b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\u010f\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\u0112\034\u0113\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\u0115\001\001" +
    "\000\002\001\001\000\004\034\u0118\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\236\011\247\015\u011c\034\245\001\001\000" +
    "\002\001\001\000\006\017\u011e\034\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\u0121\004\050\005" +
    "\034\006\024\017\030\020\054\021\026\023\053\025\041" +
    "\030\046\032\020\034\047\035\045\036\015\001\001\000" +
    "\034\004\230\005\224\006\221\017\223\020\232\021\222" +
    "\023\231\025\225\030\227\032\020\034\047\035\226\036" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\236\011\247\015\u012a" +
    "\034\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\u012d\004\050\005\034\006\024\017\030\020\054" +
    "\021\026\023\053\025\041\030\046\032\020\034\047\035" +
    "\045\036\015\001\001\000\034\004\230\005\224\006\221" +
    "\017\223\020\232\021\222\023\231\025\225\030\227\032" +
    "\020\034\047\035\226\036\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u0135\001" +
    "\001\000\004\013\u0133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\u0138\034\u013a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\u013d\034" +
    "\u013a\001\001\000\002\001\001\000\006\024\u013f\034\u013a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\236\011\247\015\u0144" +
    "\034\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\u0147\004\050\005\034\006\024\017\030\020\054" +
    "\021\026\023\053\025\041\030\046\032\020\034\047\035" +
    "\045\036\015\001\001\000\034\004\230\005\224\006\221" +
    "\017\223\020\232\021\222\023\231\025\225\030\227\032" +
    "\020\034\047\035\226\036\220\001\001\000\002\001\001" +
    "\000\004\005\u014b\001\001\000\036\003\u014c\004\050\005" +
    "\034\006\024\017\030\020\054\021\026\023\053\025\041" +
    "\030\046\032\020\034\047\035\045\036\015\001\001\000" +
    "\002\001\001\000\034\004\230\005\224\006\221\017\223" +
    "\020\232\021\222\023\231\025\225\030\227\032\020\034" +
    "\047\035\226\036\220\001\001\000\002\001\001\000\004" +
    "\013\u015a\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0152\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0155\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0158\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\u016d" +
    "\004\050\005\034\006\024\017\030\020\054\021\026\023" +
    "\053\025\041\030\046\032\020\034\047\035\045\036\015" +
    "\001\001\000\034\004\230\005\224\006\221\017\223\020" +
    "\232\021\222\023\231\025\225\030\227\032\020\034\047" +
    "\035\226\036\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\u0176\004" +
    "\050\005\034\006\024\017\030\020\054\021\026\023\053" +
    "\025\041\030\046\032\020\034\047\035\045\036\015\001" +
    "\001\000\034\004\230\005\224\006\221\017\223\020\232" +
    "\021\222\023\231\025\225\030\227\032\020\034\047\035" +
    "\226\036\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\u018a\004\050\005\034\006\024\017\030\020\054" +
    "\021\026\023\053\025\041\030\046\032\020\034\047\035" +
    "\045\036\015\001\001\000\034\004\230\005\224\006\221" +
    "\017\223\020\232\021\222\023\231\025\225\030\227\032" +
    "\020\034\047\035\226\036\220\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private Symbol error_symbol;
    private List<Symbol> identificadores = new ArrayList<Symbol>();

    //Metodo al que se llama automaticamente para algun error
    public void syntax_error(Symbol s){ 
        this.error_symbol = s;
    }
    public static void newScope(){
        typenames.push(new HashSet<String>());
    }
    public static void deleteScope(){
        typenames.pop();
    }
    public static boolean lookupType(String name){
        for (HashSet<String> scope: typenames)
            if (scope.contains(name)) return true;
        return false;
    }
    public static void addType(String name){
        typenames.peek().add(name);
    }
    public static LinkedList<HashSet<String>> typenames = new LinkedList<HashSet<String>>();
    public Symbol getErrorSymbol(){
        return this.error_symbol;
    }

    public Symbol getS(){
        return this.s;
    }

    public List<Symbol> getIdentificadores(){
        return this.identificadores;
    }
    
//Metodo al que se llama en el momento en que ya no es posible recuperacion de errores
public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception
{
    String lexema=s.value.toString();
    int fila=s.right;
    int columna=s.left;
    System.out.println(" !!! Error Sintactico  !!!!");
    System.out.println("\t\t Lexema : " +lexema);
    System.out.println("\t\t Fila : " +fila);
    System.out.println("\t\t Columna : " +columna);
    this.error_symbol = s;
    throw new Exception("!!! Error Sintactico  !!!!");
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SCANF ::= Scanf Parent_a STRING_LITERAL Coma BitAnd Identificador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // COMPLEMENTO ::= Identificador Coma COMPLEMENTO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COMPLEMENTO",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // COMPLEMENTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COMPLEMENTO",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // PRINTF ::= Printf Parent_a STRING_LITERAL Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // PRINTF ::= Printf Parent_a STRING_LITERAL Coma COMPLEMENTO Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Default DosPuntos SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Default DosPuntos SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CASE ::= CASE Case STRING_LITERAL DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CASE ::= CASE Case IDENTIFICADORES DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CASE ::= CASE Case Numero DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CASE ::= Case IDENTIFICADORES DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CASE ::= Case STRING_LITERAL DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CASE ::= Case Numero DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CIN ::= Cin DobleMayor ENTRADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ENTRADA ::= IDENTIFICADORES DobleMayor ENTRADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ENTRADA",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ENTRADA ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ENTRADA",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SALIDA ::= Endl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SALIDA ::= IDENTIFICADORES DobleMenor SALIDA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SALIDA ::= STRING_LITERAL DobleMenor SALIDA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SALIDA ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SALIDA ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // COUT ::= Cout DobleMenor SALIDA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // FOR ::= For Parent_a FOR_PARTE_UNO P_coma SENTENCIA_BOOLEANA_ANIDADA P_coma OPERACIONES_COMPLEMENTARIAS Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERACIONES_COMPLEMENTARIAS ::= _System Parent_a STRING_LITERAL Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES ModuloIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES DivisionIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MultiplicacionIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MenosIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MasIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES ModuloIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES DivisionIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MultiplicacionIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MenosIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MasIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Decremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPERACIONES_COMPLEMENTARIAS ::= Decremento IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OPERACIONES_COMPLEMENTARIAS ::= Incremento IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OPERACIONES_COMPLEMENTARIAS ::= Return Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IDENTIFICADORES ::= Identificador Corchete_a Numero Corchete_c Identificador Corchete_a Identificador Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FOR_PARTE_UNO ::= Int IDENTIFICADORES Igual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FOR_PARTE_UNO ::= IDENTIFICADORES Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FOR_PARTE_UNO ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FOR_PARTE_UNO ::= Int IDENTIFICADORES Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE O_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE Y_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA O_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA Y_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_BOOLEANA_COMPUESTA ::= Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_BOOLEANA_SIMPLE ::= Parent_a SENTENCIA_BOOLEANA_SIMPLE Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_BOOLEANA_SIMPLE ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_BOOLEANA_SIMPLE ::= False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_BOOLEANA_SIMPLE ::= True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERADORES_RELACIONALES ::= MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERADORES_RELACIONALES ::= MenorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERADORES_RELACIONALES ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERADORES_RELACIONALES ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERADORES_RELACIONALES ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERADORES_RELACIONALES ::= ComparadorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERADORES_RELACIONALES ::= BitAnd 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERADORES_RELACIONALES ::= BitOr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERADORES_ARITMETICOS ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERADORES_ARITMETICOS ::= Division 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERADORES_ARITMETICOS ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERADORES_ARITMETICOS ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERADORES_ARITMETICOS ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= DECLARACION_ARREGLO_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Bool DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= _String DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Unsigned Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Float DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Long Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Unsigned Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Unsigned Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Unsigned Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_ANIDADA ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_ANIDADA ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_ANIDADA ::= Identificador Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_ANIDADA ::= Identificador Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_ANIDADA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_ARREGLO ::= Identificador Corchete_a Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_ARREGLO ::= Identificador Corchete_a Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_ARREGLO_ANIDADA ::= Char DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_ARREGLO_ANIDADA ::= _String DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_ARREGLO_ANIDADA ::= Int DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CREACION_ARREGLO ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CREACION_ARREGLO ::= STRING_LITERAL Coma CREACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CREACION_ARREGLO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CREACION_ARREGLO ::= Numero Coma CREACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= OPERACIONES_COMPLEMENTARIAS P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA OPERACIONES_COMPLEMENTARIAS P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= IMPORTACION Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= IMPORTACION Using Namespace Std P_coma Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Iostream MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTACION ::= IMPORTACION Numeral Include STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTACION ::= Numeral Include MenorQue Iostream MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACION ::= Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTACION ::= Numeral Include STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // IMPORTACION ::= Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

