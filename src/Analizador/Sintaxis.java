
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 23 15:48:08 CDT 2022
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 23 15:48:08 CDT 2022
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\252\000\002\002\004\000\002\014\011\000\002\014" +
    "\005\000\002\014\007\000\002\014\007\000\002\014\012" +
    "\000\002\014\006\000\002\014\010\000\002\014\010\000" +
    "\002\002\016\000\002\002\012\000\002\002\011\000\002" +
    "\002\010\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\005\000\002\003\004\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\031\005\000\002\031\003\000\002\031\005\000\002" +
    "\031\003\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\037\013\000\002\037\011\000\002\037\014" +
    "\000\002\037\012\000\002\037\010\000\002\037\006\000" +
    "\002\033\005\000\002\033\007\000\002\034\005\000\002" +
    "\034\007\000\002\035\005\000\002\035\007\000\002\035" +
    "\002\000\002\036\007\000\002\036\007\000\002\036\005" +
    "\000\002\036\005\000\002\036\002\000\002\013\005\000" +
    "\002\013\005\000\002\013\003\000\002\004\005\000\002" +
    "\004\006\000\002\004\006\000\002\004\007\000\002\004" +
    "\006\000\002\004\007\000\002\004\005\000\002\004\006" +
    "\000\002\004\005\000\002\004\005\000\002\004\006\000" +
    "\002\004\005\000\002\004\005\000\002\004\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\003\000\002\011\003\000\002\011\005\000" +
    "\002\010\006\000\002\010\005\000\002\010\006\000\002" +
    "\010\007\000\002\010\005\000\002\010\006\000\002\010" +
    "\004\000\002\015\003\000\002\015\003\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\005\011\000\002\005\015\000\002\005\013\000\002" +
    "\016\006\000\002\016\003\000\002\016\005\000\002\016" +
    "\006\000\002\040\003\000\002\040\012\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\007\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\007\000\002\017\007\000\002" +
    "\017\007\000\002\017\006\000\002\006\015\000\002\020" +
    "\011\000\002\021\013\000\002\023\006\000\002\024\003" +
    "\000\002\024\003\000\002\024\005\000\002\024\005\000" +
    "\002\024\003\000\002\026\003\000\002\026\005\000\002" +
    "\025\006\000\002\027\010\000\002\027\010\000\002\027" +
    "\010\000\002\027\011\000\002\027\011\000\002\027\011" +
    "\000\002\030\016\000\002\030\014\000\002\030\011\000" +
    "\002\041\011\000\002\041\007\000\002\007\003\000\002" +
    "\007\005\000\002\042\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a2\000\010\052\010\062\005\101\006\001\002\000" +
    "\010\052\u018a\101\u0189\126\u0188\001\002\000\004\103\u0183" +
    "\001\002\000\004\053\u0179\001\002\000\004\002\u0178\001" +
    "\002\000\004\062\011\001\002\000\004\103\012\001\002" +
    "\000\004\104\013\001\002\000\004\057\014\001\002\000" +
    "\060\004\060\012\043\013\057\024\026\027\024\033\045" +
    "\034\016\045\036\046\037\047\056\050\022\052\034\054" +
    "\015\061\030\106\040\112\032\113\053\114\052\116\044" +
    "\120\061\122\041\125\020\130\033\001\002\000\004\047" +
    "\056\001\002\000\004\047\u0137\001\002\000\064\004\uffdf" +
    "\007\uffdf\012\uffdf\013\uffdf\024\uffdf\027\uffdf\033\uffdf\034" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\052\uffdf\054\uffdf" +
    "\060\uffdf\061\uffdf\106\uffdf\112\uffdf\113\uffdf\114\uffdf\116" +
    "\uffdf\120\uffdf\122\uffdf\125\uffdf\130\uffdf\001\002\000\012" +
    "\012\u0167\052\u016a\061\u0168\114\u0169\001\002\000\064\004" +
    "\uffb5\007\uffb5\012\uffb5\013\uffb5\024\uffb5\027\uffb5\033\uffb5" +
    "\034\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\052\uffb5\054" +
    "\uffb5\060\uffb5\061\uffb5\106\uffb5\112\uffb5\113\uffb5\114\uffb5" +
    "\116\uffb5\120\uffb5\122\uffb5\125\uffb5\130\uffb5\001\002\000" +
    "\004\103\u015c\001\002\000\062\004\060\012\043\013\057" +
    "\024\026\027\024\033\045\034\016\045\036\046\037\047" +
    "\056\050\022\052\034\054\015\060\u015b\061\030\106\040" +
    "\112\032\113\053\114\052\116\044\120\061\122\041\125" +
    "\020\130\033\001\002\000\004\047\056\001\002\000\064" +
    "\004\uffef\007\uffef\012\uffef\013\uffef\024\uffef\027\uffef\033" +
    "\uffef\034\uffef\045\uffef\046\uffef\047\uffef\050\uffef\052\uffef" +
    "\054\uffef\060\uffef\061\uffef\106\uffef\112\uffef\113\uffef\114" +
    "\uffef\116\uffef\120\uffef\122\uffef\125\uffef\130\uffef\001\002" +
    "\000\004\036\u0150\001\002\000\064\004\uffeb\007\uffeb\012" +
    "\uffeb\013\uffeb\024\uffeb\027\uffeb\033\uffeb\034\uffeb\045\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\052\uffeb\054\uffeb\060\uffeb\061" +
    "\uffeb\106\uffeb\112\uffeb\113\uffeb\114\uffeb\116\uffeb\120\uffeb" +
    "\122\uffeb\125\uffeb\130\uffeb\001\002\000\006\034\u014a\052" +
    "\u014b\001\002\000\004\105\u0149\001\002\000\004\077\u0148" +
    "\001\002\000\004\103\u0142\001\002\000\004\047\u013f\001" +
    "\002\000\064\004\ufff1\007\ufff1\012\ufff1\013\ufff1\024\ufff1" +
    "\027\ufff1\033\ufff1\034\ufff1\045\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\052\ufff1\054\ufff1\060\ufff1\061\ufff1\106\ufff1\112\ufff1" +
    "\113\ufff1\114\ufff1\116\ufff1\120\ufff1\122\ufff1\125\ufff1\130" +
    "\ufff1\001\002\000\004\047\u0137\001\002\000\004\103\u0124" +
    "\001\002\000\004\103\u0119\001\002\000\004\103\354\001" +
    "\002\000\064\004\uffe5\007\uffe5\012\uffe5\013\uffe5\024\uffe5" +
    "\027\uffe5\033\uffe5\034\uffe5\045\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\052\uffe5\054\uffe5\060\uffe5\061\uffe5\106\uffe5\112\uffe5" +
    "\113\uffe5\114\uffe5\116\uffe5\120\uffe5\122\uffe5\125\uffe5\130" +
    "\uffe5\001\002\000\004\047\343\001\002\000\004\103\337" +
    "\001\002\000\004\057\232\001\002\000\064\004\uffe1\007" +
    "\uffe1\012\uffe1\013\uffe1\024\uffe1\027\uffe1\033\uffe1\034\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\050\uffe1\052\uffe1\054\uffe1\060" +
    "\uffe1\061\uffe1\106\uffe1\112\uffe1\113\uffe1\114\uffe1\116\uffe1" +
    "\120\uffe1\122\uffe1\125\uffe1\130\uffe1\001\002\000\064\004" +
    "\uffe3\007\uffe3\012\uffe3\013\uffe3\024\uffe3\027\uffe3\033\uffe3" +
    "\034\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\052\uffe3\054" +
    "\uffe3\060\uffe3\061\uffe3\106\uffe3\112\uffe3\113\uffe3\114\uffe3" +
    "\116\uffe3\120\uffe3\122\uffe3\125\uffe3\130\uffe3\001\002\000" +
    "\022\027\177\032\176\051\202\054\175\063\173\064\201" +
    "\072\174\074\200\001\002\000\064\004\ufff3\007\ufff3\012" +
    "\ufff3\013\ufff3\024\ufff3\027\ufff3\033\ufff3\034\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\050\ufff3\052\ufff3\054\ufff3\060\ufff3\061" +
    "\ufff3\106\ufff3\112\ufff3\113\ufff3\114\ufff3\116\ufff3\120\ufff3" +
    "\122\ufff3\125\ufff3\130\ufff3\001\002\000\004\052\163\001" +
    "\002\000\004\103\154\001\002\000\064\004\uffe7\007\uffe7" +
    "\012\uffe7\013\uffe7\024\uffe7\027\uffe7\033\uffe7\034\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\052\uffe7\054\uffe7\060\uffe7" +
    "\061\uffe7\106\uffe7\112\uffe7\113\uffe7\114\uffe7\116\uffe7\120" +
    "\uffe7\122\uffe7\125\uffe7\130\uffe7\001\002\000\064\004\uffed" +
    "\007\uffed\012\uffed\013\uffed\024\uffed\027\uffed\033\uffed\034" +
    "\uffed\045\uffed\046\uffed\047\uffed\050\uffed\052\uffed\054\uffed" +
    "\060\uffed\061\uffed\106\uffed\112\uffed\113\uffed\114\uffed\116" +
    "\uffed\120\uffed\122\uffed\125\uffed\130\uffed\001\002\000\074" +
    "\005\uff89\006\uff89\017\uff89\022\145\027\uff89\030\uff89\031" +
    "\uff89\032\uff89\035\uff89\036\uff89\037\uff89\051\uff89\054\uff89" +
    "\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89\071" +
    "\uff89\072\uff89\073\uff89\074\uff89\102\uff89\104\uff89\105\uff89" +
    "\111\uff89\115\uff89\131\uff89\001\002\000\004\035\137\001" +
    "\002\000\006\047\126\105\uffc6\001\002\000\006\047\064" +
    "\105\uffcb\001\002\000\004\105\124\001\002\000\004\105" +
    "\123\001\002\000\006\022\065\051\066\001\002\000\006" +
    "\023\074\077\073\001\002\000\004\132\067\001\002\000" +
    "\006\014\070\105\uffcd\001\002\000\006\047\072\105\uffcb" +
    "\001\002\000\004\105\uffcc\001\002\000\004\051\066\001" +
    "\002\000\004\023\112\001\002\000\004\051\075\001\002" +
    "\000\004\057\076\001\002\000\006\077\077\132\100\001" +
    "\002\000\006\014\110\060\uffdd\001\002\000\006\014\106" +
    "\060\uffdb\001\002\000\004\060\102\001\002\000\006\014" +
    "\103\105\uffd6\001\002\000\004\047\105\001\002\000\004" +
    "\105\uffd7\001\002\000\004\022\065\001\002\000\006\077" +
    "\077\132\100\001\002\000\004\060\uffdc\001\002\000\006" +
    "\077\077\132\100\001\002\000\004\060\uffde\001\002\000" +
    "\010\014\113\051\114\105\uffd2\001\002\000\004\047\105" +
    "\001\002\000\004\057\115\001\002\000\006\077\077\132" +
    "\100\001\002\000\004\060\117\001\002\000\006\014\120" +
    "\105\uffd4\001\002\000\004\047\105\001\002\000\004\105" +
    "\uffd5\001\002\000\004\105\uffd3\001\002\000\064\004\uffb7" +
    "\007\uffb7\012\uffb7\013\uffb7\024\uffb7\027\uffb7\033\uffb7\034" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\052\uffb7\054\uffb7" +
    "\060\uffb7\061\uffb7\106\uffb7\112\uffb7\113\uffb7\114\uffb7\116" +
    "\uffb7\120\uffb7\122\uffb7\125\uffb7\130\uffb7\001\002\000\064" +
    "\004\uffd9\007\uffd9\012\uffd9\013\uffd9\024\uffd9\027\uffd9\033" +
    "\uffd9\034\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\052\uffd9" +
    "\054\uffd9\060\uffd9\061\uffd9\106\uffd9\112\uffd9\113\uffd9\114" +
    "\uffd9\116\uffd9\120\uffd9\122\uffd9\125\uffd9\130\uffd9\001\002" +
    "\000\004\105\136\001\002\000\004\051\127\001\002\000" +
    "\006\044\130\124\131\001\002\000\006\014\134\105\uffc7" +
    "\001\002\000\006\014\132\105\uffc8\001\002\000\006\047" +
    "\126\105\uffc6\001\002\000\004\105\uffca\001\002\000\006" +
    "\047\126\105\uffc6\001\002\000\004\105\uffc9\001\002\000" +
    "\064\004\uffb6\007\uffb6\012\uffb6\013\uffb6\024\uffb6\027\uffb6" +
    "\033\uffb6\034\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\052" +
    "\uffb6\054\uffb6\060\uffb6\061\uffb6\106\uffb6\112\uffb6\113\uffb6" +
    "\114\uffb6\116\uffb6\120\uffb6\122\uffb6\125\uffb6\130\uffb6\001" +
    "\002\000\004\047\056\001\002\000\006\035\143\105\uff68" +
    "\001\002\000\004\105\142\001\002\000\064\004\uff66\007" +
    "\uff66\012\uff66\013\uff66\024\uff66\027\uff66\033\uff66\034\uff66" +
    "\045\uff66\046\uff66\047\uff66\050\uff66\052\uff66\054\uff66\060" +
    "\uff66\061\uff66\106\uff66\112\uff66\113\uff66\114\uff66\116\uff66" +
    "\120\uff66\122\uff66\125\uff66\130\uff66\001\002\000\004\047" +
    "\056\001\002\000\004\105\uff67\001\002\000\004\077\146" +
    "\001\002\000\004\023\147\001\002\000\004\047\150\001" +
    "\002\000\004\022\151\001\002\000\004\047\152\001\002" +
    "\000\004\023\153\001\002\000\072\005\uff88\006\uff88\017" +
    "\uff88\027\uff88\030\uff88\031\uff88\032\uff88\035\uff88\036\uff88" +
    "\037\uff88\051\uff88\054\uff88\063\uff88\064\uff88\065\uff88\066" +
    "\uff88\067\uff88\070\uff88\071\uff88\072\uff88\073\uff88\074\uff88" +
    "\102\uff88\104\uff88\105\uff88\111\uff88\115\uff88\131\uff88\001" +
    "\002\000\004\132\155\001\002\000\004\014\156\001\002" +
    "\000\004\005\157\001\002\000\004\047\160\001\002\000" +
    "\004\104\161\001\002\000\004\105\162\001\002\000\064" +
    "\004\uff58\007\uff58\012\uff58\013\uff58\024\uff58\027\uff58\033" +
    "\uff58\034\uff58\045\uff58\046\uff58\047\uff58\050\uff58\052\uff58" +
    "\054\uff58\060\uff58\061\uff58\106\uff58\112\uff58\113\uff58\114" +
    "\uff58\116\uff58\120\uff58\122\uff58\125\uff58\130\uff58\001\002" +
    "\000\004\047\165\001\002\000\004\105\172\001\002\000" +
    "\004\051\166\001\002\000\004\077\167\001\002\000\006" +
    "\014\170\105\uffd1\001\002\000\004\047\165\001\002\000" +
    "\004\105\uffd0\001\002\000\064\004\uffc0\007\uffc0\012\uffc0" +
    "\013\uffc0\024\uffc0\027\uffc0\033\uffc0\034\uffc0\045\uffc0\046" +
    "\uffc0\047\uffc0\050\uffc0\052\uffc0\054\uffc0\060\uffc0\061\uffc0" +
    "\106\uffc0\112\uffc0\113\uffc0\114\uffc0\116\uffc0\120\uffc0\122" +
    "\uffc0\125\uffc0\130\uffc0\001\002\000\006\047\056\077\230" +
    "\001\002\000\006\047\056\077\226\001\002\000\006\104" +
    "\uff84\105\uff84\001\002\000\006\047\056\077\224\001\002" +
    "\000\006\104\uff83\105\uff83\001\002\000\006\047\056\077" +
    "\222\001\002\000\006\047\056\077\220\001\002\000\006" +
    "\047\056\077\203\001\002\000\020\031\205\071\206\073" +
    "\212\104\uff76\105\uff76\111\210\115\211\001\002\000\020" +
    "\031\205\071\206\073\212\104\uff7d\105\uff7d\111\210\115" +
    "\211\001\002\000\006\047\uffb1\077\uffb1\001\002\000\006" +
    "\047\uffb0\077\uffb0\001\002\000\006\047\056\077\213\001" +
    "\002\000\006\047\uffb3\077\uffb3\001\002\000\006\047\uffb4" +
    "\077\uffb4\001\002\000\006\047\uffb2\077\uffb2\001\002\000" +
    "\006\104\uff74\105\uff74\001\002\000\006\104\uff7c\105\uff7c" +
    "\001\002\000\006\047\056\077\216\001\002\000\006\104" +
    "\uff73\105\uff73\001\002\000\006\104\uff75\105\uff75\001\002" +
    "\000\006\104\uff7a\105\uff7a\001\002\000\006\104\uff81\105" +
    "\uff81\001\002\000\006\104\uff79\105\uff79\001\002\000\006" +
    "\104\uff80\105\uff80\001\002\000\006\104\uff78\105\uff78\001" +
    "\002\000\006\104\uff7f\105\uff7f\001\002\000\006\104\uff77" +
    "\105\uff77\001\002\000\006\104\uff7e\105\uff7e\001\002\000" +
    "\006\104\uff7b\105\uff7b\001\002\000\006\104\uff82\105\uff82" +
    "\001\002\000\060\004\060\012\043\013\057\024\026\027" +
    "\024\033\045\034\016\045\036\046\037\047\056\050\022" +
    "\052\034\054\015\061\030\106\040\112\032\113\053\114" +
    "\052\116\044\120\061\122\041\125\020\130\033\001\002" +
    "\000\062\004\060\012\043\013\057\024\026\027\024\033" +
    "\045\034\016\045\036\046\037\047\056\050\022\052\034" +
    "\054\015\060\234\061\030\106\040\112\032\113\053\114" +
    "\052\116\044\120\061\122\041\125\020\130\033\001\002" +
    "\000\004\130\251\001\002\000\064\004\uffe0\007\uffe0\012" +
    "\uffe0\013\uffe0\024\uffe0\027\uffe0\033\uffe0\034\uffe0\045\uffe0" +
    "\046\uffe0\047\uffe0\050\uffe0\052\uffe0\054\uffe0\060\uffe0\061" +
    "\uffe0\106\uffe0\112\uffe0\113\uffe0\114\uffe0\116\uffe0\120\uffe0" +
    "\122\uffe0\125\uffe0\130\uffe0\001\002\000\064\004\ufff0\007" +
    "\ufff0\012\ufff0\013\ufff0\024\ufff0\027\ufff0\033\ufff0\034\ufff0" +
    "\045\ufff0\046\ufff0\047\ufff0\050\ufff0\052\ufff0\054\ufff0\060" +
    "\ufff0\061\ufff0\106\ufff0\112\ufff0\113\ufff0\114\ufff0\116\ufff0" +
    "\120\ufff0\122\ufff0\125\ufff0\130\ufff0\001\002\000\064\004" +
    "\uffec\007\uffec\012\uffec\013\uffec\024\uffec\027\uffec\033\uffec" +
    "\034\uffec\045\uffec\046\uffec\047\uffec\050\uffec\052\uffec\054" +
    "\uffec\060\uffec\061\uffec\106\uffec\112\uffec\113\uffec\114\uffec" +
    "\116\uffec\120\uffec\122\uffec\125\uffec\130\uffec\001\002\000" +
    "\004\105\250\001\002\000\064\004\ufff2\007\ufff2\012\ufff2" +
    "\013\ufff2\024\ufff2\027\ufff2\033\ufff2\034\ufff2\045\ufff2\046" +
    "\ufff2\047\ufff2\050\ufff2\052\ufff2\054\ufff2\060\ufff2\061\ufff2" +
    "\106\ufff2\112\ufff2\113\ufff2\114\ufff2\116\ufff2\120\ufff2\122" +
    "\ufff2\125\ufff2\130\ufff2\001\002\000\064\004\uffe6\007\uffe6" +
    "\012\uffe6\013\uffe6\024\uffe6\027\uffe6\033\uffe6\034\uffe6\045" +
    "\uffe6\046\uffe6\047\uffe6\050\uffe6\052\uffe6\054\uffe6\060\uffe6" +
    "\061\uffe6\106\uffe6\112\uffe6\113\uffe6\114\uffe6\116\uffe6\120" +
    "\uffe6\122\uffe6\125\uffe6\130\uffe6\001\002\000\064\004\uffe2" +
    "\007\uffe2\012\uffe2\013\uffe2\024\uffe2\027\uffe2\033\uffe2\034" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\052\uffe2\054\uffe2" +
    "\060\uffe2\061\uffe2\106\uffe2\112\uffe2\113\uffe2\114\uffe2\116" +
    "\uffe2\120\uffe2\122\uffe2\125\uffe2\130\uffe2\001\002\000\064" +
    "\004\uffe4\007\uffe4\012\uffe4\013\uffe4\024\uffe4\027\uffe4\033" +
    "\uffe4\034\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\052\uffe4" +
    "\054\uffe4\060\uffe4\061\uffe4\106\uffe4\112\uffe4\113\uffe4\114" +
    "\uffe4\116\uffe4\120\uffe4\122\uffe4\125\uffe4\130\uffe4\001\002" +
    "\000\064\004\ufff4\007\ufff4\012\ufff4\013\ufff4\024\ufff4\027" +
    "\ufff4\033\ufff4\034\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4" +
    "\052\ufff4\054\ufff4\060\ufff4\061\ufff4\106\ufff4\112\ufff4\113" +
    "\ufff4\114\ufff4\116\ufff4\120\ufff4\122\ufff4\125\ufff4\130\ufff4" +
    "\001\002\000\064\004\uffe8\007\uffe8\012\uffe8\013\uffe8\024" +
    "\uffe8\027\uffe8\033\uffe8\034\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\052\uffe8\054\uffe8\060\uffe8\061\uffe8\106\uffe8\112" +
    "\uffe8\113\uffe8\114\uffe8\116\uffe8\120\uffe8\122\uffe8\125\uffe8" +
    "\130\uffe8\001\002\000\064\004\uffee\007\uffee\012\uffee\013" +
    "\uffee\024\uffee\027\uffee\033\uffee\034\uffee\045\uffee\046\uffee" +
    "\047\uffee\050\uffee\052\uffee\054\uffee\060\uffee\061\uffee\106" +
    "\uffee\112\uffee\113\uffee\114\uffee\116\uffee\120\uffee\122\uffee" +
    "\125\uffee\130\uffee\001\002\000\064\004\uffea\007\uffea\012" +
    "\uffea\013\uffea\024\uffea\027\uffea\033\uffea\034\uffea\045\uffea" +
    "\046\uffea\047\uffea\050\uffea\052\uffea\054\uffea\060\uffea\061" +
    "\uffea\106\uffea\112\uffea\113\uffea\114\uffea\116\uffea\120\uffea" +
    "\122\uffea\125\uffea\130\uffea\001\002\000\004\103\252\001" +
    "\002\000\020\044\257\047\056\076\254\077\263\103\260" +
    "\124\261\132\255\001\002\000\012\102\333\104\uff96\105" +
    "\uff96\131\334\001\002\000\016\044\257\047\056\077\263" +
    "\103\323\124\261\132\255\001\002\000\032\005\uff9f\006" +
    "\uff9f\017\uff9f\030\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f" +
    "\102\uff9f\104\uff9f\105\uff9f\131\uff9f\001\002\000\004\104" +
    "\321\001\002\000\032\005\uffa6\006\uffa6\017\uffa6\030\uffa6" +
    "\065\uffa6\066\uffa6\067\uffa6\070\uffa6\102\uffa6\104\uffa6\105" +
    "\uffa6\131\uffa6\001\002\000\020\044\257\047\056\076\254" +
    "\077\263\103\260\124\261\132\255\001\002\000\032\005" +
    "\uffa7\006\uffa7\017\uffa7\030\uffa7\065\uffa7\066\uffa7\067\uffa7" +
    "\070\uffa7\102\uffa7\104\uffa7\105\uffa7\131\uffa7\001\002\000" +
    "\044\005\uffa5\006\uffa5\017\uffa5\030\uffa5\031\205\065\uffa5" +
    "\066\uffa5\067\uffa5\070\uffa5\071\206\073\212\102\uffa5\104" +
    "\uffa5\105\uffa5\111\210\115\211\131\uffa5\001\002\000\044" +
    "\005\uffa0\006\uffa0\017\uffa0\030\uffa0\031\205\065\uffa0\066" +
    "\uffa0\067\uffa0\070\uffa0\071\206\073\212\102\uffa0\104\uffa0" +
    "\105\uffa0\111\210\115\211\131\uffa0\001\002\000\032\005" +
    "\267\006\273\017\277\030\275\065\266\066\276\067\274" +
    "\070\271\102\270\104\uff95\105\uff95\131\272\001\002\000" +
    "\020\044\257\047\056\076\302\077\263\103\303\124\261" +
    "\132\255\001\002\000\020\044\uffa8\047\uffa8\076\uffa8\077" +
    "\uffa8\103\uffa8\124\uffa8\132\uffa8\001\002\000\020\044\uffae" +
    "\047\uffae\076\uffae\077\uffae\103\uffae\124\uffae\132\uffae\001" +
    "\002\000\020\044\257\047\056\076\254\077\263\103\260" +
    "\124\261\132\255\001\002\000\020\044\uffac\047\uffac\076" +
    "\uffac\077\uffac\103\uffac\124\uffac\132\uffac\001\002\000\020" +
    "\044\257\047\056\076\254\077\263\103\260\124\261\132" +
    "\255\001\002\000\020\044\uffaf\047\uffaf\076\uffaf\077\uffaf" +
    "\103\uffaf\124\uffaf\132\uffaf\001\002\000\020\044\uffab\047" +
    "\uffab\076\uffab\077\uffab\103\uffab\124\uffab\132\uffab\001\002" +
    "\000\020\044\uffaa\047\uffaa\076\uffaa\077\uffaa\103\uffaa\124" +
    "\uffaa\132\uffaa\001\002\000\020\044\uffa9\047\uffa9\076\uffa9" +
    "\077\uffa9\103\uffa9\124\uffa9\132\uffa9\001\002\000\020\044" +
    "\uffad\047\uffad\076\uffad\077\uffad\103\uffad\124\uffad\132\uffad" +
    "\001\002\000\006\104\uff92\105\uff92\001\002\000\006\104" +
    "\uff91\105\uff91\001\002\000\016\044\257\047\056\077\263" +
    "\103\303\124\261\132\255\001\002\000\016\044\257\047" +
    "\056\077\263\103\303\124\261\132\255\001\002\000\012" +
    "\102\uff9c\104\uff9c\105\uff9c\131\uff9c\001\002\000\004\104" +
    "\306\001\002\000\032\005\uff9e\006\uff9e\017\uff9e\030\uff9e" +
    "\065\uff9e\066\uff9e\067\uff9e\070\uff9e\102\uff9e\104\uff9e\105" +
    "\uff9e\131\uff9e\001\002\000\012\102\uff9b\104\uff9b\105\uff9b" +
    "\131\uff9b\001\002\000\006\047\056\077\311\001\002\000" +
    "\032\005\uffa1\006\uffa1\017\uffa1\030\uffa1\065\uffa1\066\uffa1" +
    "\067\uffa1\070\uffa1\102\uffa1\104\uffa1\105\uffa1\131\uffa1\001" +
    "\002\000\032\005\uffa2\006\uffa2\017\uffa2\030\uffa2\065\uffa2" +
    "\066\uffa2\067\uffa2\070\uffa2\102\uffa2\104\uffa2\105\uffa2\131" +
    "\uffa2\001\002\000\006\047\056\077\314\001\002\000\032" +
    "\005\uffa3\006\uffa3\017\uffa3\030\uffa3\065\uffa3\066\uffa3\067" +
    "\uffa3\070\uffa3\102\uffa3\104\uffa3\105\uffa3\131\uffa3\001\002" +
    "\000\032\005\uffa4\006\uffa4\017\uffa4\030\uffa4\065\uffa4\066" +
    "\uffa4\067\uffa4\070\uffa4\102\uffa4\104\uffa4\105\uffa4\131\uffa4" +
    "\001\002\000\004\104\320\001\002\000\024\005\267\006" +
    "\273\017\277\030\275\065\266\066\276\067\274\070\271" +
    "\104\306\001\002\000\012\102\uff99\104\uff99\105\uff99\131" +
    "\uff99\001\002\000\004\105\322\001\002\000\064\004\uff6f" +
    "\007\uff6f\012\uff6f\013\uff6f\024\uff6f\027\uff6f\033\uff6f\034" +
    "\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f\052\uff6f\054\uff6f" +
    "\060\uff6f\061\uff6f\106\uff6f\112\uff6f\113\uff6f\114\uff6f\116" +
    "\uff6f\120\uff6f\122\uff6f\125\uff6f\130\uff6f\001\002\000\020" +
    "\044\257\047\056\076\254\077\263\103\260\124\261\132" +
    "\255\001\002\000\032\005\267\006\273\017\277\030\275" +
    "\065\266\066\276\067\274\070\271\102\uff97\104\uff97\105" +
    "\uff97\131\uff97\001\002\000\020\044\257\047\056\076\326" +
    "\077\263\103\303\124\261\132\255\001\002\000\016\044" +
    "\257\047\056\077\263\103\303\124\261\132\255\001\002" +
    "\000\012\102\uff9d\104\uff9d\105\uff9d\131\uff9d\001\002\000" +
    "\012\102\uff9a\104\uff9a\105\uff9a\131\uff9a\001\002\000\004" +
    "\104\332\001\002\000\012\102\uff98\104\uff98\105\uff98\131" +
    "\uff98\001\002\000\020\044\257\047\056\076\254\077\263" +
    "\103\260\124\261\132\255\001\002\000\020\044\257\047" +
    "\056\076\254\077\263\103\260\124\261\132\255\001\002" +
    "\000\006\104\uff94\105\uff94\001\002\000\006\104\uff93\105" +
    "\uff93\001\002\000\004\132\340\001\002\000\004\104\341" +
    "\001\002\000\006\104\uff72\105\uff72\001\002\000\004\105" +
    "\353\001\002\000\012\014\346\022\065\051\347\105\uffc3" +
    "\001\002\000\004\105\345\001\002\000\064\004\uffb9\007" +
    "\uffb9\012\uffb9\013\uffb9\024\uffb9\027\uffb9\033\uffb9\034\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\052\uffb9\054\uffb9\060" +
    "\uffb9\061\uffb9\106\uffb9\112\uffb9\113\uffb9\114\uffb9\116\uffb9" +
    "\120\uffb9\122\uffb9\125\uffb9\130\uffb9\001\002\000\004\047" +
    "\351\001\002\000\004\047\350\001\002\000\004\105\uffc4" +
    "\001\002\000\010\014\346\051\347\105\uffc3\001\002\000" +
    "\004\105\uffc5\001\002\000\064\004\uffd8\007\uffd8\012\uffd8" +
    "\013\uffd8\024\uffd8\027\uffd8\033\uffd8\034\uffd8\045\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\052\uffd8\054\uffd8\060\uffd8\061\uffd8" +
    "\106\uffd8\112\uffd8\113\uffd8\114\uffd8\116\uffd8\120\uffd8\122" +
    "\uffd8\125\uffd8\130\uffd8\001\002\000\004\047\056\001\002" +
    "\000\004\104\356\001\002\000\004\057\357\001\002\000" +
    "\004\011\360\001\002\000\010\047\056\077\u010a\132\u010c" +
    "\001\002\000\010\011\364\025\363\060\362\001\002\000" +
    "\064\004\uff5d\007\uff5d\012\uff5d\013\uff5d\024\uff5d\027\uff5d" +
    "\033\uff5d\034\uff5d\045\uff5d\046\uff5d\047\uff5d\050\uff5d\052" +
    "\uff5d\054\uff5d\060\uff5d\061\uff5d\106\uff5d\112\uff5d\113\uff5d" +
    "\114\uff5d\116\uff5d\120\uff5d\122\uff5d\125\uff5d\130\uff5d\001" +
    "\002\000\004\037\u0104\001\002\000\010\047\056\077\365" +
    "\132\367\001\002\000\004\037\u0100\001\002\000\004\037" +
    "\374\001\002\000\004\037\370\001\002\000\060\004\060" +
    "\012\043\013\057\024\026\027\024\033\045\034\016\045" +
    "\036\046\037\047\056\050\022\052\034\054\015\061\030" +
    "\106\040\112\032\113\053\114\052\116\044\120\061\122" +
    "\041\125\020\130\033\001\002\000\062\004\060\007\372" +
    "\012\043\013\057\024\026\027\024\033\045\034\016\045" +
    "\036\046\037\047\056\050\022\052\034\054\015\061\030" +
    "\106\040\112\032\113\053\114\052\116\044\120\061\122" +
    "\041\125\020\130\033\001\002\000\004\105\373\001\002" +
    "\000\010\011\uff60\025\uff60\060\uff60\001\002\000\060\004" +
    "\060\012\043\013\057\024\026\027\024\033\045\034\016" +
    "\045\036\046\037\047\056\050\022\052\034\054\015\061" +
    "\030\106\040\112\032\113\053\114\052\116\044\120\061" +
    "\122\041\125\020\130\033\001\002\000\062\004\060\007" +
    "\376\012\043\013\057\024\026\027\024\033\045\034\016" +
    "\045\036\046\037\047\056\050\022\052\034\054\015\061" +
    "\030\106\040\112\032\113\053\114\052\116\044\120\061" +
    "\122\041\125\020\130\033\001\002\000\004\105\377\001" +
    "\002\000\010\011\uff61\025\uff61\060\uff61\001\002\000\060" +
    "\004\060\012\043\013\057\024\026\027\024\033\045\034" +
    "\016\045\036\046\037\047\056\050\022\052\034\054\015" +
    "\061\030\106\040\112\032\113\053\114\052\116\044\120" +
    "\061\122\041\125\020\130\033\001\002\000\062\004\060" +
    "\007\u0102\012\043\013\057\024\026\027\024\033\045\034" +
    "\016\045\036\046\037\047\056\050\022\052\034\054\015" +
    "\061\030\106\040\112\032\113\053\114\052\116\044\120" +
    "\061\122\041\125\020\130\033\001\002\000\004\105\u0103" +
    "\001\002\000\010\011\uff62\025\uff62\060\uff62\001\002\000" +
    "\060\004\060\012\043\013\057\024\026\027\024\033\045" +
    "\034\016\045\036\046\037\047\056\050\022\052\034\054" +
    "\015\061\030\106\040\112\032\113\053\114\052\116\044" +
    "\120\061\122\041\125\020\130\033\001\002\000\064\004" +
    "\060\007\u0107\012\043\013\057\024\026\027\024\033\045" +
    "\034\016\045\036\046\037\047\056\050\022\052\034\054" +
    "\015\060\u0106\061\030\106\040\112\032\113\053\114\052" +
    "\116\044\120\061\122\041\125\020\130\033\001\002\000" +
    "\064\004\uff5e\007\uff5e\012\uff5e\013\uff5e\024\uff5e\027\uff5e" +
    "\033\uff5e\034\uff5e\045\uff5e\046\uff5e\047\uff5e\050\uff5e\052" +
    "\uff5e\054\uff5e\060\uff5e\061\uff5e\106\uff5e\112\uff5e\113\uff5e" +
    "\114\uff5e\116\uff5e\120\uff5e\122\uff5e\125\uff5e\130\uff5e\001" +
    "\002\000\004\105\u0108\001\002\000\004\060\u0109\001\002" +
    "\000\064\004\uff5f\007\uff5f\012\uff5f\013\uff5f\024\uff5f\027" +
    "\uff5f\033\uff5f\034\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f" +
    "\052\uff5f\054\uff5f\060\uff5f\061\uff5f\106\uff5f\112\uff5f\113" +
    "\uff5f\114\uff5f\116\uff5f\120\uff5f\122\uff5f\125\uff5f\130\uff5f" +
    "\001\002\000\004\037\u0115\001\002\000\004\037\u0111\001" +
    "\002\000\004\037\u010d\001\002\000\060\004\060\012\043" +
    "\013\057\024\026\027\024\033\045\034\016\045\036\046" +
    "\037\047\056\050\022\052\034\054\015\061\030\106\040" +
    "\112\032\113\053\114\052\116\044\120\061\122\041\125" +
    "\020\130\033\001\002\000\062\004\060\007\u010f\012\043" +
    "\013\057\024\026\027\024\033\045\034\016\045\036\046" +
    "\037\047\056\050\022\052\034\054\015\061\030\106\040" +
    "\112\032\113\053\114\052\116\044\120\061\122\041\125" +
    "\020\130\033\001\002\000\004\105\u0110\001\002\000\010" +
    "\011\uff64\025\uff64\060\uff64\001\002\000\060\004\060\012" +
    "\043\013\057\024\026\027\024\033\045\034\016\045\036" +
    "\046\037\047\056\050\022\052\034\054\015\061\030\106" +
    "\040\112\032\113\053\114\052\116\044\120\061\122\041" +
    "\125\020\130\033\001\002\000\062\004\060\007\u0113\012" +
    "\043\013\057\024\026\027\024\033\045\034\016\045\036" +
    "\046\037\047\056\050\022\052\034\054\015\061\030\106" +
    "\040\112\032\113\053\114\052\116\044\120\061\122\041" +
    "\125\020\130\033\001\002\000\004\105\u0114\001\002\000" +
    "\010\011\uff63\025\uff63\060\uff63\001\002\000\060\004\060" +
    "\012\043\013\057\024\026\027\024\033\045\034\016\045" +
    "\036\046\037\047\056\050\022\052\034\054\015\061\030" +
    "\106\040\112\032\113\053\114\052\116\044\120\061\122" +
    "\041\125\020\130\033\001\002\000\062\004\060\007\u0117" +
    "\012\043\013\057\024\026\027\024\033\045\034\016\045" +
    "\036\046\037\047\056\050\022\052\034\054\015\061\030" +
    "\106\040\112\032\113\053\114\052\116\044\120\061\122" +
    "\041\125\020\130\033\001\002\000\004\105\u0118\001\002" +
    "\000\010\011\uff65\025\uff65\060\uff65\001\002\000\004\132" +
    "\u011a\001\002\000\006\014\u011c\104\u011b\001\002\000\004" +
    "\105\u0123\001\002\000\004\047\u011d\001\002\000\006\014" +
    "\u0121\104\uff5a\001\002\000\004\104\u011f\001\002\000\004" +
    "\105\u0120\001\002\000\064\004\uff5c\007\uff5c\012\uff5c\013" +
    "\uff5c\024\uff5c\027\uff5c\033\uff5c\034\uff5c\045\uff5c\046\uff5c" +
    "\047\uff5c\050\uff5c\052\uff5c\054\uff5c\060\uff5c\061\uff5c\106" +
    "\uff5c\112\uff5c\113\uff5c\114\uff5c\116\uff5c\120\uff5c\122\uff5c" +
    "\125\uff5c\130\uff5c\001\002\000\004\047\u011d\001\002\000" +
    "\004\104\uff59\001\002\000\064\004\uff5b\007\uff5b\012\uff5b" +
    "\013\uff5b\024\uff5b\027\uff5b\033\uff5b\034\uff5b\045\uff5b\046" +
    "\uff5b\047\uff5b\050\uff5b\052\uff5b\054\uff5b\060\uff5b\061\uff5b" +
    "\106\uff5b\112\uff5b\113\uff5b\114\uff5b\116\uff5b\120\uff5b\122" +
    "\uff5b\125\uff5b\130\uff5b\001\002\000\006\047\056\052\u0127" +
    "\001\002\000\004\105\u012e\001\002\000\006\051\u012c\105" +
    "\uff8c\001\002\000\004\047\056\001\002\000\004\051\u0129" +
    "\001\002\000\006\047\056\077\u012a\001\002\000\004\105" +
    "\uff8d\001\002\000\004\105\uff8a\001\002\000\004\077\u012d" +
    "\001\002\000\004\105\uff8b\001\002\000\020\044\257\047" +
    "\056\076\254\077\263\103\260\124\261\132\255\001\002" +
    "\000\004\105\u0130\001\002\000\014\027\024\047\056\054" +
    "\015\112\032\116\044\001\002\000\004\104\u0132\001\002" +
    "\000\004\057\u0133\001\002\000\060\004\060\012\043\013" +
    "\057\024\026\027\024\033\045\034\016\045\036\046\037" +
    "\047\056\050\022\052\034\054\015\061\030\106\040\112" +
    "\032\113\053\114\052\116\044\120\061\122\041\125\020" +
    "\130\033\001\002\000\062\004\060\012\043\013\057\024" +
    "\026\027\024\033\045\034\016\045\036\046\037\047\056" +
    "\050\022\052\034\054\015\060\u0135\061\030\106\040\112" +
    "\032\113\053\114\052\116\044\120\061\122\041\125\020" +
    "\130\033\001\002\000\064\004\uff71\007\uff71\012\uff71\013" +
    "\uff71\024\uff71\027\uff71\033\uff71\034\uff71\045\uff71\046\uff71" +
    "\047\uff71\050\uff71\052\uff71\054\uff71\060\uff71\061\uff71\106" +
    "\uff71\112\uff71\113\uff71\114\uff71\116\uff71\120\uff71\122\uff71" +
    "\125\uff71\130\uff71\001\002\000\004\105\u013c\001\002\000" +
    "\004\051\u0138\001\002\000\004\100\u0139\001\002\000\006" +
    "\014\u013a\105\uffcf\001\002\000\004\047\u0137\001\002\000" +
    "\004\105\uffce\001\002\000\064\004\uffba\007\uffba\012\uffba" +
    "\013\uffba\024\uffba\027\uffba\033\uffba\034\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\052\uffba\054\uffba\060\uffba\061\uffba" +
    "\106\uffba\112\uffba\113\uffba\114\uffba\116\uffba\120\uffba\122" +
    "\uffba\125\uffba\130\uffba\001\002\000\004\105\u0141\001\002" +
    "\000\004\105\u0140\001\002\000\006\022\065\051\166\001" +
    "\002\000\064\004\uffc2\007\uffc2\012\uffc2\013\uffc2\024\uffc2" +
    "\027\uffc2\033\uffc2\034\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\052\uffc2\054\uffc2\060\uffc2\061\uffc2\106\uffc2\112\uffc2" +
    "\113\uffc2\114\uffc2\116\uffc2\120\uffc2\122\uffc2\125\uffc2\130" +
    "\uffc2\001\002\000\064\004\uffda\007\uffda\012\uffda\013\uffda" +
    "\024\uffda\027\uffda\033\uffda\034\uffda\045\uffda\046\uffda\047" +
    "\uffda\050\uffda\052\uffda\054\uffda\060\uffda\061\uffda\106\uffda" +
    "\112\uffda\113\uffda\114\uffda\116\uffda\120\uffda\122\uffda\125" +
    "\uffda\130\uffda\001\002\000\020\044\257\047\056\076\254" +
    "\077\263\103\260\124\261\132\255\001\002\000\004\104" +
    "\u0144\001\002\000\004\057\u0145\001\002\000\060\004\060" +
    "\012\043\013\057\024\026\027\024\033\045\034\016\045" +
    "\036\046\037\047\056\050\022\052\034\054\015\061\030" +
    "\106\040\112\032\113\053\114\052\116\044\120\061\122" +
    "\041\125\020\130\033\001\002\000\062\004\060\012\043" +
    "\013\057\024\026\027\024\033\045\034\016\045\036\046" +
    "\037\047\056\050\022\052\034\054\015\060\u0147\061\030" +
    "\106\040\112\032\113\053\114\052\116\044\120\061\122" +
    "\041\125\020\130\033\001\002\000\064\004\uff70\007\uff70" +
    "\012\uff70\013\uff70\024\uff70\027\uff70\033\uff70\034\uff70\045" +
    "\uff70\046\uff70\047\uff70\050\uff70\052\uff70\054\uff70\060\uff70" +
    "\061\uff70\106\uff70\112\uff70\113\uff70\114\uff70\116\uff70\120" +
    "\uff70\122\uff70\125\uff70\130\uff70\001\002\000\006\104\uff87" +
    "\105\uff87\001\002\000\064\004\uffe9\007\uffe9\012\uffe9\013" +
    "\uffe9\024\uffe9\027\uffe9\033\uffe9\034\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\050\uffe9\052\uffe9\054\uffe9\060\uffe9\061\uffe9\106" +
    "\uffe9\112\uffe9\113\uffe9\114\uffe9\116\uffe9\120\uffe9\122\uffe9" +
    "\125\uffe9\130\uffe9\001\002\000\004\047\u0137\001\002\000" +
    "\004\047\165\001\002\000\004\105\u014d\001\002\000\064" +
    "\004\uffbe\007\uffbe\012\uffbe\013\uffbe\024\uffbe\027\uffbe\033" +
    "\uffbe\034\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\052\uffbe" +
    "\054\uffbe\060\uffbe\061\uffbe\106\uffbe\112\uffbe\113\uffbe\114" +
    "\uffbe\116\uffbe\120\uffbe\122\uffbe\125\uffbe\130\uffbe\001\002" +
    "\000\004\105\u014f\001\002\000\064\004\uffbb\007\uffbb\012" +
    "\uffbb\013\uffbb\024\uffbb\027\uffbb\033\uffbb\034\uffbb\045\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\052\uffbb\054\uffbb\060\uffbb\061" +
    "\uffbb\106\uffbb\112\uffbb\113\uffbb\114\uffbb\116\uffbb\120\uffbb" +
    "\122\uffbb\125\uffbb\130\uffbb\001\002\000\010\041\u0152\047" +
    "\056\132\u0154\001\002\000\004\105\u0159\001\002\000\004" +
    "\105\uff69\001\002\000\006\036\u0157\105\uff6d\001\002\000" +
    "\006\036\u0155\105\uff6c\001\002\000\010\041\u0152\047\056" +
    "\132\u0154\001\002\000\004\105\uff6b\001\002\000\010\041" +
    "\u0152\047\056\132\u0154\001\002\000\004\105\uff6a\001\002" +
    "\000\064\004\uff6e\007\uff6e\012\uff6e\013\uff6e\024\uff6e\027" +
    "\uff6e\033\uff6e\034\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e" +
    "\052\uff6e\054\uff6e\060\uff6e\061\uff6e\106\uff6e\112\uff6e\113" +
    "\uff6e\114\uff6e\116\uff6e\120\uff6e\122\uff6e\125\uff6e\130\uff6e" +
    "\001\002\000\006\104\uff85\105\uff85\001\002\000\004\002" +
    "\ufff6\001\002\000\020\044\257\047\056\076\254\077\263" +
    "\103\260\124\261\132\255\001\002\000\004\104\u015e\001" +
    "\002\000\004\057\u015f\001\002\000\060\004\060\012\043" +
    "\013\057\024\026\027\024\033\045\034\016\045\036\046" +
    "\037\047\056\050\022\052\034\054\015\061\030\106\040" +
    "\112\032\113\053\114\052\116\044\120\061\122\041\125" +
    "\020\130\033\001\002\000\062\004\060\012\043\013\057" +
    "\024\026\027\024\033\045\034\016\045\036\046\037\047" +
    "\056\050\022\052\034\054\015\060\u0161\061\030\106\040" +
    "\112\032\113\053\114\052\116\044\120\061\122\041\125" +
    "\020\130\033\001\002\000\066\004\uff90\007\uff90\012\uff90" +
    "\013\uff90\024\uff90\027\uff90\033\uff90\034\uff90\040\u0162\045" +
    "\uff90\046\uff90\047\uff90\050\uff90\052\uff90\054\uff90\060\uff90" +
    "\061\uff90\106\uff90\112\uff90\113\uff90\114\uff90\116\uff90\120" +
    "\uff90\122\uff90\125\uff90\130\uff90\001\002\000\006\050\022" +
    "\057\u0163\001\002\000\060\004\060\012\043\013\057\024" +
    "\026\027\024\033\045\034\016\045\036\046\037\047\056" +
    "\050\022\052\034\054\015\061\030\106\040\112\032\113" +
    "\053\114\052\116\044\120\061\122\041\125\020\130\033" +
    "\001\002\000\064\004\uff8e\007\uff8e\012\uff8e\013\uff8e\024" +
    "\uff8e\027\uff8e\033\uff8e\034\uff8e\045\uff8e\046\uff8e\047\uff8e" +
    "\050\uff8e\052\uff8e\054\uff8e\060\uff8e\061\uff8e\106\uff8e\112" +
    "\uff8e\113\uff8e\114\uff8e\116\uff8e\120\uff8e\122\uff8e\125\uff8e" +
    "\130\uff8e\001\002\000\062\004\060\012\043\013\057\024" +
    "\026\027\024\033\045\034\016\045\036\046\037\047\056" +
    "\050\022\052\034\054\015\060\u0166\061\030\106\040\112" +
    "\032\113\053\114\052\116\044\120\061\122\041\125\020" +
    "\130\033\001\002\000\064\004\uff8f\007\uff8f\012\uff8f\013" +
    "\uff8f\024\uff8f\027\uff8f\033\uff8f\034\uff8f\045\uff8f\046\uff8f" +
    "\047\uff8f\050\uff8f\052\uff8f\054\uff8f\060\uff8f\061\uff8f\106" +
    "\uff8f\112\uff8f\113\uff8f\114\uff8f\116\uff8f\120\uff8f\122\uff8f" +
    "\125\uff8f\130\uff8f\001\002\000\004\047\351\001\002\000" +
    "\004\052\u0170\001\002\000\004\052\u016d\001\002\000\004" +
    "\047\165\001\002\000\004\105\u016c\001\002\000\064\004" +
    "\uffc1\007\uffc1\012\uffc1\013\uffc1\024\uffc1\027\uffc1\033\uffc1" +
    "\034\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\052\uffc1\054" +
    "\uffc1\060\uffc1\061\uffc1\106\uffc1\112\uffc1\113\uffc1\114\uffc1" +
    "\116\uffc1\120\uffc1\122\uffc1\125\uffc1\130\uffc1\001\002\000" +
    "\004\047\165\001\002\000\004\105\u016f\001\002\000\064" +
    "\004\uffbf\007\uffbf\012\uffbf\013\uffbf\024\uffbf\027\uffbf\033" +
    "\uffbf\034\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\052\uffbf" +
    "\054\uffbf\060\uffbf\061\uffbf\106\uffbf\112\uffbf\113\uffbf\114" +
    "\uffbf\116\uffbf\120\uffbf\122\uffbf\125\uffbf\130\uffbf\001\002" +
    "\000\004\047\165\001\002\000\004\105\u0172\001\002\000" +
    "\064\004\uffbd\007\uffbd\012\uffbd\013\uffbd\024\uffbd\027\uffbd" +
    "\033\uffbd\034\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\052" +
    "\uffbd\054\uffbd\060\uffbd\061\uffbd\106\uffbd\112\uffbd\113\uffbd" +
    "\114\uffbd\116\uffbd\120\uffbd\122\uffbd\125\uffbd\130\uffbd\001" +
    "\002\000\004\105\u0174\001\002\000\064\004\uffb8\007\uffb8" +
    "\012\uffb8\013\uffb8\024\uffb8\027\uffb8\033\uffb8\034\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\052\uffb8\054\uffb8\060\uffb8" +
    "\061\uffb8\106\uffb8\112\uffb8\113\uffb8\114\uffb8\116\uffb8\120" +
    "\uffb8\122\uffb8\125\uffb8\130\uffb8\001\002\000\004\105\u0176" +
    "\001\002\000\064\004\uffbc\007\uffbc\012\uffbc\013\uffbc\024" +
    "\uffbc\027\uffbc\033\uffbc\034\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\052\uffbc\054\uffbc\060\uffbc\061\uffbc\106\uffbc\112" +
    "\uffbc\113\uffbc\114\uffbc\116\uffbc\120\uffbc\122\uffbc\125\uffbc" +
    "\130\uffbc\001\002\000\006\104\uff86\105\uff86\001\002\000" +
    "\004\002\001\001\002\000\006\066\u017a\132\u017b\001\002" +
    "\000\006\047\u017c\055\u017d\001\002\000\010\052\uffff\101" +
    "\uffff\126\uffff\001\002\000\006\065\u017f\107\u0180\001\002" +
    "\000\004\065\u017e\001\002\000\010\052\ufffd\101\ufffd\126" +
    "\ufffd\001\002\000\010\052\ufffe\101\ufffe\126\ufffe\001\002" +
    "\000\004\047\u0181\001\002\000\004\065\u0182\001\002\000" +
    "\010\052\000\101\000\126\000\001\002\000\004\104\u0184" +
    "\001\002\000\004\057\u0185\001\002\000\060\004\060\012" +
    "\043\013\057\024\026\027\024\033\045\034\016\045\036" +
    "\046\037\047\056\050\022\052\034\054\015\061\030\106" +
    "\040\112\032\113\053\114\052\116\044\120\061\122\041" +
    "\125\020\130\033\001\002\000\062\004\060\012\043\013" +
    "\057\024\026\027\024\033\045\034\016\045\036\046\037" +
    "\047\056\050\022\052\034\054\015\060\u0187\061\030\106" +
    "\040\112\032\113\053\114\052\116\044\120\061\122\041" +
    "\125\020\130\033\001\002\000\004\002\ufff5\001\002\000" +
    "\004\075\u019b\001\002\000\004\053\u0191\001\002\000\004" +
    "\062\u018b\001\002\000\004\103\u018c\001\002\000\004\104" +
    "\u018d\001\002\000\004\057\u018e\001\002\000\060\004\060" +
    "\012\043\013\057\024\026\027\024\033\045\034\016\045" +
    "\036\046\037\047\056\050\022\052\034\054\015\061\030" +
    "\106\040\112\032\113\053\114\052\116\044\120\061\122" +
    "\041\125\020\130\033\001\002\000\062\004\060\012\043" +
    "\013\057\024\026\027\024\033\045\034\016\045\036\046" +
    "\037\047\056\050\022\052\034\054\015\060\u0190\061\030" +
    "\106\040\112\032\113\053\114\052\116\044\120\061\122" +
    "\041\125\020\130\033\001\002\000\004\002\ufff7\001\002" +
    "\000\006\066\u0192\132\u0193\001\002\000\006\047\u0194\055" +
    "\u0195\001\002\000\010\052\ufffb\101\ufffb\126\ufffb\001\002" +
    "\000\006\065\u0197\107\u0198\001\002\000\004\065\u0196\001" +
    "\002\000\010\052\ufff9\101\ufff9\126\ufff9\001\002\000\010" +
    "\052\ufffa\101\ufffa\126\ufffa\001\002\000\004\047\u0199\001" +
    "\002\000\004\065\u019a\001\002\000\010\052\ufffc\101\ufffc" +
    "\126\ufffc\001\002\000\004\117\u019c\001\002\000\004\105" +
    "\u019d\001\002\000\004\052\u019e\001\002\000\004\062\u019f" +
    "\001\002\000\004\103\u01a0\001\002\000\004\104\u01a1\001" +
    "\002\000\004\057\u01a2\001\002\000\060\004\060\012\043" +
    "\013\057\024\026\027\024\033\045\034\016\045\036\046" +
    "\037\047\056\050\022\052\034\054\015\061\030\106\040" +
    "\112\032\113\053\114\052\116\044\120\061\122\041\125" +
    "\020\130\033\001\002\000\062\004\060\012\043\013\057" +
    "\024\026\027\024\033\045\034\016\045\036\046\037\047" +
    "\056\050\022\052\034\054\015\060\u01a4\061\030\106\040" +
    "\112\032\113\053\114\052\116\044\120\061\122\041\125" +
    "\020\130\033\001\002\000\004\002\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a2\000\006\002\006\014\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\022\004\050\005\034\006\024" +
    "\017\030\020\054\021\026\023\053\025\041\030\046\032" +
    "\020\040\047\041\045\042\016\001\001\000\004\040\u0176" +
    "\001\001\000\004\034\u0174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\244\005\240\006\235\017\237\020\246\021\236\023" +
    "\245\025\241\030\243\032\020\040\047\041\242\042\234" +
    "\001\001\000\004\040\u0159\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\u013d\037\u013c\001\001\000\002\001\001\000\004\034\u0135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\343\037\341\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\124" +
    "\001\001\000\006\035\062\037\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\106\001\001\000\002" +
    "\001\001\000\004\031\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\121\001\001\000\002\001\001" +
    "\000\004\031\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\132\001\001\000\002\001" +
    "\001\000\004\036\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\140\040\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\143" +
    "\040\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\230" +
    "\001\001\000\004\040\226\001\001\000\002\001\001\000" +
    "\004\040\224\001\001\000\002\001\001\000\004\040\222" +
    "\001\001\000\004\040\220\001\001\000\004\040\203\001" +
    "\001\000\004\022\214\001\001\000\004\022\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\232\004\050\005\034\006\024\017\030\020\054\021\026" +
    "\023\053\025\041\030\046\032\020\040\047\041\045\042" +
    "\016\001\001\000\034\004\244\005\240\006\235\017\237" +
    "\020\246\021\236\023\245\025\241\030\243\032\020\040" +
    "\047\041\242\042\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\252\011\263\015\255\040\261\001\001\000\002\001" +
    "\001\000\006\011\323\040\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\315\011" +
    "\316\040\261\001\001\000\002\001\001\000\004\022\312" +
    "\001\001\000\004\022\307\001\001\000\004\012\264\001" +
    "\001\000\006\011\303\040\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\252\011\263\015\300\040" +
    "\261\001\001\000\002\001\001\000\012\010\252\011\263" +
    "\015\277\040\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\306\040" +
    "\261\001\001\000\006\011\304\040\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\311\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\330\011\316\040\261\001\001\000\004\012\324" +
    "\001\001\000\006\011\326\040\261\001\001\000\006\011" +
    "\327\040\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\252\011" +
    "\263\015\335\040\261\001\001\000\012\010\252\011\263" +
    "\015\334\040\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\351\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\354\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\360\001\001\000\004\040" +
    "\u010a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\365\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\370\004\050" +
    "\005\034\006\024\017\030\020\054\021\026\023\053\025" +
    "\041\030\046\032\020\040\047\041\045\042\016\001\001" +
    "\000\034\004\244\005\240\006\235\017\237\020\246\021" +
    "\236\023\245\025\241\030\243\032\020\040\047\041\242" +
    "\042\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\374\004\050\005\034\006\024\017\030\020\054" +
    "\021\026\023\053\025\041\030\046\032\020\040\047\041" +
    "\045\042\016\001\001\000\034\004\244\005\240\006\235" +
    "\017\237\020\246\021\236\023\245\025\241\030\243\032" +
    "\020\040\047\041\242\042\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\u0100\004\050\005\034\006" +
    "\024\017\030\020\054\021\026\023\053\025\041\030\046" +
    "\032\020\040\047\041\045\042\016\001\001\000\034\004" +
    "\244\005\240\006\235\017\237\020\246\021\236\023\245" +
    "\025\241\030\243\032\020\040\047\041\242\042\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\u0104" +
    "\004\050\005\034\006\024\017\030\020\054\021\026\023" +
    "\053\025\041\030\046\032\020\040\047\041\045\042\016" +
    "\001\001\000\034\004\244\005\240\006\235\017\237\020" +
    "\246\021\236\023\245\025\241\030\243\032\020\040\047" +
    "\041\242\042\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\u010d\004" +
    "\050\005\034\006\024\017\030\020\054\021\026\023\053" +
    "\025\041\030\046\032\020\040\047\041\045\042\016\001" +
    "\001\000\034\004\244\005\240\006\235\017\237\020\246" +
    "\021\236\023\245\025\241\030\243\032\020\040\047\041" +
    "\242\042\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\u0111\004\050\005\034\006\024\017\030\020" +
    "\054\021\026\023\053\025\041\030\046\032\020\040\047" +
    "\041\045\042\016\001\001\000\034\004\244\005\240\006" +
    "\235\017\237\020\246\021\236\023\245\025\241\030\243" +
    "\032\020\040\047\041\242\042\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\u0115\004\050\005\034" +
    "\006\024\017\030\020\054\021\026\023\053\025\041\030" +
    "\046\032\020\040\047\041\045\042\016\001\001\000\034" +
    "\004\244\005\240\006\235\017\237\020\246\021\236\023" +
    "\245\025\241\030\243\032\020\040\047\041\242\042\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\u011d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\u0121\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\u0124\040\u0125\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u0127" +
    "\001\001\000\002\001\001\000\004\040\u012a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\252\011\263\015\u012e\040\261\001" +
    "\001\000\002\001\001\000\006\017\u0130\040\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\u0133\004" +
    "\050\005\034\006\024\017\030\020\054\021\026\023\053" +
    "\025\041\030\046\032\020\040\047\041\045\042\016\001" +
    "\001\000\034\004\244\005\240\006\235\017\237\020\246" +
    "\021\236\023\245\025\241\030\243\032\020\040\047\041" +
    "\242\042\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\u013a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\252\011\263" +
    "\015\u0142\040\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\u0145\004\050\005\034\006\024\017\030" +
    "\020\054\021\026\023\053\025\041\030\046\032\020\040" +
    "\047\041\045\042\016\001\001\000\034\004\244\005\240" +
    "\006\235\017\237\020\246\021\236\023\245\025\241\030" +
    "\243\032\020\040\047\041\242\042\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\u014d\001\001\000\004\033\u014b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\u0150\040\u0152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\u0155\040\u0152\001\001\000\002\001\001\000\006\024\u0157" +
    "\040\u0152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\252\011\263" +
    "\015\u015c\040\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\u015f\004\050\005\034\006\024\017\030" +
    "\020\054\021\026\023\053\025\041\030\046\032\020\040" +
    "\047\041\045\042\016\001\001\000\034\004\244\005\240" +
    "\006\235\017\237\020\246\021\236\023\245\025\241\030" +
    "\243\032\020\040\047\041\242\042\234\001\001\000\002" +
    "\001\001\000\004\005\u0163\001\001\000\036\003\u0164\004" +
    "\050\005\034\006\024\017\030\020\054\021\026\023\053" +
    "\025\041\030\046\032\020\040\047\041\045\042\016\001" +
    "\001\000\002\001\001\000\034\004\244\005\240\006\235" +
    "\017\237\020\246\021\236\023\245\025\241\030\243\032" +
    "\020\040\047\041\242\042\234\001\001\000\002\001\001" +
    "\000\004\013\u0172\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\u016a\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\u016d\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u0170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\u0185\004\050\005\034\006\024\017\030\020\054\021" +
    "\026\023\053\025\041\030\046\032\020\040\047\041\045" +
    "\042\016\001\001\000\034\004\244\005\240\006\235\017" +
    "\237\020\246\021\236\023\245\025\241\030\243\032\020" +
    "\040\047\041\242\042\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\u018e\004\050\005\034\006\024\017\030\020\054\021\026" +
    "\023\053\025\041\030\046\032\020\040\047\041\045\042" +
    "\016\001\001\000\034\004\244\005\240\006\235\017\237" +
    "\020\246\021\236\023\245\025\241\030\243\032\020\040" +
    "\047\041\242\042\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\u01a2\004\050\005\034\006\024\017\030" +
    "\020\054\021\026\023\053\025\041\030\046\032\020\040" +
    "\047\041\045\042\016\001\001\000\034\004\244\005\240" +
    "\006\235\017\237\020\246\021\236\023\245\025\241\030" +
    "\243\032\020\040\047\041\242\042\234\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    //Metodo al que se llama automaticamente para algun error
    public void syntax_error(Symbol s){ 
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

/*
//Metodo al que se llama en el momento en que ya no es posible recuperacion de errores
public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception
{
   String lexema=s.value.toString();
   int fila=s.right;
   int columna=s.left;
   System.out.println(" !!! Error Sintactico  !!!!");
   System.out.println("\t\t Lexema : " +lexema);
   System.out.println("\t\t Fila : " +fila);
   System.out.println("\t\t Columna : " +columna);
}
*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {


        ArrayList<String> listadeId = new ArrayList();
        String tipo="",tipoaux="";
        int nparametros;
        Boolean bandera=false;
        Boolean banderaasig=false;

  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SCANF ::= Scanf Parent_a STRING_LITERAL Coma BitAnd Identificador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // COMPLEMENTO ::= Identificador Coma COMPLEMENTO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COMPLEMENTO",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // COMPLEMENTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COMPLEMENTO",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // PRINTF ::= Printf Parent_a STRING_LITERAL Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // PRINTF ::= Printf Parent_a STRING_LITERAL Coma COMPLEMENTO Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Default DosPuntos SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Default DosPuntos SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CASE ::= CASE Case STRING_LITERAL DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CASE ::= CASE Case IDENTIFICADORES DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CASE ::= CASE Case Numero DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CASE ::= Case IDENTIFICADORES DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CASE ::= Case STRING_LITERAL DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CASE ::= Case Numero DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CIN ::= Cin DobleMayor ENTRADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ENTRADA ::= IDENTIFICADORES DobleMayor ENTRADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ENTRADA",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ENTRADA ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ENTRADA",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SALIDA ::= Endl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SALIDA ::= IDENTIFICADORES DobleMenor SALIDA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SALIDA ::= STRING_LITERAL DobleMenor SALIDA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SALIDA ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SALIDA ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // COUT ::= Cout DobleMenor SALIDA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // FOR ::= For Parent_a FOR_PARTE_UNO P_coma SENTENCIA_BOOLEANA_ANIDADA P_coma OPERACIONES_COMPLEMENTARIAS Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OPERACIONES_COMPLEMENTARIAS ::= _System Parent_a STRING_LITERAL Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES ModuloIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES DivisionIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MultiplicacionIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MenosIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MasIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES ModuloIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES DivisionIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MultiplicacionIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MenosIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MasIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Decremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPERACIONES_COMPLEMENTARIAS ::= Decremento IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPERACIONES_COMPLEMENTARIAS ::= Incremento IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPERACIONES_COMPLEMENTARIAS ::= Return Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // IDENTIFICADORES ::= Identificador Corchete_a Numero Corchete_c Identificador Corchete_a Identificador Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FOR_PARTE_UNO ::= Int IDENTIFICADORES Igual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FOR_PARTE_UNO ::= IDENTIFICADORES Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FOR_PARTE_UNO ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FOR_PARTE_UNO ::= Int IDENTIFICADORES Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE O_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE Y_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA O_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA Y_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA_BOOLEANA_COMPUESTA ::= Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_BOOLEANA_SIMPLE ::= Parent_a SENTENCIA_BOOLEANA_SIMPLE Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_BOOLEANA_SIMPLE ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_BOOLEANA_SIMPLE ::= False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_BOOLEANA_SIMPLE ::= True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERADORES_RELACIONALES ::= MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERADORES_RELACIONALES ::= MenorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OPERADORES_RELACIONALES ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPERADORES_RELACIONALES ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERADORES_RELACIONALES ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERADORES_RELACIONALES ::= ComparadorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERADORES_RELACIONALES ::= BitAnd 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERADORES_RELACIONALES ::= BitOr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERADORES_ARITMETICOS ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERADORES_ARITMETICOS ::= Division 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERADORES_ARITMETICOS ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERADORES_ARITMETICOS ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERADORES_ARITMETICOS ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= DECLARACION_ARREGLO_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= Bool DECLARACION_BOOLEANA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= _String DECLARACION_STRING P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= Unsigned Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= Float DECLARACION_FLOTANTE P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= Long Double DECLARACION_FLOTANTE P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= Double DECLARACION_FLOTANTE P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= Unsigned Long Int DECLARACION_ENTERO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Long Int DECLARACION_ENTERO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= Unsigned Short Int DECLARACION_ENTERO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Short Int DECLARACION_ENTERO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Unsigned Int DECLARACION_ENTERO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Int DECLARACION_ENTERO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION_ANIDADA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION_ANIDADA ::= Identificador Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION_ANIDADA ::= Identificador Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_BOOLEANA ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEANA",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_BOOLEANA ::= Identificador Igual False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEANA",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_BOOLEANA ::= Identificador Igual True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEANA",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_BOOLEANA ::= Identificador Igual False Coma DECLARACION_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEANA",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_BOOLEANA ::= Identificador Igual True Coma DECLARACION_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEANA",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_STRING ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRING",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_STRING ::= Identificador Igual STRING_LITERAL Coma DECLARACION_STRING 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRING",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_STRING ::= Identificador Igual STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRING",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_FLOTANTE ::= Identificador Igual NumeroDecimal Coma DECLARACION_FLOTANTE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOTANTE",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_FLOTANTE ::= Identificador Igual NumeroDecimal 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOTANTE",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_ENTERO ::= Identificador Igual Numero Coma DECLARACION_ENTERO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTERO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_ENTERO ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTERO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_ARREGLO ::= Identificador Corchete_a Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_ARREGLO ::= Identificador Corchete_a Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_ARREGLO_ANIDADA ::= Char DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_ARREGLO_ANIDADA ::= _String DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_ARREGLO_ANIDADA ::= Int DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CREACION_ARREGLO ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CREACION_ARREGLO ::= STRING_LITERAL Coma CREACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CREACION_ARREGLO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CREACION_ARREGLO ::= Numero Coma CREACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= OPERACIONES_COMPLEMENTARIAS P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA OPERACIONES_COMPLEMENTARIAS P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= IMPORTACION Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= IMPORTACION Using Namespace Std P_coma Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Iostream MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTACION ::= IMPORTACION Numeral Include STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTACION ::= Numeral Include MenorQue Iostream MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACION ::= Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTACION ::= Numeral Include STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // IMPORTACION ::= Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

