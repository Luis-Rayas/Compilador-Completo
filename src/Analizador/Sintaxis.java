
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 13 16:42:59 CST 2022
//----------------------------------------------------

package Analizador;

import java.io.*;
import java.util.*;
import java_cup.runtime.*;
import javax.xml.stream.*;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import java.util.ArrayList;
import Analizador.Lexico;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 13 16:42:59 CST 2022
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\014\011\000\002\014" +
    "\005\000\002\014\007\000\002\014\007\000\002\014\012" +
    "\000\002\014\006\000\002\014\010\000\002\014\010\000" +
    "\002\002\010\000\002\002\004\000\002\037\012\000\002" +
    "\037\011\000\002\037\011\000\002\037\010\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\005\000\002\003\004\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\031\005\000\002" +
    "\031\003\000\002\031\005\000\002\031\003\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\033\013" +
    "\000\002\033\011\000\002\033\014\000\002\033\012\000" +
    "\002\033\010\000\002\033\006\000\002\013\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\002\000\002\004\005\000\002\004\006\000\002\004\006" +
    "\000\002\004\007\000\002\004\006\000\002\004\007\000" +
    "\002\004\005\000\002\004\006\000\002\004\005\000\002" +
    "\004\005\000\002\004\006\000\002\004\005\000\002\004" +
    "\005\000\002\004\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\003\000\002" +
    "\011\003\000\002\011\005\000\002\010\006\000\002\010" +
    "\005\000\002\010\006\000\002\010\007\000\002\010\005" +
    "\000\002\010\006\000\002\010\004\000\002\015\003\000" +
    "\002\015\003\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\005\011\000\002\005" +
    "\015\000\002\005\013\000\002\016\006\000\002\016\003" +
    "\000\002\016\005\000\002\016\006\000\002\034\003\000" +
    "\002\034\012\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\007\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\007\000\002\017\007\000\002\017\007\000\002\017\006" +
    "\000\002\006\015\000\002\020\011\000\002\021\013\000" +
    "\002\023\006\000\002\024\003\000\002\024\003\000\002" +
    "\024\005\000\002\024\005\000\002\024\003\000\002\026" +
    "\003\000\002\026\005\000\002\025\006\000\002\027\010" +
    "\000\002\027\010\000\002\027\010\000\002\027\011\000" +
    "\002\027\011\000\002\027\011\000\002\030\016\000\002" +
    "\030\014\000\002\030\011\000\002\035\011\000\002\035" +
    "\007\000\002\007\003\000\002\007\005\000\002\036\012" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0189\000\004\101\005\001\002\000\012\052\026\062" +
    "\025\101\024\126\022\001\002\000\004\053\010\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\006\066\011\132\012\001\002\000\006\047\013\055\014" +
    "\001\002\000\012\052\uffff\062\uffff\101\uffff\126\uffff\001" +
    "\002\000\006\065\016\107\017\001\002\000\004\065\015" +
    "\001\002\000\012\052\ufffd\062\ufffd\101\ufffd\126\ufffd\001" +
    "\002\000\012\052\ufffe\062\ufffe\101\ufffe\126\ufffe\001\002" +
    "\000\004\047\020\001\002\000\004\065\021\001\002\000" +
    "\012\052\000\062\000\101\000\126\000\001\002\000\004" +
    "\075\u0188\001\002\000\004\002\ufff7\001\002\000\004\053" +
    "\u017e\001\002\000\004\103\u0179\001\002\000\006\047\027" +
    "\062\030\001\002\000\004\103\u016f\001\002\000\004\103" +
    "\031\001\002\000\004\104\032\001\002\000\004\057\033" +
    "\001\002\000\060\004\077\012\062\013\076\024\045\027" +
    "\043\033\064\034\035\045\055\046\056\047\075\050\041" +
    "\052\053\054\034\061\050\106\057\112\051\113\072\114" +
    "\071\116\063\120\100\122\060\125\037\130\052\001\002" +
    "\000\004\047\075\001\002\000\006\047\142\105\uffcb\001" +
    "\002\000\064\004\uffdd\007\uffdd\012\uffdd\013\uffdd\024\uffdd" +
    "\027\uffdd\033\uffdd\034\uffdd\045\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\052\uffdd\054\uffdd\060\uffdd\061\uffdd\106\uffdd\112\uffdd" +
    "\113\uffdd\114\uffdd\116\uffdd\120\uffdd\122\uffdd\125\uffdd\130" +
    "\uffdd\001\002\000\012\012\u015e\052\u0161\061\u015f\114\u0160" +
    "\001\002\000\066\004\uffbd\007\uffbd\012\uffbd\013\uffbd\024" +
    "\uffbd\027\uffbd\033\uffbd\034\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\052\uffbd\054\uffbd\060\uffbd\061\uffbd\104\uffbd\106" +
    "\uffbd\112\uffbd\113\uffbd\114\uffbd\116\uffbd\120\uffbd\122\uffbd" +
    "\125\uffbd\130\uffbd\001\002\000\004\103\u0153\001\002\000" +
    "\062\004\077\012\062\013\076\024\045\027\043\033\064" +
    "\034\035\045\055\046\056\047\075\050\041\052\053\054" +
    "\034\060\u0152\061\050\106\057\112\051\113\072\114\071" +
    "\116\063\120\100\122\060\125\037\130\052\001\002\000" +
    "\004\047\075\001\002\000\064\004\uffed\007\uffed\012\uffed" +
    "\013\uffed\024\uffed\027\uffed\033\uffed\034\uffed\045\uffed\046" +
    "\uffed\047\uffed\050\uffed\052\uffed\054\uffed\060\uffed\061\uffed" +
    "\106\uffed\112\uffed\113\uffed\114\uffed\116\uffed\120\uffed\122" +
    "\uffed\125\uffed\130\uffed\001\002\000\004\036\u0147\001\002" +
    "\000\064\004\uffe9\007\uffe9\012\uffe9\013\uffe9\024\uffe9\027" +
    "\uffe9\033\uffe9\034\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\052\uffe9\054\uffe9\060\uffe9\061\uffe9\106\uffe9\112\uffe9\113" +
    "\uffe9\114\uffe9\116\uffe9\120\uffe9\122\uffe9\125\uffe9\130\uffe9" +
    "\001\002\000\004\105\u0146\001\002\000\006\034\u0140\052" +
    "\u0141\001\002\000\004\077\u013f\001\002\000\004\103\u0139" +
    "\001\002\000\006\047\102\105\uffcb\001\002\000\064\004" +
    "\uffef\007\uffef\012\uffef\013\uffef\024\uffef\027\uffef\033\uffef" +
    "\034\uffef\045\uffef\046\uffef\047\uffef\050\uffef\052\uffef\054" +
    "\uffef\060\uffef\061\uffef\106\uffef\112\uffef\113\uffef\114\uffef" +
    "\116\uffef\120\uffef\122\uffef\125\uffef\130\uffef\001\002\000" +
    "\006\047\142\105\uffcb\001\002\000\004\103\u0121\001\002" +
    "\000\004\103\u0116\001\002\000\004\103\351\001\002\000" +
    "\064\004\uffe3\007\uffe3\012\uffe3\013\uffe3\024\uffe3\027\uffe3" +
    "\033\uffe3\034\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\052" +
    "\uffe3\054\uffe3\060\uffe3\061\uffe3\106\uffe3\112\uffe3\113\uffe3" +
    "\114\uffe3\116\uffe3\120\uffe3\122\uffe3\125\uffe3\130\uffe3\001" +
    "\002\000\006\047\102\105\uffcb\001\002\000\004\103\342" +
    "\001\002\000\004\057\235\001\002\000\064\004\uffdf\007" +
    "\uffdf\012\uffdf\013\uffdf\024\uffdf\027\uffdf\033\uffdf\034\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\052\uffdf\054\uffdf\060" +
    "\uffdf\061\uffdf\106\uffdf\112\uffdf\113\uffdf\114\uffdf\116\uffdf" +
    "\120\uffdf\122\uffdf\125\uffdf\130\uffdf\001\002\000\064\004" +
    "\uffe1\007\uffe1\012\uffe1\013\uffe1\024\uffe1\027\uffe1\033\uffe1" +
    "\034\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\052\uffe1\054" +
    "\uffe1\060\uffe1\061\uffe1\106\uffe1\112\uffe1\113\uffe1\114\uffe1" +
    "\116\uffe1\120\uffe1\122\uffe1\125\uffe1\130\uffe1\001\002\000" +
    "\022\027\202\032\201\051\205\054\200\063\176\064\204" +
    "\072\177\074\203\001\002\000\064\004\ufff1\007\ufff1\012" +
    "\ufff1\013\ufff1\024\ufff1\027\ufff1\033\ufff1\034\ufff1\045\ufff1" +
    "\046\ufff1\047\ufff1\050\ufff1\052\ufff1\054\ufff1\060\ufff1\061" +
    "\ufff1\106\ufff1\112\ufff1\113\ufff1\114\ufff1\116\ufff1\120\ufff1" +
    "\122\ufff1\125\ufff1\130\ufff1\001\002\000\004\052\173\001" +
    "\002\000\004\103\164\001\002\000\064\004\uffe5\007\uffe5" +
    "\012\uffe5\013\uffe5\024\uffe5\027\uffe5\033\uffe5\034\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\050\uffe5\052\uffe5\054\uffe5\060\uffe5" +
    "\061\uffe5\106\uffe5\112\uffe5\113\uffe5\114\uffe5\116\uffe5\120" +
    "\uffe5\122\uffe5\125\uffe5\130\uffe5\001\002\000\064\004\uffeb" +
    "\007\uffeb\012\uffeb\013\uffeb\024\uffeb\027\uffeb\033\uffeb\034" +
    "\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\052\uffeb\054\uffeb" +
    "\060\uffeb\061\uffeb\106\uffeb\112\uffeb\113\uffeb\114\uffeb\116" +
    "\uffeb\120\uffeb\122\uffeb\125\uffeb\130\uffeb\001\002\000\074" +
    "\005\uff91\006\uff91\017\uff91\022\155\027\uff91\030\uff91\031" +
    "\uff91\032\uff91\035\uff91\036\uff91\037\uff91\051\uff91\054\uff91" +
    "\063\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91\071" +
    "\uff91\072\uff91\073\uff91\074\uff91\102\uff91\104\uff91\105\uff91" +
    "\111\uff91\115\uff91\131\uff91\001\002\000\004\035\147\001" +
    "\002\000\006\047\142\105\uffcb\001\002\000\006\047\102" +
    "\105\uffcb\001\002\000\004\105\144\001\002\000\012\014" +
    "\105\022\106\051\107\105\uffcf\001\002\000\004\105\104" +
    "\001\002\000\066\004\uffbf\007\uffbf\012\uffbf\013\uffbf\024" +
    "\uffbf\027\uffbf\033\uffbf\034\uffbf\045\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\052\uffbf\054\uffbf\060\uffbf\061\uffbf\104\uffbf\106" +
    "\uffbf\112\uffbf\113\uffbf\114\uffbf\116\uffbf\120\uffbf\122\uffbf" +
    "\125\uffbf\130\uffbf\001\002\000\006\047\142\105\uffcb\001" +
    "\002\000\006\023\113\077\112\001\002\000\006\047\111" +
    "\077\110\001\002\000\004\105\uffcc\001\002\000\004\105" +
    "\uffcd\001\002\000\004\023\131\001\002\000\004\051\114" +
    "\001\002\000\004\057\115\001\002\000\006\077\116\132" +
    "\117\001\002\000\006\014\127\060\uffdb\001\002\000\006" +
    "\014\125\060\uffd9\001\002\000\004\060\121\001\002\000" +
    "\006\014\122\105\uffd4\001\002\000\004\047\124\001\002" +
    "\000\004\105\uffd5\001\002\000\004\022\106\001\002\000" +
    "\006\077\116\132\117\001\002\000\004\060\uffda\001\002" +
    "\000\006\077\116\132\117\001\002\000\004\060\uffdc\001" +
    "\002\000\010\014\132\051\133\105\uffd0\001\002\000\004" +
    "\047\124\001\002\000\004\057\134\001\002\000\006\077" +
    "\116\132\117\001\002\000\004\060\136\001\002\000\006" +
    "\014\137\105\uffd2\001\002\000\004\047\124\001\002\000" +
    "\004\105\uffd3\001\002\000\004\105\uffd1\001\002\000\010" +
    "\014\105\051\107\105\uffcf\001\002\000\004\105\uffce\001" +
    "\002\000\066\004\uffd7\007\uffd7\012\uffd7\013\uffd7\024\uffd7" +
    "\027\uffd7\033\uffd7\034\uffd7\045\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\052\uffd7\054\uffd7\060\uffd7\061\uffd7\104\uffd7\106\uffd7" +
    "\112\uffd7\113\uffd7\114\uffd7\116\uffd7\120\uffd7\122\uffd7\125" +
    "\uffd7\130\uffd7\001\002\000\004\105\146\001\002\000\066" +
    "\004\uffbe\007\uffbe\012\uffbe\013\uffbe\024\uffbe\027\uffbe\033" +
    "\uffbe\034\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\052\uffbe" +
    "\054\uffbe\060\uffbe\061\uffbe\104\uffbe\106\uffbe\112\uffbe\113" +
    "\uffbe\114\uffbe\116\uffbe\120\uffbe\122\uffbe\125\uffbe\130\uffbe" +
    "\001\002\000\004\047\075\001\002\000\006\035\153\105" +
    "\uff70\001\002\000\004\105\152\001\002\000\064\004\uff6e" +
    "\007\uff6e\012\uff6e\013\uff6e\024\uff6e\027\uff6e\033\uff6e\034" +
    "\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\052\uff6e\054\uff6e" +
    "\060\uff6e\061\uff6e\106\uff6e\112\uff6e\113\uff6e\114\uff6e\116" +
    "\uff6e\120\uff6e\122\uff6e\125\uff6e\130\uff6e\001\002\000\004" +
    "\047\075\001\002\000\004\105\uff6f\001\002\000\004\077" +
    "\156\001\002\000\004\023\157\001\002\000\004\047\160" +
    "\001\002\000\004\022\161\001\002\000\004\047\162\001" +
    "\002\000\004\023\163\001\002\000\072\005\uff90\006\uff90" +
    "\017\uff90\027\uff90\030\uff90\031\uff90\032\uff90\035\uff90\036" +
    "\uff90\037\uff90\051\uff90\054\uff90\063\uff90\064\uff90\065\uff90" +
    "\066\uff90\067\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074" +
    "\uff90\102\uff90\104\uff90\105\uff90\111\uff90\115\uff90\131\uff90" +
    "\001\002\000\004\132\165\001\002\000\004\014\166\001" +
    "\002\000\004\005\167\001\002\000\004\047\170\001\002" +
    "\000\004\104\171\001\002\000\004\105\172\001\002\000" +
    "\064\004\uff60\007\uff60\012\uff60\013\uff60\024\uff60\027\uff60" +
    "\033\uff60\034\uff60\045\uff60\046\uff60\047\uff60\050\uff60\052" +
    "\uff60\054\uff60\060\uff60\061\uff60\106\uff60\112\uff60\113\uff60" +
    "\114\uff60\116\uff60\120\uff60\122\uff60\125\uff60\130\uff60\001" +
    "\002\000\006\047\142\105\uffcb\001\002\000\004\105\175" +
    "\001\002\000\066\004\uffc8\007\uffc8\012\uffc8\013\uffc8\024" +
    "\uffc8\027\uffc8\033\uffc8\034\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\052\uffc8\054\uffc8\060\uffc8\061\uffc8\104\uffc8\106" +
    "\uffc8\112\uffc8\113\uffc8\114\uffc8\116\uffc8\120\uffc8\122\uffc8" +
    "\125\uffc8\130\uffc8\001\002\000\006\047\075\077\233\001" +
    "\002\000\006\047\075\077\231\001\002\000\006\104\uff8c" +
    "\105\uff8c\001\002\000\006\047\075\077\227\001\002\000" +
    "\006\104\uff8b\105\uff8b\001\002\000\006\047\075\077\225" +
    "\001\002\000\006\047\075\077\223\001\002\000\006\047" +
    "\075\077\206\001\002\000\020\031\210\071\211\073\215" +
    "\104\uff7e\105\uff7e\111\213\115\214\001\002\000\020\031" +
    "\210\071\211\073\215\104\uff85\105\uff85\111\213\115\214" +
    "\001\002\000\006\047\uffb9\077\uffb9\001\002\000\006\047" +
    "\uffb8\077\uffb8\001\002\000\006\047\075\077\216\001\002" +
    "\000\006\047\uffbb\077\uffbb\001\002\000\006\047\uffbc\077" +
    "\uffbc\001\002\000\006\047\uffba\077\uffba\001\002\000\006" +
    "\104\uff7c\105\uff7c\001\002\000\006\104\uff84\105\uff84\001" +
    "\002\000\006\047\075\077\221\001\002\000\006\104\uff7b" +
    "\105\uff7b\001\002\000\006\104\uff7d\105\uff7d\001\002\000" +
    "\006\104\uff82\105\uff82\001\002\000\006\104\uff89\105\uff89" +
    "\001\002\000\006\104\uff81\105\uff81\001\002\000\006\104" +
    "\uff88\105\uff88\001\002\000\006\104\uff80\105\uff80\001\002" +
    "\000\006\104\uff87\105\uff87\001\002\000\006\104\uff7f\105" +
    "\uff7f\001\002\000\006\104\uff86\105\uff86\001\002\000\006" +
    "\104\uff83\105\uff83\001\002\000\006\104\uff8a\105\uff8a\001" +
    "\002\000\060\004\077\012\062\013\076\024\045\027\043" +
    "\033\064\034\035\045\055\046\056\047\075\050\041\052" +
    "\053\054\034\061\050\106\057\112\051\113\072\114\071" +
    "\116\063\120\100\122\060\125\037\130\052\001\002\000" +
    "\062\004\077\012\062\013\076\024\045\027\043\033\064" +
    "\034\035\045\055\046\056\047\075\050\041\052\053\054" +
    "\034\060\237\061\050\106\057\112\051\113\072\114\071" +
    "\116\063\120\100\122\060\125\037\130\052\001\002\000" +
    "\004\130\254\001\002\000\064\004\uffde\007\uffde\012\uffde" +
    "\013\uffde\024\uffde\027\uffde\033\uffde\034\uffde\045\uffde\046" +
    "\uffde\047\uffde\050\uffde\052\uffde\054\uffde\060\uffde\061\uffde" +
    "\106\uffde\112\uffde\113\uffde\114\uffde\116\uffde\120\uffde\122" +
    "\uffde\125\uffde\130\uffde\001\002\000\064\004\uffee\007\uffee" +
    "\012\uffee\013\uffee\024\uffee\027\uffee\033\uffee\034\uffee\045" +
    "\uffee\046\uffee\047\uffee\050\uffee\052\uffee\054\uffee\060\uffee" +
    "\061\uffee\106\uffee\112\uffee\113\uffee\114\uffee\116\uffee\120" +
    "\uffee\122\uffee\125\uffee\130\uffee\001\002\000\064\004\uffea" +
    "\007\uffea\012\uffea\013\uffea\024\uffea\027\uffea\033\uffea\034" +
    "\uffea\045\uffea\046\uffea\047\uffea\050\uffea\052\uffea\054\uffea" +
    "\060\uffea\061\uffea\106\uffea\112\uffea\113\uffea\114\uffea\116" +
    "\uffea\120\uffea\122\uffea\125\uffea\130\uffea\001\002\000\004" +
    "\105\253\001\002\000\064\004\ufff0\007\ufff0\012\ufff0\013" +
    "\ufff0\024\ufff0\027\ufff0\033\ufff0\034\ufff0\045\ufff0\046\ufff0" +
    "\047\ufff0\050\ufff0\052\ufff0\054\ufff0\060\ufff0\061\ufff0\106" +
    "\ufff0\112\ufff0\113\ufff0\114\ufff0\116\ufff0\120\ufff0\122\ufff0" +
    "\125\ufff0\130\ufff0\001\002\000\064\004\uffe4\007\uffe4\012" +
    "\uffe4\013\uffe4\024\uffe4\027\uffe4\033\uffe4\034\uffe4\045\uffe4" +
    "\046\uffe4\047\uffe4\050\uffe4\052\uffe4\054\uffe4\060\uffe4\061" +
    "\uffe4\106\uffe4\112\uffe4\113\uffe4\114\uffe4\116\uffe4\120\uffe4" +
    "\122\uffe4\125\uffe4\130\uffe4\001\002\000\064\004\uffe0\007" +
    "\uffe0\012\uffe0\013\uffe0\024\uffe0\027\uffe0\033\uffe0\034\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\050\uffe0\052\uffe0\054\uffe0\060" +
    "\uffe0\061\uffe0\106\uffe0\112\uffe0\113\uffe0\114\uffe0\116\uffe0" +
    "\120\uffe0\122\uffe0\125\uffe0\130\uffe0\001\002\000\064\004" +
    "\uffe2\007\uffe2\012\uffe2\013\uffe2\024\uffe2\027\uffe2\033\uffe2" +
    "\034\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\052\uffe2\054" +
    "\uffe2\060\uffe2\061\uffe2\106\uffe2\112\uffe2\113\uffe2\114\uffe2" +
    "\116\uffe2\120\uffe2\122\uffe2\125\uffe2\130\uffe2\001\002\000" +
    "\064\004\ufff2\007\ufff2\012\ufff2\013\ufff2\024\ufff2\027\ufff2" +
    "\033\ufff2\034\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\052" +
    "\ufff2\054\ufff2\060\ufff2\061\ufff2\106\ufff2\112\ufff2\113\ufff2" +
    "\114\ufff2\116\ufff2\120\ufff2\122\ufff2\125\ufff2\130\ufff2\001" +
    "\002\000\064\004\uffe6\007\uffe6\012\uffe6\013\uffe6\024\uffe6" +
    "\027\uffe6\033\uffe6\034\uffe6\045\uffe6\046\uffe6\047\uffe6\050" +
    "\uffe6\052\uffe6\054\uffe6\060\uffe6\061\uffe6\106\uffe6\112\uffe6" +
    "\113\uffe6\114\uffe6\116\uffe6\120\uffe6\122\uffe6\125\uffe6\130" +
    "\uffe6\001\002\000\064\004\uffec\007\uffec\012\uffec\013\uffec" +
    "\024\uffec\027\uffec\033\uffec\034\uffec\045\uffec\046\uffec\047" +
    "\uffec\050\uffec\052\uffec\054\uffec\060\uffec\061\uffec\106\uffec" +
    "\112\uffec\113\uffec\114\uffec\116\uffec\120\uffec\122\uffec\125" +
    "\uffec\130\uffec\001\002\000\064\004\uffe8\007\uffe8\012\uffe8" +
    "\013\uffe8\024\uffe8\027\uffe8\033\uffe8\034\uffe8\045\uffe8\046" +
    "\uffe8\047\uffe8\050\uffe8\052\uffe8\054\uffe8\060\uffe8\061\uffe8" +
    "\106\uffe8\112\uffe8\113\uffe8\114\uffe8\116\uffe8\120\uffe8\122" +
    "\uffe8\125\uffe8\130\uffe8\001\002\000\004\103\255\001\002" +
    "\000\020\044\263\047\075\076\257\077\266\103\262\124" +
    "\264\132\260\001\002\000\012\102\336\104\uff9e\105\uff9e" +
    "\131\337\001\002\000\016\044\263\047\075\077\266\103" +
    "\326\124\264\132\260\001\002\000\032\005\uffa7\006\uffa7" +
    "\017\uffa7\030\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\102" +
    "\uffa7\104\uffa7\105\uffa7\131\uffa7\001\002\000\004\104\324" +
    "\001\002\000\020\044\263\047\075\076\257\077\266\103" +
    "\262\124\264\132\260\001\002\000\032\005\uffae\006\uffae" +
    "\017\uffae\030\uffae\065\uffae\066\uffae\067\uffae\070\uffae\102" +
    "\uffae\104\uffae\105\uffae\131\uffae\001\002\000\032\005\uffaf" +
    "\006\uffaf\017\uffaf\030\uffaf\065\uffaf\066\uffaf\067\uffaf\070" +
    "\uffaf\102\uffaf\104\uffaf\105\uffaf\131\uffaf\001\002\000\044" +
    "\005\uffad\006\uffad\017\uffad\030\uffad\031\210\065\uffad\066" +
    "\uffad\067\uffad\070\uffad\071\211\073\215\102\uffad\104\uffad" +
    "\105\uffad\111\213\115\214\131\uffad\001\002\000\044\005" +
    "\uffa8\006\uffa8\017\uffa8\030\uffa8\031\210\065\uffa8\066\uffa8" +
    "\067\uffa8\070\uffa8\071\211\073\215\102\uffa8\104\uffa8\105" +
    "\uffa8\111\213\115\214\131\uffa8\001\002\000\032\005\272" +
    "\006\276\017\302\030\300\065\270\066\301\067\277\070" +
    "\274\102\273\104\uff9d\105\uff9d\131\275\001\002\000\020" +
    "\044\uffb0\047\uffb0\076\uffb0\077\uffb0\103\uffb0\124\uffb0\132" +
    "\uffb0\001\002\000\020\044\263\047\075\076\305\077\266" +
    "\103\306\124\264\132\260\001\002\000\020\044\uffb6\047" +
    "\uffb6\076\uffb6\077\uffb6\103\uffb6\124\uffb6\132\uffb6\001\002" +
    "\000\020\044\263\047\075\076\257\077\266\103\262\124" +
    "\264\132\260\001\002\000\020\044\uffb4\047\uffb4\076\uffb4" +
    "\077\uffb4\103\uffb4\124\uffb4\132\uffb4\001\002\000\020\044" +
    "\263\047\075\076\257\077\266\103\262\124\264\132\260" +
    "\001\002\000\020\044\uffb7\047\uffb7\076\uffb7\077\uffb7\103" +
    "\uffb7\124\uffb7\132\uffb7\001\002\000\020\044\uffb3\047\uffb3" +
    "\076\uffb3\077\uffb3\103\uffb3\124\uffb3\132\uffb3\001\002\000" +
    "\020\044\uffb2\047\uffb2\076\uffb2\077\uffb2\103\uffb2\124\uffb2" +
    "\132\uffb2\001\002\000\020\044\uffb1\047\uffb1\076\uffb1\077" +
    "\uffb1\103\uffb1\124\uffb1\132\uffb1\001\002\000\020\044\uffb5" +
    "\047\uffb5\076\uffb5\077\uffb5\103\uffb5\124\uffb5\132\uffb5\001" +
    "\002\000\006\104\uff9a\105\uff9a\001\002\000\006\104\uff99" +
    "\105\uff99\001\002\000\016\044\263\047\075\077\266\103" +
    "\306\124\264\132\260\001\002\000\016\044\263\047\075" +
    "\077\266\103\306\124\264\132\260\001\002\000\012\102" +
    "\uffa4\104\uffa4\105\uffa4\131\uffa4\001\002\000\004\104\311" +
    "\001\002\000\032\005\uffa6\006\uffa6\017\uffa6\030\uffa6\065" +
    "\uffa6\066\uffa6\067\uffa6\070\uffa6\102\uffa6\104\uffa6\105\uffa6" +
    "\131\uffa6\001\002\000\012\102\uffa3\104\uffa3\105\uffa3\131" +
    "\uffa3\001\002\000\006\047\075\077\314\001\002\000\032" +
    "\005\uffa9\006\uffa9\017\uffa9\030\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\070\uffa9\102\uffa9\104\uffa9\105\uffa9\131\uffa9\001\002" +
    "\000\032\005\uffaa\006\uffaa\017\uffaa\030\uffaa\065\uffaa\066" +
    "\uffaa\067\uffaa\070\uffaa\102\uffaa\104\uffaa\105\uffaa\131\uffaa" +
    "\001\002\000\006\047\075\077\317\001\002\000\032\005" +
    "\uffab\006\uffab\017\uffab\030\uffab\065\uffab\066\uffab\067\uffab" +
    "\070\uffab\102\uffab\104\uffab\105\uffab\131\uffab\001\002\000" +
    "\032\005\uffac\006\uffac\017\uffac\030\uffac\065\uffac\066\uffac" +
    "\067\uffac\070\uffac\102\uffac\104\uffac\105\uffac\131\uffac\001" +
    "\002\000\004\104\323\001\002\000\024\005\272\006\276" +
    "\017\302\030\300\065\270\066\301\067\277\070\274\104" +
    "\311\001\002\000\012\102\uffa1\104\uffa1\105\uffa1\131\uffa1" +
    "\001\002\000\004\105\325\001\002\000\064\004\uff77\007" +
    "\uff77\012\uff77\013\uff77\024\uff77\027\uff77\033\uff77\034\uff77" +
    "\045\uff77\046\uff77\047\uff77\050\uff77\052\uff77\054\uff77\060" +
    "\uff77\061\uff77\106\uff77\112\uff77\113\uff77\114\uff77\116\uff77" +
    "\120\uff77\122\uff77\125\uff77\130\uff77\001\002\000\020\044" +
    "\263\047\075\076\257\077\266\103\262\124\264\132\260" +
    "\001\002\000\032\005\272\006\276\017\302\030\300\065" +
    "\270\066\301\067\277\070\274\102\uff9f\104\uff9f\105\uff9f" +
    "\131\uff9f\001\002\000\020\044\263\047\075\076\331\077" +
    "\266\103\306\124\264\132\260\001\002\000\016\044\263" +
    "\047\075\077\266\103\306\124\264\132\260\001\002\000" +
    "\012\102\uffa5\104\uffa5\105\uffa5\131\uffa5\001\002\000\012" +
    "\102\uffa2\104\uffa2\105\uffa2\131\uffa2\001\002\000\004\104" +
    "\335\001\002\000\012\102\uffa0\104\uffa0\105\uffa0\131\uffa0" +
    "\001\002\000\020\044\263\047\075\076\257\077\266\103" +
    "\262\124\264\132\260\001\002\000\020\044\263\047\075" +
    "\076\257\077\266\103\262\124\264\132\260\001\002\000" +
    "\006\104\uff9c\105\uff9c\001\002\000\006\104\uff9b\105\uff9b" +
    "\001\002\000\004\132\343\001\002\000\004\104\344\001" +
    "\002\000\006\104\uff7a\105\uff7a\001\002\000\004\105\350" +
    "\001\002\000\004\105\347\001\002\000\066\004\uffc1\007" +
    "\uffc1\012\uffc1\013\uffc1\024\uffc1\027\uffc1\033\uffc1\034\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\050\uffc1\052\uffc1\054\uffc1\060" +
    "\uffc1\061\uffc1\104\uffc1\106\uffc1\112\uffc1\113\uffc1\114\uffc1" +
    "\116\uffc1\120\uffc1\122\uffc1\125\uffc1\130\uffc1\001\002\000" +
    "\066\004\uffd6\007\uffd6\012\uffd6\013\uffd6\024\uffd6\027\uffd6" +
    "\033\uffd6\034\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\052" +
    "\uffd6\054\uffd6\060\uffd6\061\uffd6\104\uffd6\106\uffd6\112\uffd6" +
    "\113\uffd6\114\uffd6\116\uffd6\120\uffd6\122\uffd6\125\uffd6\130" +
    "\uffd6\001\002\000\004\047\075\001\002\000\004\104\353" +
    "\001\002\000\004\057\354\001\002\000\004\011\355\001" +
    "\002\000\010\047\075\077\u0107\132\u0109\001\002\000\010" +
    "\011\360\025\361\060\357\001\002\000\064\004\uff65\007" +
    "\uff65\012\uff65\013\uff65\024\uff65\027\uff65\033\uff65\034\uff65" +
    "\045\uff65\046\uff65\047\uff65\050\uff65\052\uff65\054\uff65\060" +
    "\uff65\061\uff65\106\uff65\112\uff65\113\uff65\114\uff65\116\uff65" +
    "\120\uff65\122\uff65\125\uff65\130\uff65\001\002\000\010\047" +
    "\075\077\370\132\372\001\002\000\004\037\362\001\002" +
    "\000\060\004\077\012\062\013\076\024\045\027\043\033" +
    "\064\034\035\045\055\046\056\047\075\050\041\052\053" +
    "\054\034\061\050\106\057\112\051\113\072\114\071\116" +
    "\063\120\100\122\060\125\037\130\052\001\002\000\064" +
    "\004\077\007\365\012\062\013\076\024\045\027\043\033" +
    "\064\034\035\045\055\046\056\047\075\050\041\052\053" +
    "\054\034\060\364\061\050\106\057\112\051\113\072\114" +
    "\071\116\063\120\100\122\060\125\037\130\052\001\002" +
    "\000\064\004\uff66\007\uff66\012\uff66\013\uff66\024\uff66\027" +
    "\uff66\033\uff66\034\uff66\045\uff66\046\uff66\047\uff66\050\uff66" +
    "\052\uff66\054\uff66\060\uff66\061\uff66\106\uff66\112\uff66\113" +
    "\uff66\114\uff66\116\uff66\120\uff66\122\uff66\125\uff66\130\uff66" +
    "\001\002\000\004\105\366\001\002\000\004\060\367\001" +
    "\002\000\064\004\uff67\007\uff67\012\uff67\013\uff67\024\uff67" +
    "\027\uff67\033\uff67\034\uff67\045\uff67\046\uff67\047\uff67\050" +
    "\uff67\052\uff67\054\uff67\060\uff67\061\uff67\106\uff67\112\uff67" +
    "\113\uff67\114\uff67\116\uff67\120\uff67\122\uff67\125\uff67\130" +
    "\uff67\001\002\000\004\037\u0103\001\002\000\004\037\377" +
    "\001\002\000\004\037\373\001\002\000\060\004\077\012" +
    "\062\013\076\024\045\027\043\033\064\034\035\045\055" +
    "\046\056\047\075\050\041\052\053\054\034\061\050\106" +
    "\057\112\051\113\072\114\071\116\063\120\100\122\060" +
    "\125\037\130\052\001\002\000\062\004\077\007\375\012" +
    "\062\013\076\024\045\027\043\033\064\034\035\045\055" +
    "\046\056\047\075\050\041\052\053\054\034\061\050\106" +
    "\057\112\051\113\072\114\071\116\063\120\100\122\060" +
    "\125\037\130\052\001\002\000\004\105\376\001\002\000" +
    "\010\011\uff68\025\uff68\060\uff68\001\002\000\060\004\077" +
    "\012\062\013\076\024\045\027\043\033\064\034\035\045" +
    "\055\046\056\047\075\050\041\052\053\054\034\061\050" +
    "\106\057\112\051\113\072\114\071\116\063\120\100\122" +
    "\060\125\037\130\052\001\002\000\062\004\077\007\u0101" +
    "\012\062\013\076\024\045\027\043\033\064\034\035\045" +
    "\055\046\056\047\075\050\041\052\053\054\034\061\050" +
    "\106\057\112\051\113\072\114\071\116\063\120\100\122" +
    "\060\125\037\130\052\001\002\000\004\105\u0102\001\002" +
    "\000\010\011\uff69\025\uff69\060\uff69\001\002\000\060\004" +
    "\077\012\062\013\076\024\045\027\043\033\064\034\035" +
    "\045\055\046\056\047\075\050\041\052\053\054\034\061" +
    "\050\106\057\112\051\113\072\114\071\116\063\120\100" +
    "\122\060\125\037\130\052\001\002\000\062\004\077\007" +
    "\u0105\012\062\013\076\024\045\027\043\033\064\034\035" +
    "\045\055\046\056\047\075\050\041\052\053\054\034\061" +
    "\050\106\057\112\051\113\072\114\071\116\063\120\100" +
    "\122\060\125\037\130\052\001\002\000\004\105\u0106\001" +
    "\002\000\010\011\uff6a\025\uff6a\060\uff6a\001\002\000\004" +
    "\037\u0112\001\002\000\004\037\u010e\001\002\000\004\037" +
    "\u010a\001\002\000\060\004\077\012\062\013\076\024\045" +
    "\027\043\033\064\034\035\045\055\046\056\047\075\050" +
    "\041\052\053\054\034\061\050\106\057\112\051\113\072" +
    "\114\071\116\063\120\100\122\060\125\037\130\052\001" +
    "\002\000\062\004\077\007\u010c\012\062\013\076\024\045" +
    "\027\043\033\064\034\035\045\055\046\056\047\075\050" +
    "\041\052\053\054\034\061\050\106\057\112\051\113\072" +
    "\114\071\116\063\120\100\122\060\125\037\130\052\001" +
    "\002\000\004\105\u010d\001\002\000\010\011\uff6c\025\uff6c" +
    "\060\uff6c\001\002\000\060\004\077\012\062\013\076\024" +
    "\045\027\043\033\064\034\035\045\055\046\056\047\075" +
    "\050\041\052\053\054\034\061\050\106\057\112\051\113" +
    "\072\114\071\116\063\120\100\122\060\125\037\130\052" +
    "\001\002\000\062\004\077\007\u0110\012\062\013\076\024" +
    "\045\027\043\033\064\034\035\045\055\046\056\047\075" +
    "\050\041\052\053\054\034\061\050\106\057\112\051\113" +
    "\072\114\071\116\063\120\100\122\060\125\037\130\052" +
    "\001\002\000\004\105\u0111\001\002\000\010\011\uff6b\025" +
    "\uff6b\060\uff6b\001\002\000\060\004\077\012\062\013\076" +
    "\024\045\027\043\033\064\034\035\045\055\046\056\047" +
    "\075\050\041\052\053\054\034\061\050\106\057\112\051" +
    "\113\072\114\071\116\063\120\100\122\060\125\037\130" +
    "\052\001\002\000\062\004\077\007\u0114\012\062\013\076" +
    "\024\045\027\043\033\064\034\035\045\055\046\056\047" +
    "\075\050\041\052\053\054\034\061\050\106\057\112\051" +
    "\113\072\114\071\116\063\120\100\122\060\125\037\130" +
    "\052\001\002\000\004\105\u0115\001\002\000\010\011\uff6d" +
    "\025\uff6d\060\uff6d\001\002\000\004\132\u0117\001\002\000" +
    "\006\014\u0119\104\u0118\001\002\000\004\105\u0120\001\002" +
    "\000\004\047\u011a\001\002\000\006\014\u011e\104\uff62\001" +
    "\002\000\004\104\u011c\001\002\000\004\105\u011d\001\002" +
    "\000\064\004\uff64\007\uff64\012\uff64\013\uff64\024\uff64\027" +
    "\uff64\033\uff64\034\uff64\045\uff64\046\uff64\047\uff64\050\uff64" +
    "\052\uff64\054\uff64\060\uff64\061\uff64\106\uff64\112\uff64\113" +
    "\uff64\114\uff64\116\uff64\120\uff64\122\uff64\125\uff64\130\uff64" +
    "\001\002\000\004\047\u011a\001\002\000\004\104\uff61\001" +
    "\002\000\064\004\uff63\007\uff63\012\uff63\013\uff63\024\uff63" +
    "\027\uff63\033\uff63\034\uff63\045\uff63\046\uff63\047\uff63\050" +
    "\uff63\052\uff63\054\uff63\060\uff63\061\uff63\106\uff63\112\uff63" +
    "\113\uff63\114\uff63\116\uff63\120\uff63\122\uff63\125\uff63\130" +
    "\uff63\001\002\000\006\047\075\052\u0124\001\002\000\004" +
    "\105\u012b\001\002\000\006\051\u0129\105\uff94\001\002\000" +
    "\004\047\075\001\002\000\004\051\u0126\001\002\000\006" +
    "\047\075\077\u0127\001\002\000\004\105\uff95\001\002\000" +
    "\004\105\uff92\001\002\000\004\077\u012a\001\002\000\004" +
    "\105\uff93\001\002\000\020\044\263\047\075\076\257\077" +
    "\266\103\262\124\264\132\260\001\002\000\004\105\u012d" +
    "\001\002\000\014\027\043\047\075\054\034\112\051\116" +
    "\063\001\002\000\004\104\u012f\001\002\000\004\057\u0130" +
    "\001\002\000\060\004\077\012\062\013\076\024\045\027" +
    "\043\033\064\034\035\045\055\046\056\047\075\050\041" +
    "\052\053\054\034\061\050\106\057\112\051\113\072\114" +
    "\071\116\063\120\100\122\060\125\037\130\052\001\002" +
    "\000\062\004\077\012\062\013\076\024\045\027\043\033" +
    "\064\034\035\045\055\046\056\047\075\050\041\052\053" +
    "\054\034\060\u0132\061\050\106\057\112\051\113\072\114" +
    "\071\116\063\120\100\122\060\125\037\130\052\001\002" +
    "\000\064\004\uff79\007\uff79\012\uff79\013\uff79\024\uff79\027" +
    "\uff79\033\uff79\034\uff79\045\uff79\046\uff79\047\uff79\050\uff79" +
    "\052\uff79\054\uff79\060\uff79\061\uff79\106\uff79\112\uff79\113" +
    "\uff79\114\uff79\116\uff79\120\uff79\122\uff79\125\uff79\130\uff79" +
    "\001\002\000\004\105\u0134\001\002\000\066\004\uffc2\007" +
    "\uffc2\012\uffc2\013\uffc2\024\uffc2\027\uffc2\033\uffc2\034\uffc2" +
    "\045\uffc2\046\uffc2\047\uffc2\050\uffc2\052\uffc2\054\uffc2\060" +
    "\uffc2\061\uffc2\104\uffc2\106\uffc2\112\uffc2\113\uffc2\114\uffc2" +
    "\116\uffc2\120\uffc2\122\uffc2\125\uffc2\130\uffc2\001\002\000" +
    "\004\105\u0138\001\002\000\004\105\u0137\001\002\000\066" +
    "\004\uffca\007\uffca\012\uffca\013\uffca\024\uffca\027\uffca\033" +
    "\uffca\034\uffca\045\uffca\046\uffca\047\uffca\050\uffca\052\uffca" +
    "\054\uffca\060\uffca\061\uffca\104\uffca\106\uffca\112\uffca\113" +
    "\uffca\114\uffca\116\uffca\120\uffca\122\uffca\125\uffca\130\uffca" +
    "\001\002\000\066\004\uffd8\007\uffd8\012\uffd8\013\uffd8\024" +
    "\uffd8\027\uffd8\033\uffd8\034\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\052\uffd8\054\uffd8\060\uffd8\061\uffd8\104\uffd8\106" +
    "\uffd8\112\uffd8\113\uffd8\114\uffd8\116\uffd8\120\uffd8\122\uffd8" +
    "\125\uffd8\130\uffd8\001\002\000\020\044\263\047\075\076" +
    "\257\077\266\103\262\124\264\132\260\001\002\000\004" +
    "\104\u013b\001\002\000\004\057\u013c\001\002\000\060\004" +
    "\077\012\062\013\076\024\045\027\043\033\064\034\035" +
    "\045\055\046\056\047\075\050\041\052\053\054\034\061" +
    "\050\106\057\112\051\113\072\114\071\116\063\120\100" +
    "\122\060\125\037\130\052\001\002\000\062\004\077\012" +
    "\062\013\076\024\045\027\043\033\064\034\035\045\055" +
    "\046\056\047\075\050\041\052\053\054\034\060\u013e\061" +
    "\050\106\057\112\051\113\072\114\071\116\063\120\100" +
    "\122\060\125\037\130\052\001\002\000\064\004\uff78\007" +
    "\uff78\012\uff78\013\uff78\024\uff78\027\uff78\033\uff78\034\uff78" +
    "\045\uff78\046\uff78\047\uff78\050\uff78\052\uff78\054\uff78\060" +
    "\uff78\061\uff78\106\uff78\112\uff78\113\uff78\114\uff78\116\uff78" +
    "\120\uff78\122\uff78\125\uff78\130\uff78\001\002\000\006\104" +
    "\uff8f\105\uff8f\001\002\000\006\047\142\105\uffcb\001\002" +
    "\000\006\047\142\105\uffcb\001\002\000\004\105\u0143\001" +
    "\002\000\066\004\uffc6\007\uffc6\012\uffc6\013\uffc6\024\uffc6" +
    "\027\uffc6\033\uffc6\034\uffc6\045\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\052\uffc6\054\uffc6\060\uffc6\061\uffc6\104\uffc6\106\uffc6" +
    "\112\uffc6\113\uffc6\114\uffc6\116\uffc6\120\uffc6\122\uffc6\125" +
    "\uffc6\130\uffc6\001\002\000\004\105\u0145\001\002\000\066" +
    "\004\uffc3\007\uffc3\012\uffc3\013\uffc3\024\uffc3\027\uffc3\033" +
    "\uffc3\034\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\052\uffc3" +
    "\054\uffc3\060\uffc3\061\uffc3\104\uffc3\106\uffc3\112\uffc3\113" +
    "\uffc3\114\uffc3\116\uffc3\120\uffc3\122\uffc3\125\uffc3\130\uffc3" +
    "\001\002\000\064\004\uffe7\007\uffe7\012\uffe7\013\uffe7\024" +
    "\uffe7\027\uffe7\033\uffe7\034\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\050\uffe7\052\uffe7\054\uffe7\060\uffe7\061\uffe7\106\uffe7\112" +
    "\uffe7\113\uffe7\114\uffe7\116\uffe7\120\uffe7\122\uffe7\125\uffe7" +
    "\130\uffe7\001\002\000\010\041\u0149\047\075\132\u014b\001" +
    "\002\000\004\105\u0150\001\002\000\004\105\uff71\001\002" +
    "\000\006\036\u014e\105\uff75\001\002\000\006\036\u014c\105" +
    "\uff74\001\002\000\010\041\u0149\047\075\132\u014b\001\002" +
    "\000\004\105\uff73\001\002\000\010\041\u0149\047\075\132" +
    "\u014b\001\002\000\004\105\uff72\001\002\000\064\004\uff76" +
    "\007\uff76\012\uff76\013\uff76\024\uff76\027\uff76\033\uff76\034" +
    "\uff76\045\uff76\046\uff76\047\uff76\050\uff76\052\uff76\054\uff76" +
    "\060\uff76\061\uff76\106\uff76\112\uff76\113\uff76\114\uff76\116" +
    "\uff76\120\uff76\122\uff76\125\uff76\130\uff76\001\002\000\006" +
    "\104\uff8d\105\uff8d\001\002\000\004\002\ufff4\001\002\000" +
    "\020\044\263\047\075\076\257\077\266\103\262\124\264" +
    "\132\260\001\002\000\004\104\u0155\001\002\000\004\057" +
    "\u0156\001\002\000\060\004\077\012\062\013\076\024\045" +
    "\027\043\033\064\034\035\045\055\046\056\047\075\050" +
    "\041\052\053\054\034\061\050\106\057\112\051\113\072" +
    "\114\071\116\063\120\100\122\060\125\037\130\052\001" +
    "\002\000\062\004\077\012\062\013\076\024\045\027\043" +
    "\033\064\034\035\045\055\046\056\047\075\050\041\052" +
    "\053\054\034\060\u0158\061\050\106\057\112\051\113\072" +
    "\114\071\116\063\120\100\122\060\125\037\130\052\001" +
    "\002\000\066\004\uff98\007\uff98\012\uff98\013\uff98\024\uff98" +
    "\027\uff98\033\uff98\034\uff98\040\u0159\045\uff98\046\uff98\047" +
    "\uff98\050\uff98\052\uff98\054\uff98\060\uff98\061\uff98\106\uff98" +
    "\112\uff98\113\uff98\114\uff98\116\uff98\120\uff98\122\uff98\125" +
    "\uff98\130\uff98\001\002\000\006\050\041\057\u015a\001\002" +
    "\000\060\004\077\012\062\013\076\024\045\027\043\033" +
    "\064\034\035\045\055\046\056\047\075\050\041\052\053" +
    "\054\034\061\050\106\057\112\051\113\072\114\071\116" +
    "\063\120\100\122\060\125\037\130\052\001\002\000\064" +
    "\004\uff96\007\uff96\012\uff96\013\uff96\024\uff96\027\uff96\033" +
    "\uff96\034\uff96\045\uff96\046\uff96\047\uff96\050\uff96\052\uff96" +
    "\054\uff96\060\uff96\061\uff96\106\uff96\112\uff96\113\uff96\114" +
    "\uff96\116\uff96\120\uff96\122\uff96\125\uff96\130\uff96\001\002" +
    "\000\062\004\077\012\062\013\076\024\045\027\043\033" +
    "\064\034\035\045\055\046\056\047\075\050\041\052\053" +
    "\054\034\060\u015d\061\050\106\057\112\051\113\072\114" +
    "\071\116\063\120\100\122\060\125\037\130\052\001\002" +
    "\000\064\004\uff97\007\uff97\012\uff97\013\uff97\024\uff97\027" +
    "\uff97\033\uff97\034\uff97\045\uff97\046\uff97\047\uff97\050\uff97" +
    "\052\uff97\054\uff97\060\uff97\061\uff97\106\uff97\112\uff97\113" +
    "\uff97\114\uff97\116\uff97\120\uff97\122\uff97\125\uff97\130\uff97" +
    "\001\002\000\006\047\142\105\uffcb\001\002\000\004\052" +
    "\u0167\001\002\000\004\052\u0164\001\002\000\006\047\142" +
    "\105\uffcb\001\002\000\004\105\u0163\001\002\000\066\004" +
    "\uffc9\007\uffc9\012\uffc9\013\uffc9\024\uffc9\027\uffc9\033\uffc9" +
    "\034\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\052\uffc9\054" +
    "\uffc9\060\uffc9\061\uffc9\104\uffc9\106\uffc9\112\uffc9\113\uffc9" +
    "\114\uffc9\116\uffc9\120\uffc9\122\uffc9\125\uffc9\130\uffc9\001" +
    "\002\000\006\047\142\105\uffcb\001\002\000\004\105\u0166" +
    "\001\002\000\066\004\uffc7\007\uffc7\012\uffc7\013\uffc7\024" +
    "\uffc7\027\uffc7\033\uffc7\034\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\052\uffc7\054\uffc7\060\uffc7\061\uffc7\104\uffc7\106" +
    "\uffc7\112\uffc7\113\uffc7\114\uffc7\116\uffc7\120\uffc7\122\uffc7" +
    "\125\uffc7\130\uffc7\001\002\000\006\047\142\105\uffcb\001" +
    "\002\000\004\105\u0169\001\002\000\066\004\uffc5\007\uffc5" +
    "\012\uffc5\013\uffc5\024\uffc5\027\uffc5\033\uffc5\034\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\052\uffc5\054\uffc5\060\uffc5" +
    "\061\uffc5\104\uffc5\106\uffc5\112\uffc5\113\uffc5\114\uffc5\116" +
    "\uffc5\120\uffc5\122\uffc5\125\uffc5\130\uffc5\001\002\000\004" +
    "\105\u016b\001\002\000\066\004\uffc0\007\uffc0\012\uffc0\013" +
    "\uffc0\024\uffc0\027\uffc0\033\uffc0\034\uffc0\045\uffc0\046\uffc0" +
    "\047\uffc0\050\uffc0\052\uffc0\054\uffc0\060\uffc0\061\uffc0\104" +
    "\uffc0\106\uffc0\112\uffc0\113\uffc0\114\uffc0\116\uffc0\120\uffc0" +
    "\122\uffc0\125\uffc0\130\uffc0\001\002\000\004\105\u016d\001" +
    "\002\000\066\004\uffc4\007\uffc4\012\uffc4\013\uffc4\024\uffc4" +
    "\027\uffc4\033\uffc4\034\uffc4\045\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\052\uffc4\054\uffc4\060\uffc4\061\uffc4\104\uffc4\106\uffc4" +
    "\112\uffc4\113\uffc4\114\uffc4\116\uffc4\120\uffc4\122\uffc4\125" +
    "\uffc4\130\uffc4\001\002\000\006\104\uff8e\105\uff8e\001\002" +
    "\000\026\004\077\012\062\034\035\045\055\052\053\061" +
    "\050\104\u0171\114\071\120\100\125\037\001\002\000\004" +
    "\104\u0175\001\002\000\004\057\u0172\001\002\000\060\004" +
    "\077\012\062\013\076\024\045\027\043\033\064\034\035" +
    "\045\055\046\056\047\075\050\041\052\053\054\034\061" +
    "\050\106\057\112\051\113\072\114\071\116\063\120\100" +
    "\122\060\125\037\130\052\001\002\000\062\004\077\012" +
    "\062\013\076\024\045\027\043\033\064\034\035\045\055" +
    "\046\056\047\075\050\041\052\053\054\034\060\u0174\061" +
    "\050\106\057\112\051\113\072\114\071\116\063\120\100" +
    "\122\060\125\037\130\052\001\002\000\004\002\ufff5\001" +
    "\002\000\004\057\u0176\001\002\000\060\004\077\012\062" +
    "\013\076\024\045\027\043\033\064\034\035\045\055\046" +
    "\056\047\075\050\041\052\053\054\034\061\050\106\057" +
    "\112\051\113\072\114\071\116\063\120\100\122\060\125" +
    "\037\130\052\001\002\000\062\004\077\012\062\013\076" +
    "\024\045\027\043\033\064\034\035\045\055\046\056\047" +
    "\075\050\041\052\053\054\034\060\u0178\061\050\106\057" +
    "\112\051\113\072\114\071\116\063\120\100\122\060\125" +
    "\037\130\052\001\002\000\004\002\ufff6\001\002\000\004" +
    "\104\u017a\001\002\000\004\057\u017b\001\002\000\060\004" +
    "\077\012\062\013\076\024\045\027\043\033\064\034\035" +
    "\045\055\046\056\047\075\050\041\052\053\054\034\061" +
    "\050\106\057\112\051\113\072\114\071\116\063\120\100" +
    "\122\060\125\037\130\052\001\002\000\062\004\077\012" +
    "\062\013\076\024\045\027\043\033\064\034\035\045\055" +
    "\046\056\047\075\050\041\052\053\054\034\060\u017d\061" +
    "\050\106\057\112\051\113\072\114\071\116\063\120\100" +
    "\122\060\125\037\130\052\001\002\000\004\002\ufff3\001" +
    "\002\000\006\066\u017f\132\u0180\001\002\000\006\047\u0181" +
    "\055\u0182\001\002\000\012\052\ufffb\062\ufffb\101\ufffb\126" +
    "\ufffb\001\002\000\006\065\u0184\107\u0185\001\002\000\004" +
    "\065\u0183\001\002\000\012\052\ufff9\062\ufff9\101\ufff9\126" +
    "\ufff9\001\002\000\012\052\ufffa\062\ufffa\101\ufffa\126\ufffa" +
    "\001\002\000\004\047\u0186\001\002\000\004\065\u0187\001" +
    "\002\000\012\052\ufffc\062\ufffc\101\ufffc\126\ufffc\001\002" +
    "\000\004\117\u0189\001\002\000\004\105\u018a\001\002\000" +
    "\006\052\026\062\025\001\002\000\004\002\ufff8\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0189\000\006\002\005\014\003\001\001\000\004\037" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\041\004\067\005\053\006\043\017\046\020" +
    "\073\021\045\023\072\025\060\030\065\032\037\034\066" +
    "\035\064\036\035\001\001\000\004\034\u016d\001\001\000" +
    "\004\013\u016b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\247\005" +
    "\243\006\240\017\242\020\251\021\241\023\250\025\244" +
    "\030\246\032\037\034\066\035\245\036\237\001\001\000" +
    "\004\034\u0150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\u0135\033\u0134" +
    "\001\001\000\002\001\001\000\004\013\u0132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\345\033\344\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\144\001\001\000" +
    "\006\013\102\033\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\125\001\001\000\002\001\001\000" +
    "\004\031\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\140\001\001\000\002\001\001\000\004\031" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\150\034\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\153\034\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\233\001\001\000\004\034" +
    "\231\001\001\000\002\001\001\000\004\034\227\001\001" +
    "\000\002\001\001\000\004\034\225\001\001\000\004\034" +
    "\223\001\001\000\004\034\206\001\001\000\004\022\217" +
    "\001\001\000\004\022\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\235\004\067\005\053" +
    "\006\043\017\046\020\073\021\045\023\072\025\060\030" +
    "\065\032\037\034\066\035\064\036\035\001\001\000\034" +
    "\004\247\005\243\006\240\017\242\020\251\021\241\023" +
    "\250\025\244\030\246\032\037\034\066\035\245\036\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\255\011\266\015" +
    "\260\034\264\001\001\000\002\001\001\000\006\011\326" +
    "\034\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\320\011\321\034\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\315\001\001\000\004\022" +
    "\312\001\001\000\004\012\270\001\001\000\002\001\001" +
    "\000\006\011\306\034\264\001\001\000\002\001\001\000" +
    "\012\010\255\011\266\015\303\034\264\001\001\000\002" +
    "\001\001\000\012\010\255\011\266\015\302\034\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\311\034\264\001\001\000\006" +
    "\011\307\034\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\270\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\333\011\321" +
    "\034\264\001\001\000\004\012\327\001\001\000\006\011" +
    "\331\034\264\001\001\000\006\011\332\034\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\255\011\266\015\340\034\264" +
    "\001\001\000\012\010\255\011\266\015\337\034\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\351\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\355\001\001\000\004\034\u0107\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\370\001\001\000" +
    "\002\001\001\000\036\003\362\004\067\005\053\006\043" +
    "\017\046\020\073\021\045\023\072\025\060\030\065\032" +
    "\037\034\066\035\064\036\035\001\001\000\034\004\247" +
    "\005\243\006\240\017\242\020\251\021\241\023\250\025" +
    "\244\030\246\032\037\034\066\035\245\036\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\373\004\067\005\053\006\043\017" +
    "\046\020\073\021\045\023\072\025\060\030\065\032\037" +
    "\034\066\035\064\036\035\001\001\000\034\004\247\005" +
    "\243\006\240\017\242\020\251\021\241\023\250\025\244" +
    "\030\246\032\037\034\066\035\245\036\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\377\004\067" +
    "\005\053\006\043\017\046\020\073\021\045\023\072\025" +
    "\060\030\065\032\037\034\066\035\064\036\035\001\001" +
    "\000\034\004\247\005\243\006\240\017\242\020\251\021" +
    "\241\023\250\025\244\030\246\032\037\034\066\035\245" +
    "\036\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\u0103\004\067\005\053\006\043\017\046\020\073" +
    "\021\045\023\072\025\060\030\065\032\037\034\066\035" +
    "\064\036\035\001\001\000\034\004\247\005\243\006\240" +
    "\017\242\020\251\021\241\023\250\025\244\030\246\032" +
    "\037\034\066\035\245\036\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\u010a\004\067\005\053\006\043" +
    "\017\046\020\073\021\045\023\072\025\060\030\065\032" +
    "\037\034\066\035\064\036\035\001\001\000\034\004\247" +
    "\005\243\006\240\017\242\020\251\021\241\023\250\025" +
    "\244\030\246\032\037\034\066\035\245\036\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\u010e\004" +
    "\067\005\053\006\043\017\046\020\073\021\045\023\072" +
    "\025\060\030\065\032\037\034\066\035\064\036\035\001" +
    "\001\000\034\004\247\005\243\006\240\017\242\020\251" +
    "\021\241\023\250\025\244\030\246\032\037\034\066\035" +
    "\245\036\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\u0112\004\067\005\053\006\043\017\046\020" +
    "\073\021\045\023\072\025\060\030\065\032\037\034\066" +
    "\035\064\036\035\001\001\000\034\004\247\005\243\006" +
    "\240\017\242\020\251\021\241\023\250\025\244\030\246" +
    "\032\037\034\066\035\245\036\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u011a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u011e\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\u0121\034\u0122\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\u0124\001\001\000\002\001" +
    "\001\000\004\034\u0127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\255\011\266\015\u012b\034\264\001\001\000\002\001\001" +
    "\000\006\017\u012d\034\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\u0130\004\067\005\053\006\043" +
    "\017\046\020\073\021\045\023\072\025\060\030\065\032" +
    "\037\034\066\035\064\036\035\001\001\000\034\004\247" +
    "\005\243\006\240\017\242\020\251\021\241\023\250\025" +
    "\244\030\246\032\037\034\066\035\245\036\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\255\011\266\015\u0139\034\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\u013c" +
    "\004\067\005\053\006\043\017\046\020\073\021\045\023" +
    "\072\025\060\030\065\032\037\034\066\035\064\036\035" +
    "\001\001\000\034\004\247\005\243\006\240\017\242\020" +
    "\251\021\241\023\250\025\244\030\246\032\037\034\066" +
    "\035\245\036\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0143\001\001\000\004\013\u0141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\u0147\034\u0149" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\u014c\034\u0149\001\001" +
    "\000\002\001\001\000\006\024\u014e\034\u0149\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\255\011\266\015\u0153\034\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\u0156" +
    "\004\067\005\053\006\043\017\046\020\073\021\045\023" +
    "\072\025\060\030\065\032\037\034\066\035\064\036\035" +
    "\001\001\000\034\004\247\005\243\006\240\017\242\020" +
    "\251\021\241\023\250\025\244\030\246\032\037\034\066" +
    "\035\245\036\237\001\001\000\002\001\001\000\004\005" +
    "\u015a\001\001\000\036\003\u015b\004\067\005\053\006\043" +
    "\017\046\020\073\021\045\023\072\025\060\030\065\032" +
    "\037\034\066\035\064\036\035\001\001\000\002\001\001" +
    "\000\034\004\247\005\243\006\240\017\242\020\251\021" +
    "\241\023\250\025\244\030\246\032\037\034\066\035\245" +
    "\036\237\001\001\000\002\001\001\000\004\013\u0169\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0161" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u0164\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\u016f\032\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\u0172" +
    "\004\067\005\053\006\043\017\046\020\073\021\045\023" +
    "\072\025\060\030\065\032\037\034\066\035\064\036\035" +
    "\001\001\000\034\004\247\005\243\006\240\017\242\020" +
    "\251\021\241\023\250\025\244\030\246\032\037\034\066" +
    "\035\245\036\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\u0176\004\067\005\053\006\043\017\046" +
    "\020\073\021\045\023\072\025\060\030\065\032\037\034" +
    "\066\035\064\036\035\001\001\000\034\004\247\005\243" +
    "\006\240\017\242\020\251\021\241\023\250\025\244\030" +
    "\246\032\037\034\066\035\245\036\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\u017b\004\067\005\053\006\043\017\046\020\073\021\045" +
    "\023\072\025\060\030\065\032\037\034\066\035\064\036" +
    "\035\001\001\000\034\004\247\005\243\006\240\017\242" +
    "\020\251\021\241\023\250\025\244\030\246\032\037\034" +
    "\066\035\245\036\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\u018a\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private Symbol error_symbol;
    private List<Symbol> identificadores = new ArrayList<Symbol>();

    //Metodo al que se llama automaticamente para algun error
    public void syntax_error(Symbol s){ 
        this.error_symbol = s;
    }
    public static void newScope(){
        typenames.push(new HashSet<String>());
    }
    public static void deleteScope(){
        typenames.pop();
    }
    public static boolean lookupType(String name){
        for (HashSet<String> scope: typenames)
            if (scope.contains(name)) return true;
        return false;
    }
    public static void addType(String name){
        typenames.peek().add(name);
    }
    public static LinkedList<HashSet<String>> typenames = new LinkedList<HashSet<String>>();
    public Symbol getErrorSymbol(){
        return this.error_symbol;
    }

    public Symbol getS(){
        return this.s;
    }

    public List<Symbol> getIdentificadores(){
        return this.identificadores;
    }
    
//Metodo al que se llama en el momento en que ya no es posible recuperacion de errores
public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception
{
    String lexema=s.value.toString();
    int fila=s.right;
    int columna=s.left;
    System.out.println(" !!! Error Sintactico  !!!!");
    System.out.println("\t\t Lexema : " +lexema);
    System.out.println("\t\t Fila : " +fila);
    System.out.println("\t\t Columna : " +columna);
    this.error_symbol = s;
    throw new Exception("!!! Error Sintactico  !!!!");
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SCANF ::= Scanf Parent_a STRING_LITERAL Coma BitAnd Identificador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // COMPLEMENTO ::= Identificador Coma COMPLEMENTO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COMPLEMENTO",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // COMPLEMENTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COMPLEMENTO",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // PRINTF ::= Printf Parent_a STRING_LITERAL Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // PRINTF ::= Printf Parent_a STRING_LITERAL Coma COMPLEMENTO Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Default DosPuntos SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Default DosPuntos SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CASE ::= CASE Case STRING_LITERAL DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CASE ::= CASE Case IDENTIFICADORES DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CASE ::= CASE Case Numero DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CASE ::= Case IDENTIFICADORES DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CASE ::= Case STRING_LITERAL DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CASE ::= Case Numero DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CIN ::= Cin DobleMayor ENTRADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ENTRADA ::= IDENTIFICADORES DobleMayor ENTRADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ENTRADA",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ENTRADA ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ENTRADA",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SALIDA ::= Endl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SALIDA ::= IDENTIFICADORES DobleMenor SALIDA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SALIDA ::= STRING_LITERAL DobleMenor SALIDA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SALIDA ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SALIDA ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // COUT ::= Cout DobleMenor SALIDA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // FOR ::= For Parent_a FOR_PARTE_UNO P_coma SENTENCIA_BOOLEANA_ANIDADA P_coma OPERACIONES_COMPLEMENTARIAS Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPERACIONES_COMPLEMENTARIAS ::= _System Parent_a STRING_LITERAL Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES ModuloIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES DivisionIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MultiplicacionIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MenosIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MasIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES ModuloIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES DivisionIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MultiplicacionIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MenosIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MasIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Decremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPERACIONES_COMPLEMENTARIAS ::= Decremento IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPERACIONES_COMPLEMENTARIAS ::= Incremento IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OPERACIONES_COMPLEMENTARIAS ::= Return Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IDENTIFICADORES ::= Identificador Corchete_a Numero Corchete_c Identificador Corchete_a Identificador Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FOR_PARTE_UNO ::= Int IDENTIFICADORES Igual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FOR_PARTE_UNO ::= IDENTIFICADORES Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FOR_PARTE_UNO ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FOR_PARTE_UNO ::= Int IDENTIFICADORES Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE O_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE Y_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA O_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA Y_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_BOOLEANA_COMPUESTA ::= Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_BOOLEANA_SIMPLE ::= Parent_a SENTENCIA_BOOLEANA_SIMPLE Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_BOOLEANA_SIMPLE ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_BOOLEANA_SIMPLE ::= False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_BOOLEANA_SIMPLE ::= True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERADORES_RELACIONALES ::= MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERADORES_RELACIONALES ::= MenorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERADORES_RELACIONALES ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERADORES_RELACIONALES ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERADORES_RELACIONALES ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERADORES_RELACIONALES ::= ComparadorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERADORES_RELACIONALES ::= BitAnd 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERADORES_RELACIONALES ::= BitOr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERADORES_ARITMETICOS ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERADORES_ARITMETICOS ::= Division 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERADORES_ARITMETICOS ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERADORES_ARITMETICOS ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERADORES_ARITMETICOS ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= DECLARACION_ARREGLO_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Bool DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= _String DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Unsigned Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Float DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Long Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Unsigned Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Unsigned Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Unsigned Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_ANIDADA ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_ANIDADA ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_ANIDADA ::= Identificador Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_ANIDADA ::= Identificador Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_ANIDADA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_ARREGLO ::= Identificador Corchete_a Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_ARREGLO ::= Identificador Corchete_a Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_ARREGLO_ANIDADA ::= Char DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_ARREGLO_ANIDADA ::= _String DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_ARREGLO_ANIDADA ::= Int DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CREACION_ARREGLO ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CREACION_ARREGLO ::= STRING_LITERAL Coma CREACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CREACION_ARREGLO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CREACION_ARREGLO ::= Numero Coma CREACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= SENTENCIA SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= OPERACIONES_COMPLEMENTARIAS P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA OPERACIONES_COMPLEMENTARIAS P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION_FUNCION ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION_FUNCION ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION_FUNCION ::= Int Identificador Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION_FUNCION ::= Int Identificador Parent_a DECLARACION Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FUNCION",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= IMPORTACION DECLARACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= IMPORTACION Using Namespace Std P_coma DECLARACION_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Iostream MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTACION ::= IMPORTACION Numeral Include STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTACION ::= Numeral Include MenorQue Iostream MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACION ::= Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTACION ::= Numeral Include STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // IMPORTACION ::= Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

