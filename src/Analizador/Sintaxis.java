
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Aug 13 22:55:51 COT 2022
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Aug 13 22:55:51 COT 2022
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\246\000\002\002\004\000\002\014\011\000\002\014" +
    "\005\000\002\014\007\000\002\014\007\000\002\014\012" +
    "\000\002\014\006\000\002\014\010\000\002\014\010\000" +
    "\002\002\016\000\002\002\012\000\002\002\011\000\002" +
    "\002\010\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\005\000\002\003\004\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\013\005\000\002\013\007\000\002\013\005\000\002" +
    "\013\007\000\002\013\005\000\002\013\005\000\002\013" +
    "\007\000\002\013\007\000\002\013\005\000\002\013\005" +
    "\000\002\013\003\000\002\031\005\000\002\031\003\000" +
    "\002\031\005\000\002\031\003\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\033\013\000\002\033" +
    "\011\000\002\033\014\000\002\033\012\000\002\033\010" +
    "\000\002\033\006\000\002\004\005\000\002\004\006\000" +
    "\002\004\006\000\002\004\007\000\002\004\006\000\002" +
    "\004\007\000\002\004\005\000\002\004\006\000\002\004" +
    "\005\000\002\004\005\000\002\004\006\000\002\004\005" +
    "\000\002\004\005\000\002\004\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\003\000\002\011\003\000\002\011\005\000\002\010\006" +
    "\000\002\010\005\000\002\010\006\000\002\010\007\000" +
    "\002\010\005\000\002\010\006\000\002\010\004\000\002" +
    "\015\003\000\002\015\003\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\005\011" +
    "\000\002\005\015\000\002\005\013\000\002\016\006\000" +
    "\002\016\003\000\002\016\005\000\002\016\006\000\002" +
    "\034\003\000\002\034\012\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\007\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\007\000\002\017\007\000\002\017\007\000" +
    "\002\017\006\000\002\006\015\000\002\020\011\000\002" +
    "\021\013\000\002\023\006\000\002\024\003\000\002\024" +
    "\003\000\002\024\005\000\002\024\005\000\002\024\003" +
    "\000\002\026\003\000\002\026\005\000\002\025\006\000" +
    "\002\027\010\000\002\027\010\000\002\027\010\000\002" +
    "\027\011\000\002\027\011\000\002\027\011\000\002\030" +
    "\016\000\002\030\014\000\002\030\011\000\002\035\011" +
    "\000\002\035\007\000\002\007\003\000\002\007\005\000" +
    "\002\036\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0195\000\010\052\010\062\005\100\006\001\002\000" +
    "\010\052\u017d\100\u017c\125\u017b\001\002\000\004\102\u0176" +
    "\001\002\000\004\053\u016c\001\002\000\004\002\u016b\001" +
    "\002\000\004\062\011\001\002\000\004\102\012\001\002" +
    "\000\004\103\013\001\002\000\004\057\014\001\002\000" +
    "\060\004\060\012\043\013\057\024\026\027\024\033\045" +
    "\034\017\045\036\046\037\047\056\050\022\052\034\054" +
    "\015\061\030\105\040\111\032\112\053\113\052\115\044" +
    "\117\061\121\041\124\020\127\033\001\002\000\004\047" +
    "\056\001\002\000\064\004\uffdf\007\uffdf\012\uffdf\013\uffdf" +
    "\024\uffdf\027\uffdf\033\uffdf\034\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\052\uffdf\054\uffdf\060\uffdf\061\uffdf\105\uffdf" +
    "\111\uffdf\112\uffdf\113\uffdf\115\uffdf\117\uffdf\121\uffdf\124" +
    "\uffdf\127\uffdf\001\002\000\004\047\077\001\002\000\012" +
    "\012\u015a\052\u015d\061\u015b\113\u015c\001\002\000\064\004" +
    "\uffb9\007\uffb9\012\uffb9\013\uffb9\024\uffb9\027\uffb9\033\uffb9" +
    "\034\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\052\uffb9\054" +
    "\uffb9\060\uffb9\061\uffb9\105\uffb9\111\uffb9\112\uffb9\113\uffb9" +
    "\115\uffb9\117\uffb9\121\uffb9\124\uffb9\127\uffb9\001\002\000" +
    "\004\102\u014f\001\002\000\062\004\060\012\043\013\057" +
    "\024\026\027\024\033\045\034\017\045\036\046\037\047" +
    "\056\050\022\052\034\054\015\060\u014e\061\030\105\040" +
    "\111\032\112\053\113\052\115\044\117\061\121\041\124" +
    "\020\127\033\001\002\000\004\047\056\001\002\000\064" +
    "\004\uffef\007\uffef\012\uffef\013\uffef\024\uffef\027\uffef\033" +
    "\uffef\034\uffef\045\uffef\046\uffef\047\uffef\050\uffef\052\uffef" +
    "\054\uffef\060\uffef\061\uffef\105\uffef\111\uffef\112\uffef\113" +
    "\uffef\115\uffef\117\uffef\121\uffef\124\uffef\127\uffef\001\002" +
    "\000\004\036\u0143\001\002\000\064\004\uffeb\007\uffeb\012" +
    "\uffeb\013\uffeb\024\uffeb\027\uffeb\033\uffeb\034\uffeb\045\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\052\uffeb\054\uffeb\060\uffeb\061" +
    "\uffeb\105\uffeb\111\uffeb\112\uffeb\113\uffeb\115\uffeb\117\uffeb" +
    "\121\uffeb\124\uffeb\127\uffeb\001\002\000\006\034\u013d\052" +
    "\u013e\001\002\000\004\104\u013c\001\002\000\004\077\u013b" +
    "\001\002\000\004\102\u0135\001\002\000\004\047\063\001" +
    "\002\000\064\004\ufff1\007\ufff1\012\ufff1\013\ufff1\024\ufff1" +
    "\027\ufff1\033\ufff1\034\ufff1\045\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\052\ufff1\054\ufff1\060\ufff1\061\ufff1\105\ufff1\111\ufff1" +
    "\112\ufff1\113\ufff1\115\ufff1\117\ufff1\121\ufff1\124\ufff1\127" +
    "\ufff1\001\002\000\004\047\077\001\002\000\004\102\u011d" +
    "\001\002\000\004\102\u0112\001\002\000\004\102\345\001" +
    "\002\000\064\004\uffe5\007\uffe5\012\uffe5\013\uffe5\024\uffe5" +
    "\027\uffe5\033\uffe5\034\uffe5\045\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\052\uffe5\054\uffe5\060\uffe5\061\uffe5\105\uffe5\111\uffe5" +
    "\112\uffe5\113\uffe5\115\uffe5\117\uffe5\121\uffe5\124\uffe5\127" +
    "\uffe5\001\002\000\004\047\063\001\002\000\004\102\336" +
    "\001\002\000\004\057\231\001\002\000\064\004\uffe1\007" +
    "\uffe1\012\uffe1\013\uffe1\024\uffe1\027\uffe1\033\uffe1\034\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\050\uffe1\052\uffe1\054\uffe1\060" +
    "\uffe1\061\uffe1\105\uffe1\111\uffe1\112\uffe1\113\uffe1\115\uffe1" +
    "\117\uffe1\121\uffe1\124\uffe1\127\uffe1\001\002\000\064\004" +
    "\uffe3\007\uffe3\012\uffe3\013\uffe3\024\uffe3\027\uffe3\033\uffe3" +
    "\034\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\052\uffe3\054" +
    "\uffe3\060\uffe3\061\uffe3\105\uffe3\111\uffe3\112\uffe3\113\uffe3" +
    "\115\uffe3\117\uffe3\121\uffe3\124\uffe3\127\uffe3\001\002\000" +
    "\022\027\176\032\175\051\201\054\174\063\172\064\200" +
    "\072\173\074\177\001\002\000\064\004\ufff3\007\ufff3\012" +
    "\ufff3\013\ufff3\024\ufff3\027\ufff3\033\ufff3\034\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\050\ufff3\052\ufff3\054\ufff3\060\ufff3\061" +
    "\ufff3\105\ufff3\111\ufff3\112\ufff3\113\ufff3\115\ufff3\117\ufff3" +
    "\121\ufff3\124\ufff3\127\ufff3\001\002\000\004\052\167\001" +
    "\002\000\004\102\160\001\002\000\064\004\uffe7\007\uffe7" +
    "\012\uffe7\013\uffe7\024\uffe7\027\uffe7\033\uffe7\034\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\052\uffe7\054\uffe7\060\uffe7" +
    "\061\uffe7\105\uffe7\111\uffe7\112\uffe7\113\uffe7\115\uffe7\117" +
    "\uffe7\121\uffe7\124\uffe7\127\uffe7\001\002\000\064\004\uffed" +
    "\007\uffed\012\uffed\013\uffed\024\uffed\027\uffed\033\uffed\034" +
    "\uffed\045\uffed\046\uffed\047\uffed\050\uffed\052\uffed\054\uffed" +
    "\060\uffed\061\uffed\105\uffed\111\uffed\112\uffed\113\uffed\115" +
    "\uffed\117\uffed\121\uffed\124\uffed\127\uffed\001\002\000\074" +
    "\005\uff8d\006\uff8d\017\uff8d\022\151\027\uff8d\030\uff8d\031" +
    "\uff8d\032\uff8d\035\uff8d\036\uff8d\037\uff8d\051\uff8d\054\uff8d" +
    "\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070\uff8d\071" +
    "\uff8d\072\uff8d\073\uff8d\074\uff8d\101\uff8d\103\uff8d\104\uff8d" +
    "\110\uff8d\114\uff8d\130\uff8d\001\002\000\004\035\143\001" +
    "\002\000\004\047\077\001\002\000\004\047\063\001\002" +
    "\000\004\104\140\001\002\000\012\014\066\022\067\051" +
    "\070\104\uffd4\001\002\000\004\104\065\001\002\000\064" +
    "\004\uffbb\007\uffbb\012\uffbb\013\uffbb\024\uffbb\027\uffbb\033" +
    "\uffbb\034\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\052\uffbb" +
    "\054\uffbb\060\uffbb\061\uffbb\105\uffbb\111\uffbb\112\uffbb\113" +
    "\uffbb\115\uffbb\117\uffbb\121\uffbb\124\uffbb\127\uffbb\001\002" +
    "\000\004\047\077\001\002\000\006\023\110\077\107\001" +
    "\002\000\014\044\072\047\074\077\071\123\073\131\075" +
    "\001\002\000\006\014\105\104\uffde\001\002\000\006\014" +
    "\103\104\uffd5\001\002\000\006\014\101\104\uffd6\001\002" +
    "\000\004\104\uffd9\001\002\000\006\014\076\104\uffdc\001" +
    "\002\000\004\047\077\001\002\000\010\014\066\051\070" +
    "\104\uffd4\001\002\000\004\104\uffdb\001\002\000\004\047" +
    "\077\001\002\000\004\104\uffd8\001\002\000\004\047\077" +
    "\001\002\000\004\104\uffd7\001\002\000\004\047\077\001" +
    "\002\000\004\104\uffdd\001\002\000\004\023\126\001\002" +
    "\000\004\051\111\001\002\000\004\057\112\001\002\000" +
    "\006\077\113\131\114\001\002\000\006\014\124\060\uffd2" +
    "\001\002\000\006\014\122\060\uffd0\001\002\000\004\060" +
    "\116\001\002\000\006\014\117\104\uffcb\001\002\000\004" +
    "\047\121\001\002\000\004\104\uffcc\001\002\000\004\022" +
    "\067\001\002\000\006\077\113\131\114\001\002\000\004" +
    "\060\uffd1\001\002\000\006\077\113\131\114\001\002\000" +
    "\004\060\uffd3\001\002\000\010\014\127\051\130\104\uffc7" +
    "\001\002\000\004\047\121\001\002\000\004\057\131\001" +
    "\002\000\006\077\113\131\114\001\002\000\004\060\133" +
    "\001\002\000\006\014\134\104\uffc9\001\002\000\004\047" +
    "\121\001\002\000\004\104\uffca\001\002\000\004\104\uffc8" +
    "\001\002\000\004\104\uffda\001\002\000\064\004\uffce\007" +
    "\uffce\012\uffce\013\uffce\024\uffce\027\uffce\033\uffce\034\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\052\uffce\054\uffce\060" +
    "\uffce\061\uffce\105\uffce\111\uffce\112\uffce\113\uffce\115\uffce" +
    "\117\uffce\121\uffce\124\uffce\127\uffce\001\002\000\004\104" +
    "\142\001\002\000\064\004\uffba\007\uffba\012\uffba\013\uffba" +
    "\024\uffba\027\uffba\033\uffba\034\uffba\045\uffba\046\uffba\047" +
    "\uffba\050\uffba\052\uffba\054\uffba\060\uffba\061\uffba\105\uffba" +
    "\111\uffba\112\uffba\113\uffba\115\uffba\117\uffba\121\uffba\124" +
    "\uffba\127\uffba\001\002\000\004\047\056\001\002\000\006" +
    "\035\147\104\uff6c\001\002\000\004\104\146\001\002\000" +
    "\064\004\uff6a\007\uff6a\012\uff6a\013\uff6a\024\uff6a\027\uff6a" +
    "\033\uff6a\034\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a\052" +
    "\uff6a\054\uff6a\060\uff6a\061\uff6a\105\uff6a\111\uff6a\112\uff6a" +
    "\113\uff6a\115\uff6a\117\uff6a\121\uff6a\124\uff6a\127\uff6a\001" +
    "\002\000\004\047\056\001\002\000\004\104\uff6b\001\002" +
    "\000\004\077\152\001\002\000\004\023\153\001\002\000" +
    "\004\047\154\001\002\000\004\022\155\001\002\000\004" +
    "\047\156\001\002\000\004\023\157\001\002\000\072\005" +
    "\uff8c\006\uff8c\017\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c" +
    "\035\uff8c\036\uff8c\037\uff8c\051\uff8c\054\uff8c\063\uff8c\064" +
    "\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c" +
    "\073\uff8c\074\uff8c\101\uff8c\103\uff8c\104\uff8c\110\uff8c\114" +
    "\uff8c\130\uff8c\001\002\000\004\131\161\001\002\000\004" +
    "\014\162\001\002\000\004\005\163\001\002\000\004\047" +
    "\164\001\002\000\004\103\165\001\002\000\004\104\166" +
    "\001\002\000\064\004\uff5c\007\uff5c\012\uff5c\013\uff5c\024" +
    "\uff5c\027\uff5c\033\uff5c\034\uff5c\045\uff5c\046\uff5c\047\uff5c" +
    "\050\uff5c\052\uff5c\054\uff5c\060\uff5c\061\uff5c\105\uff5c\111" +
    "\uff5c\112\uff5c\113\uff5c\115\uff5c\117\uff5c\121\uff5c\124\uff5c" +
    "\127\uff5c\001\002\000\004\047\077\001\002\000\004\104" +
    "\171\001\002\000\064\004\uffc4\007\uffc4\012\uffc4\013\uffc4" +
    "\024\uffc4\027\uffc4\033\uffc4\034\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\050\uffc4\052\uffc4\054\uffc4\060\uffc4\061\uffc4\105\uffc4" +
    "\111\uffc4\112\uffc4\113\uffc4\115\uffc4\117\uffc4\121\uffc4\124" +
    "\uffc4\127\uffc4\001\002\000\006\047\056\077\227\001\002" +
    "\000\006\047\056\077\225\001\002\000\006\103\uff88\104" +
    "\uff88\001\002\000\006\047\056\077\223\001\002\000\006" +
    "\103\uff87\104\uff87\001\002\000\006\047\056\077\221\001" +
    "\002\000\006\047\056\077\217\001\002\000\006\047\056" +
    "\077\202\001\002\000\020\031\204\071\205\073\211\103" +
    "\uff7a\104\uff7a\110\207\114\210\001\002\000\020\031\204" +
    "\071\205\073\211\103\uff81\104\uff81\110\207\114\210\001" +
    "\002\000\006\047\uffb5\077\uffb5\001\002\000\006\047\uffb4" +
    "\077\uffb4\001\002\000\006\047\056\077\212\001\002\000" +
    "\006\047\uffb7\077\uffb7\001\002\000\006\047\uffb8\077\uffb8" +
    "\001\002\000\006\047\uffb6\077\uffb6\001\002\000\006\103" +
    "\uff78\104\uff78\001\002\000\006\103\uff80\104\uff80\001\002" +
    "\000\006\047\056\077\215\001\002\000\006\103\uff77\104" +
    "\uff77\001\002\000\006\103\uff79\104\uff79\001\002\000\006" +
    "\103\uff7e\104\uff7e\001\002\000\006\103\uff85\104\uff85\001" +
    "\002\000\006\103\uff7d\104\uff7d\001\002\000\006\103\uff84" +
    "\104\uff84\001\002\000\006\103\uff7c\104\uff7c\001\002\000" +
    "\006\103\uff83\104\uff83\001\002\000\006\103\uff7b\104\uff7b" +
    "\001\002\000\006\103\uff82\104\uff82\001\002\000\006\103" +
    "\uff7f\104\uff7f\001\002\000\006\103\uff86\104\uff86\001\002" +
    "\000\060\004\060\012\043\013\057\024\026\027\024\033" +
    "\045\034\017\045\036\046\037\047\056\050\022\052\034" +
    "\054\015\061\030\105\040\111\032\112\053\113\052\115" +
    "\044\117\061\121\041\124\020\127\033\001\002\000\062" +
    "\004\060\012\043\013\057\024\026\027\024\033\045\034" +
    "\017\045\036\046\037\047\056\050\022\052\034\054\015" +
    "\060\233\061\030\105\040\111\032\112\053\113\052\115" +
    "\044\117\061\121\041\124\020\127\033\001\002\000\004" +
    "\127\250\001\002\000\064\004\uffe0\007\uffe0\012\uffe0\013" +
    "\uffe0\024\uffe0\027\uffe0\033\uffe0\034\uffe0\045\uffe0\046\uffe0" +
    "\047\uffe0\050\uffe0\052\uffe0\054\uffe0\060\uffe0\061\uffe0\105" +
    "\uffe0\111\uffe0\112\uffe0\113\uffe0\115\uffe0\117\uffe0\121\uffe0" +
    "\124\uffe0\127\uffe0\001\002\000\064\004\ufff0\007\ufff0\012" +
    "\ufff0\013\ufff0\024\ufff0\027\ufff0\033\ufff0\034\ufff0\045\ufff0" +
    "\046\ufff0\047\ufff0\050\ufff0\052\ufff0\054\ufff0\060\ufff0\061" +
    "\ufff0\105\ufff0\111\ufff0\112\ufff0\113\ufff0\115\ufff0\117\ufff0" +
    "\121\ufff0\124\ufff0\127\ufff0\001\002\000\064\004\uffec\007" +
    "\uffec\012\uffec\013\uffec\024\uffec\027\uffec\033\uffec\034\uffec" +
    "\045\uffec\046\uffec\047\uffec\050\uffec\052\uffec\054\uffec\060" +
    "\uffec\061\uffec\105\uffec\111\uffec\112\uffec\113\uffec\115\uffec" +
    "\117\uffec\121\uffec\124\uffec\127\uffec\001\002\000\004\104" +
    "\247\001\002\000\064\004\ufff2\007\ufff2\012\ufff2\013\ufff2" +
    "\024\ufff2\027\ufff2\033\ufff2\034\ufff2\045\ufff2\046\ufff2\047" +
    "\ufff2\050\ufff2\052\ufff2\054\ufff2\060\ufff2\061\ufff2\105\ufff2" +
    "\111\ufff2\112\ufff2\113\ufff2\115\ufff2\117\ufff2\121\ufff2\124" +
    "\ufff2\127\ufff2\001\002\000\064\004\uffe6\007\uffe6\012\uffe6" +
    "\013\uffe6\024\uffe6\027\uffe6\033\uffe6\034\uffe6\045\uffe6\046" +
    "\uffe6\047\uffe6\050\uffe6\052\uffe6\054\uffe6\060\uffe6\061\uffe6" +
    "\105\uffe6\111\uffe6\112\uffe6\113\uffe6\115\uffe6\117\uffe6\121" +
    "\uffe6\124\uffe6\127\uffe6\001\002\000\064\004\uffe2\007\uffe2" +
    "\012\uffe2\013\uffe2\024\uffe2\027\uffe2\033\uffe2\034\uffe2\045" +
    "\uffe2\046\uffe2\047\uffe2\050\uffe2\052\uffe2\054\uffe2\060\uffe2" +
    "\061\uffe2\105\uffe2\111\uffe2\112\uffe2\113\uffe2\115\uffe2\117" +
    "\uffe2\121\uffe2\124\uffe2\127\uffe2\001\002\000\064\004\uffe4" +
    "\007\uffe4\012\uffe4\013\uffe4\024\uffe4\027\uffe4\033\uffe4\034" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\052\uffe4\054\uffe4" +
    "\060\uffe4\061\uffe4\105\uffe4\111\uffe4\112\uffe4\113\uffe4\115" +
    "\uffe4\117\uffe4\121\uffe4\124\uffe4\127\uffe4\001\002\000\064" +
    "\004\ufff4\007\ufff4\012\ufff4\013\ufff4\024\ufff4\027\ufff4\033" +
    "\ufff4\034\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\052\ufff4" +
    "\054\ufff4\060\ufff4\061\ufff4\105\ufff4\111\ufff4\112\ufff4\113" +
    "\ufff4\115\ufff4\117\ufff4\121\ufff4\124\ufff4\127\ufff4\001\002" +
    "\000\064\004\uffe8\007\uffe8\012\uffe8\013\uffe8\024\uffe8\027" +
    "\uffe8\033\uffe8\034\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\052\uffe8\054\uffe8\060\uffe8\061\uffe8\105\uffe8\111\uffe8\112" +
    "\uffe8\113\uffe8\115\uffe8\117\uffe8\121\uffe8\124\uffe8\127\uffe8" +
    "\001\002\000\064\004\uffee\007\uffee\012\uffee\013\uffee\024" +
    "\uffee\027\uffee\033\uffee\034\uffee\045\uffee\046\uffee\047\uffee" +
    "\050\uffee\052\uffee\054\uffee\060\uffee\061\uffee\105\uffee\111" +
    "\uffee\112\uffee\113\uffee\115\uffee\117\uffee\121\uffee\124\uffee" +
    "\127\uffee\001\002\000\064\004\uffea\007\uffea\012\uffea\013" +
    "\uffea\024\uffea\027\uffea\033\uffea\034\uffea\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\052\uffea\054\uffea\060\uffea\061\uffea\105" +
    "\uffea\111\uffea\112\uffea\113\uffea\115\uffea\117\uffea\121\uffea" +
    "\124\uffea\127\uffea\001\002\000\004\102\251\001\002\000" +
    "\020\044\257\047\056\076\253\077\262\102\256\123\260" +
    "\131\254\001\002\000\012\101\332\103\uff9a\104\uff9a\130" +
    "\333\001\002\000\016\044\257\047\056\077\262\102\322" +
    "\123\260\131\254\001\002\000\032\005\uffa3\006\uffa3\017" +
    "\uffa3\030\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\101\uffa3" +
    "\103\uffa3\104\uffa3\130\uffa3\001\002\000\004\103\320\001" +
    "\002\000\020\044\257\047\056\076\253\077\262\102\256" +
    "\123\260\131\254\001\002\000\032\005\uffaa\006\uffaa\017" +
    "\uffaa\030\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\101\uffaa" +
    "\103\uffaa\104\uffaa\130\uffaa\001\002\000\032\005\uffab\006" +
    "\uffab\017\uffab\030\uffab\065\uffab\066\uffab\067\uffab\070\uffab" +
    "\101\uffab\103\uffab\104\uffab\130\uffab\001\002\000\044\005" +
    "\uffa9\006\uffa9\017\uffa9\030\uffa9\031\204\065\uffa9\066\uffa9" +
    "\067\uffa9\070\uffa9\071\205\073\211\101\uffa9\103\uffa9\104" +
    "\uffa9\110\207\114\210\130\uffa9\001\002\000\044\005\uffa4" +
    "\006\uffa4\017\uffa4\030\uffa4\031\204\065\uffa4\066\uffa4\067" +
    "\uffa4\070\uffa4\071\205\073\211\101\uffa4\103\uffa4\104\uffa4" +
    "\110\207\114\210\130\uffa4\001\002\000\032\005\266\006" +
    "\272\017\276\030\275\065\265\066\274\067\273\070\270" +
    "\101\267\103\uff99\104\uff99\130\271\001\002\000\020\044" +
    "\257\047\056\076\301\077\262\102\302\123\260\131\254" +
    "\001\002\000\020\044\uffac\047\uffac\076\uffac\077\uffac\102" +
    "\uffac\123\uffac\131\uffac\001\002\000\020\044\uffb2\047\uffb2" +
    "\076\uffb2\077\uffb2\102\uffb2\123\uffb2\131\uffb2\001\002\000" +
    "\020\044\257\047\056\076\253\077\262\102\256\123\260" +
    "\131\254\001\002\000\020\044\uffb0\047\uffb0\076\uffb0\077" +
    "\uffb0\102\uffb0\123\uffb0\131\uffb0\001\002\000\020\044\257" +
    "\047\056\076\253\077\262\102\256\123\260\131\254\001" +
    "\002\000\020\044\uffb3\047\uffb3\076\uffb3\077\uffb3\102\uffb3" +
    "\123\uffb3\131\uffb3\001\002\000\020\044\uffaf\047\uffaf\076" +
    "\uffaf\077\uffaf\102\uffaf\123\uffaf\131\uffaf\001\002\000\020" +
    "\044\uffad\047\uffad\076\uffad\077\uffad\102\uffad\123\uffad\131" +
    "\uffad\001\002\000\020\044\uffae\047\uffae\076\uffae\077\uffae" +
    "\102\uffae\123\uffae\131\uffae\001\002\000\020\044\uffb1\047" +
    "\uffb1\076\uffb1\077\uffb1\102\uffb1\123\uffb1\131\uffb1\001\002" +
    "\000\006\103\uff96\104\uff96\001\002\000\006\103\uff95\104" +
    "\uff95\001\002\000\016\044\257\047\056\077\262\102\302" +
    "\123\260\131\254\001\002\000\016\044\257\047\056\077" +
    "\262\102\302\123\260\131\254\001\002\000\012\101\uffa0" +
    "\103\uffa0\104\uffa0\130\uffa0\001\002\000\004\103\305\001" +
    "\002\000\032\005\uffa2\006\uffa2\017\uffa2\030\uffa2\065\uffa2" +
    "\066\uffa2\067\uffa2\070\uffa2\101\uffa2\103\uffa2\104\uffa2\130" +
    "\uffa2\001\002\000\012\101\uff9f\103\uff9f\104\uff9f\130\uff9f" +
    "\001\002\000\006\047\056\077\310\001\002\000\032\005" +
    "\uffa5\006\uffa5\017\uffa5\030\uffa5\065\uffa5\066\uffa5\067\uffa5" +
    "\070\uffa5\101\uffa5\103\uffa5\104\uffa5\130\uffa5\001\002\000" +
    "\032\005\uffa6\006\uffa6\017\uffa6\030\uffa6\065\uffa6\066\uffa6" +
    "\067\uffa6\070\uffa6\101\uffa6\103\uffa6\104\uffa6\130\uffa6\001" +
    "\002\000\006\047\056\077\313\001\002\000\032\005\uffa7" +
    "\006\uffa7\017\uffa7\030\uffa7\065\uffa7\066\uffa7\067\uffa7\070" +
    "\uffa7\101\uffa7\103\uffa7\104\uffa7\130\uffa7\001\002\000\032" +
    "\005\uffa8\006\uffa8\017\uffa8\030\uffa8\065\uffa8\066\uffa8\067" +
    "\uffa8\070\uffa8\101\uffa8\103\uffa8\104\uffa8\130\uffa8\001\002" +
    "\000\004\103\317\001\002\000\024\005\266\006\272\017" +
    "\276\030\275\065\265\066\274\067\273\070\270\103\305" +
    "\001\002\000\012\101\uff9d\103\uff9d\104\uff9d\130\uff9d\001" +
    "\002\000\004\104\321\001\002\000\064\004\uff73\007\uff73" +
    "\012\uff73\013\uff73\024\uff73\027\uff73\033\uff73\034\uff73\045" +
    "\uff73\046\uff73\047\uff73\050\uff73\052\uff73\054\uff73\060\uff73" +
    "\061\uff73\105\uff73\111\uff73\112\uff73\113\uff73\115\uff73\117" +
    "\uff73\121\uff73\124\uff73\127\uff73\001\002\000\020\044\257" +
    "\047\056\076\253\077\262\102\256\123\260\131\254\001" +
    "\002\000\032\005\266\006\272\017\276\030\275\065\265" +
    "\066\274\067\273\070\270\101\uff9b\103\uff9b\104\uff9b\130" +
    "\uff9b\001\002\000\020\044\257\047\056\076\325\077\262" +
    "\102\302\123\260\131\254\001\002\000\016\044\257\047" +
    "\056\077\262\102\302\123\260\131\254\001\002\000\012" +
    "\101\uffa1\103\uffa1\104\uffa1\130\uffa1\001\002\000\012\101" +
    "\uff9e\103\uff9e\104\uff9e\130\uff9e\001\002\000\004\103\331" +
    "\001\002\000\012\101\uff9c\103\uff9c\104\uff9c\130\uff9c\001" +
    "\002\000\020\044\257\047\056\076\253\077\262\102\256" +
    "\123\260\131\254\001\002\000\020\044\257\047\056\076" +
    "\253\077\262\102\256\123\260\131\254\001\002\000\006" +
    "\103\uff98\104\uff98\001\002\000\006\103\uff97\104\uff97\001" +
    "\002\000\004\131\337\001\002\000\004\103\340\001\002" +
    "\000\006\103\uff76\104\uff76\001\002\000\004\104\344\001" +
    "\002\000\004\104\343\001\002\000\064\004\uffbd\007\uffbd" +
    "\012\uffbd\013\uffbd\024\uffbd\027\uffbd\033\uffbd\034\uffbd\045" +
    "\uffbd\046\uffbd\047\uffbd\050\uffbd\052\uffbd\054\uffbd\060\uffbd" +
    "\061\uffbd\105\uffbd\111\uffbd\112\uffbd\113\uffbd\115\uffbd\117" +
    "\uffbd\121\uffbd\124\uffbd\127\uffbd\001\002\000\064\004\uffcd" +
    "\007\uffcd\012\uffcd\013\uffcd\024\uffcd\027\uffcd\033\uffcd\034" +
    "\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\052\uffcd\054\uffcd" +
    "\060\uffcd\061\uffcd\105\uffcd\111\uffcd\112\uffcd\113\uffcd\115" +
    "\uffcd\117\uffcd\121\uffcd\124\uffcd\127\uffcd\001\002\000\004" +
    "\047\056\001\002\000\004\103\347\001\002\000\004\057" +
    "\350\001\002\000\004\011\351\001\002\000\010\047\056" +
    "\077\u0103\131\u0105\001\002\000\010\011\355\025\354\060" +
    "\353\001\002\000\064\004\uff61\007\uff61\012\uff61\013\uff61" +
    "\024\uff61\027\uff61\033\uff61\034\uff61\045\uff61\046\uff61\047" +
    "\uff61\050\uff61\052\uff61\054\uff61\060\uff61\061\uff61\105\uff61" +
    "\111\uff61\112\uff61\113\uff61\115\uff61\117\uff61\121\uff61\124" +
    "\uff61\127\uff61\001\002\000\004\037\375\001\002\000\010" +
    "\047\056\077\356\131\360\001\002\000\004\037\371\001" +
    "\002\000\004\037\365\001\002\000\004\037\361\001\002" +
    "\000\060\004\060\012\043\013\057\024\026\027\024\033" +
    "\045\034\017\045\036\046\037\047\056\050\022\052\034" +
    "\054\015\061\030\105\040\111\032\112\053\113\052\115" +
    "\044\117\061\121\041\124\020\127\033\001\002\000\062" +
    "\004\060\007\363\012\043\013\057\024\026\027\024\033" +
    "\045\034\017\045\036\046\037\047\056\050\022\052\034" +
    "\054\015\061\030\105\040\111\032\112\053\113\052\115" +
    "\044\117\061\121\041\124\020\127\033\001\002\000\004" +
    "\104\364\001\002\000\010\011\uff64\025\uff64\060\uff64\001" +
    "\002\000\060\004\060\012\043\013\057\024\026\027\024" +
    "\033\045\034\017\045\036\046\037\047\056\050\022\052" +
    "\034\054\015\061\030\105\040\111\032\112\053\113\052" +
    "\115\044\117\061\121\041\124\020\127\033\001\002\000" +
    "\062\004\060\007\367\012\043\013\057\024\026\027\024" +
    "\033\045\034\017\045\036\046\037\047\056\050\022\052" +
    "\034\054\015\061\030\105\040\111\032\112\053\113\052" +
    "\115\044\117\061\121\041\124\020\127\033\001\002\000" +
    "\004\104\370\001\002\000\010\011\uff65\025\uff65\060\uff65" +
    "\001\002\000\060\004\060\012\043\013\057\024\026\027" +
    "\024\033\045\034\017\045\036\046\037\047\056\050\022" +
    "\052\034\054\015\061\030\105\040\111\032\112\053\113" +
    "\052\115\044\117\061\121\041\124\020\127\033\001\002" +
    "\000\062\004\060\007\373\012\043\013\057\024\026\027" +
    "\024\033\045\034\017\045\036\046\037\047\056\050\022" +
    "\052\034\054\015\061\030\105\040\111\032\112\053\113" +
    "\052\115\044\117\061\121\041\124\020\127\033\001\002" +
    "\000\004\104\374\001\002\000\010\011\uff66\025\uff66\060" +
    "\uff66\001\002\000\060\004\060\012\043\013\057\024\026" +
    "\027\024\033\045\034\017\045\036\046\037\047\056\050" +
    "\022\052\034\054\015\061\030\105\040\111\032\112\053" +
    "\113\052\115\044\117\061\121\041\124\020\127\033\001" +
    "\002\000\064\004\060\007\u0100\012\043\013\057\024\026" +
    "\027\024\033\045\034\017\045\036\046\037\047\056\050" +
    "\022\052\034\054\015\060\377\061\030\105\040\111\032" +
    "\112\053\113\052\115\044\117\061\121\041\124\020\127" +
    "\033\001\002\000\064\004\uff62\007\uff62\012\uff62\013\uff62" +
    "\024\uff62\027\uff62\033\uff62\034\uff62\045\uff62\046\uff62\047" +
    "\uff62\050\uff62\052\uff62\054\uff62\060\uff62\061\uff62\105\uff62" +
    "\111\uff62\112\uff62\113\uff62\115\uff62\117\uff62\121\uff62\124" +
    "\uff62\127\uff62\001\002\000\004\104\u0101\001\002\000\004" +
    "\060\u0102\001\002\000\064\004\uff63\007\uff63\012\uff63\013" +
    "\uff63\024\uff63\027\uff63\033\uff63\034\uff63\045\uff63\046\uff63" +
    "\047\uff63\050\uff63\052\uff63\054\uff63\060\uff63\061\uff63\105" +
    "\uff63\111\uff63\112\uff63\113\uff63\115\uff63\117\uff63\121\uff63" +
    "\124\uff63\127\uff63\001\002\000\004\037\u010e\001\002\000" +
    "\004\037\u010a\001\002\000\004\037\u0106\001\002\000\060" +
    "\004\060\012\043\013\057\024\026\027\024\033\045\034" +
    "\017\045\036\046\037\047\056\050\022\052\034\054\015" +
    "\061\030\105\040\111\032\112\053\113\052\115\044\117" +
    "\061\121\041\124\020\127\033\001\002\000\062\004\060" +
    "\007\u0108\012\043\013\057\024\026\027\024\033\045\034" +
    "\017\045\036\046\037\047\056\050\022\052\034\054\015" +
    "\061\030\105\040\111\032\112\053\113\052\115\044\117" +
    "\061\121\041\124\020\127\033\001\002\000\004\104\u0109" +
    "\001\002\000\010\011\uff68\025\uff68\060\uff68\001\002\000" +
    "\060\004\060\012\043\013\057\024\026\027\024\033\045" +
    "\034\017\045\036\046\037\047\056\050\022\052\034\054" +
    "\015\061\030\105\040\111\032\112\053\113\052\115\044" +
    "\117\061\121\041\124\020\127\033\001\002\000\062\004" +
    "\060\007\u010c\012\043\013\057\024\026\027\024\033\045" +
    "\034\017\045\036\046\037\047\056\050\022\052\034\054" +
    "\015\061\030\105\040\111\032\112\053\113\052\115\044" +
    "\117\061\121\041\124\020\127\033\001\002\000\004\104" +
    "\u010d\001\002\000\010\011\uff67\025\uff67\060\uff67\001\002" +
    "\000\060\004\060\012\043\013\057\024\026\027\024\033" +
    "\045\034\017\045\036\046\037\047\056\050\022\052\034" +
    "\054\015\061\030\105\040\111\032\112\053\113\052\115" +
    "\044\117\061\121\041\124\020\127\033\001\002\000\062" +
    "\004\060\007\u0110\012\043\013\057\024\026\027\024\033" +
    "\045\034\017\045\036\046\037\047\056\050\022\052\034" +
    "\054\015\061\030\105\040\111\032\112\053\113\052\115" +
    "\044\117\061\121\041\124\020\127\033\001\002\000\004" +
    "\104\u0111\001\002\000\010\011\uff69\025\uff69\060\uff69\001" +
    "\002\000\004\131\u0113\001\002\000\006\014\u0115\103\u0114" +
    "\001\002\000\004\104\u011c\001\002\000\004\047\u0116\001" +
    "\002\000\006\014\u011a\103\uff5e\001\002\000\004\103\u0118" +
    "\001\002\000\004\104\u0119\001\002\000\064\004\uff60\007" +
    "\uff60\012\uff60\013\uff60\024\uff60\027\uff60\033\uff60\034\uff60" +
    "\045\uff60\046\uff60\047\uff60\050\uff60\052\uff60\054\uff60\060" +
    "\uff60\061\uff60\105\uff60\111\uff60\112\uff60\113\uff60\115\uff60" +
    "\117\uff60\121\uff60\124\uff60\127\uff60\001\002\000\004\047" +
    "\u0116\001\002\000\004\103\uff5d\001\002\000\064\004\uff5f" +
    "\007\uff5f\012\uff5f\013\uff5f\024\uff5f\027\uff5f\033\uff5f\034" +
    "\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f\052\uff5f\054\uff5f" +
    "\060\uff5f\061\uff5f\105\uff5f\111\uff5f\112\uff5f\113\uff5f\115" +
    "\uff5f\117\uff5f\121\uff5f\124\uff5f\127\uff5f\001\002\000\006" +
    "\047\056\052\u0120\001\002\000\004\104\u0127\001\002\000" +
    "\006\051\u0125\104\uff90\001\002\000\004\047\056\001\002" +
    "\000\004\051\u0122\001\002\000\006\047\056\077\u0123\001" +
    "\002\000\004\104\uff91\001\002\000\004\104\uff8e\001\002" +
    "\000\004\077\u0126\001\002\000\004\104\uff8f\001\002\000" +
    "\020\044\257\047\056\076\253\077\262\102\256\123\260" +
    "\131\254\001\002\000\004\104\u0129\001\002\000\014\027" +
    "\024\047\056\054\015\111\032\115\044\001\002\000\004" +
    "\103\u012b\001\002\000\004\057\u012c\001\002\000\060\004" +
    "\060\012\043\013\057\024\026\027\024\033\045\034\017" +
    "\045\036\046\037\047\056\050\022\052\034\054\015\061" +
    "\030\105\040\111\032\112\053\113\052\115\044\117\061" +
    "\121\041\124\020\127\033\001\002\000\062\004\060\012" +
    "\043\013\057\024\026\027\024\033\045\034\017\045\036" +
    "\046\037\047\056\050\022\052\034\054\015\060\u012e\061" +
    "\030\105\040\111\032\112\053\113\052\115\044\117\061" +
    "\121\041\124\020\127\033\001\002\000\064\004\uff75\007" +
    "\uff75\012\uff75\013\uff75\024\uff75\027\uff75\033\uff75\034\uff75" +
    "\045\uff75\046\uff75\047\uff75\050\uff75\052\uff75\054\uff75\060" +
    "\uff75\061\uff75\105\uff75\111\uff75\112\uff75\113\uff75\115\uff75" +
    "\117\uff75\121\uff75\124\uff75\127\uff75\001\002\000\004\104" +
    "\u0130\001\002\000\064\004\uffbe\007\uffbe\012\uffbe\013\uffbe" +
    "\024\uffbe\027\uffbe\033\uffbe\034\uffbe\045\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\052\uffbe\054\uffbe\060\uffbe\061\uffbe\105\uffbe" +
    "\111\uffbe\112\uffbe\113\uffbe\115\uffbe\117\uffbe\121\uffbe\124" +
    "\uffbe\127\uffbe\001\002\000\004\104\u0134\001\002\000\004" +
    "\104\u0133\001\002\000\064\004\uffc6\007\uffc6\012\uffc6\013" +
    "\uffc6\024\uffc6\027\uffc6\033\uffc6\034\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\052\uffc6\054\uffc6\060\uffc6\061\uffc6\105" +
    "\uffc6\111\uffc6\112\uffc6\113\uffc6\115\uffc6\117\uffc6\121\uffc6" +
    "\124\uffc6\127\uffc6\001\002\000\064\004\uffcf\007\uffcf\012" +
    "\uffcf\013\uffcf\024\uffcf\027\uffcf\033\uffcf\034\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\052\uffcf\054\uffcf\060\uffcf\061" +
    "\uffcf\105\uffcf\111\uffcf\112\uffcf\113\uffcf\115\uffcf\117\uffcf" +
    "\121\uffcf\124\uffcf\127\uffcf\001\002\000\020\044\257\047" +
    "\056\076\253\077\262\102\256\123\260\131\254\001\002" +
    "\000\004\103\u0137\001\002\000\004\057\u0138\001\002\000" +
    "\060\004\060\012\043\013\057\024\026\027\024\033\045" +
    "\034\017\045\036\046\037\047\056\050\022\052\034\054" +
    "\015\061\030\105\040\111\032\112\053\113\052\115\044" +
    "\117\061\121\041\124\020\127\033\001\002\000\062\004" +
    "\060\012\043\013\057\024\026\027\024\033\045\034\017" +
    "\045\036\046\037\047\056\050\022\052\034\054\015\060" +
    "\u013a\061\030\105\040\111\032\112\053\113\052\115\044" +
    "\117\061\121\041\124\020\127\033\001\002\000\064\004" +
    "\uff74\007\uff74\012\uff74\013\uff74\024\uff74\027\uff74\033\uff74" +
    "\034\uff74\045\uff74\046\uff74\047\uff74\050\uff74\052\uff74\054" +
    "\uff74\060\uff74\061\uff74\105\uff74\111\uff74\112\uff74\113\uff74" +
    "\115\uff74\117\uff74\121\uff74\124\uff74\127\uff74\001\002\000" +
    "\006\103\uff8b\104\uff8b\001\002\000\064\004\uffe9\007\uffe9" +
    "\012\uffe9\013\uffe9\024\uffe9\027\uffe9\033\uffe9\034\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\050\uffe9\052\uffe9\054\uffe9\060\uffe9" +
    "\061\uffe9\105\uffe9\111\uffe9\112\uffe9\113\uffe9\115\uffe9\117" +
    "\uffe9\121\uffe9\124\uffe9\127\uffe9\001\002\000\004\047\077" +
    "\001\002\000\004\047\077\001\002\000\004\104\u0140\001" +
    "\002\000\064\004\uffc2\007\uffc2\012\uffc2\013\uffc2\024\uffc2" +
    "\027\uffc2\033\uffc2\034\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\052\uffc2\054\uffc2\060\uffc2\061\uffc2\105\uffc2\111\uffc2" +
    "\112\uffc2\113\uffc2\115\uffc2\117\uffc2\121\uffc2\124\uffc2\127" +
    "\uffc2\001\002\000\004\104\u0142\001\002\000\064\004\uffbf" +
    "\007\uffbf\012\uffbf\013\uffbf\024\uffbf\027\uffbf\033\uffbf\034" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\052\uffbf\054\uffbf" +
    "\060\uffbf\061\uffbf\105\uffbf\111\uffbf\112\uffbf\113\uffbf\115" +
    "\uffbf\117\uffbf\121\uffbf\124\uffbf\127\uffbf\001\002\000\010" +
    "\041\u0145\047\056\131\u0147\001\002\000\004\104\u014c\001" +
    "\002\000\004\104\uff6d\001\002\000\006\036\u014a\104\uff71" +
    "\001\002\000\006\036\u0148\104\uff70\001\002\000\010\041" +
    "\u0145\047\056\131\u0147\001\002\000\004\104\uff6f\001\002" +
    "\000\010\041\u0145\047\056\131\u0147\001\002\000\004\104" +
    "\uff6e\001\002\000\064\004\uff72\007\uff72\012\uff72\013\uff72" +
    "\024\uff72\027\uff72\033\uff72\034\uff72\045\uff72\046\uff72\047" +
    "\uff72\050\uff72\052\uff72\054\uff72\060\uff72\061\uff72\105\uff72" +
    "\111\uff72\112\uff72\113\uff72\115\uff72\117\uff72\121\uff72\124" +
    "\uff72\127\uff72\001\002\000\006\103\uff89\104\uff89\001\002" +
    "\000\004\002\ufff6\001\002\000\020\044\257\047\056\076" +
    "\253\077\262\102\256\123\260\131\254\001\002\000\004" +
    "\103\u0151\001\002\000\004\057\u0152\001\002\000\060\004" +
    "\060\012\043\013\057\024\026\027\024\033\045\034\017" +
    "\045\036\046\037\047\056\050\022\052\034\054\015\061" +
    "\030\105\040\111\032\112\053\113\052\115\044\117\061" +
    "\121\041\124\020\127\033\001\002\000\062\004\060\012" +
    "\043\013\057\024\026\027\024\033\045\034\017\045\036" +
    "\046\037\047\056\050\022\052\034\054\015\060\u0154\061" +
    "\030\105\040\111\032\112\053\113\052\115\044\117\061" +
    "\121\041\124\020\127\033\001\002\000\066\004\uff94\007" +
    "\uff94\012\uff94\013\uff94\024\uff94\027\uff94\033\uff94\034\uff94" +
    "\040\u0155\045\uff94\046\uff94\047\uff94\050\uff94\052\uff94\054" +
    "\uff94\060\uff94\061\uff94\105\uff94\111\uff94\112\uff94\113\uff94" +
    "\115\uff94\117\uff94\121\uff94\124\uff94\127\uff94\001\002\000" +
    "\006\050\022\057\u0156\001\002\000\060\004\060\012\043" +
    "\013\057\024\026\027\024\033\045\034\017\045\036\046" +
    "\037\047\056\050\022\052\034\054\015\061\030\105\040" +
    "\111\032\112\053\113\052\115\044\117\061\121\041\124" +
    "\020\127\033\001\002\000\064\004\uff92\007\uff92\012\uff92" +
    "\013\uff92\024\uff92\027\uff92\033\uff92\034\uff92\045\uff92\046" +
    "\uff92\047\uff92\050\uff92\052\uff92\054\uff92\060\uff92\061\uff92" +
    "\105\uff92\111\uff92\112\uff92\113\uff92\115\uff92\117\uff92\121" +
    "\uff92\124\uff92\127\uff92\001\002\000\062\004\060\012\043" +
    "\013\057\024\026\027\024\033\045\034\017\045\036\046" +
    "\037\047\056\050\022\052\034\054\015\060\u0159\061\030" +
    "\105\040\111\032\112\053\113\052\115\044\117\061\121" +
    "\041\124\020\127\033\001\002\000\064\004\uff93\007\uff93" +
    "\012\uff93\013\uff93\024\uff93\027\uff93\033\uff93\034\uff93\045" +
    "\uff93\046\uff93\047\uff93\050\uff93\052\uff93\054\uff93\060\uff93" +
    "\061\uff93\105\uff93\111\uff93\112\uff93\113\uff93\115\uff93\117" +
    "\uff93\121\uff93\124\uff93\127\uff93\001\002\000\004\047\077" +
    "\001\002\000\004\052\u0163\001\002\000\004\052\u0160\001" +
    "\002\000\004\047\077\001\002\000\004\104\u015f\001\002" +
    "\000\064\004\uffc5\007\uffc5\012\uffc5\013\uffc5\024\uffc5\027" +
    "\uffc5\033\uffc5\034\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\052\uffc5\054\uffc5\060\uffc5\061\uffc5\105\uffc5\111\uffc5\112" +
    "\uffc5\113\uffc5\115\uffc5\117\uffc5\121\uffc5\124\uffc5\127\uffc5" +
    "\001\002\000\004\047\077\001\002\000\004\104\u0162\001" +
    "\002\000\064\004\uffc3\007\uffc3\012\uffc3\013\uffc3\024\uffc3" +
    "\027\uffc3\033\uffc3\034\uffc3\045\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\052\uffc3\054\uffc3\060\uffc3\061\uffc3\105\uffc3\111\uffc3" +
    "\112\uffc3\113\uffc3\115\uffc3\117\uffc3\121\uffc3\124\uffc3\127" +
    "\uffc3\001\002\000\004\047\077\001\002\000\004\104\u0165" +
    "\001\002\000\064\004\uffc1\007\uffc1\012\uffc1\013\uffc1\024" +
    "\uffc1\027\uffc1\033\uffc1\034\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\050\uffc1\052\uffc1\054\uffc1\060\uffc1\061\uffc1\105\uffc1\111" +
    "\uffc1\112\uffc1\113\uffc1\115\uffc1\117\uffc1\121\uffc1\124\uffc1" +
    "\127\uffc1\001\002\000\004\104\u0167\001\002\000\064\004" +
    "\uffbc\007\uffbc\012\uffbc\013\uffbc\024\uffbc\027\uffbc\033\uffbc" +
    "\034\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\052\uffbc\054" +
    "\uffbc\060\uffbc\061\uffbc\105\uffbc\111\uffbc\112\uffbc\113\uffbc" +
    "\115\uffbc\117\uffbc\121\uffbc\124\uffbc\127\uffbc\001\002\000" +
    "\004\104\u0169\001\002\000\064\004\uffc0\007\uffc0\012\uffc0" +
    "\013\uffc0\024\uffc0\027\uffc0\033\uffc0\034\uffc0\045\uffc0\046" +
    "\uffc0\047\uffc0\050\uffc0\052\uffc0\054\uffc0\060\uffc0\061\uffc0" +
    "\105\uffc0\111\uffc0\112\uffc0\113\uffc0\115\uffc0\117\uffc0\121" +
    "\uffc0\124\uffc0\127\uffc0\001\002\000\006\103\uff8a\104\uff8a" +
    "\001\002\000\004\002\001\001\002\000\006\066\u016d\131" +
    "\u016e\001\002\000\006\047\u016f\055\u0170\001\002\000\010" +
    "\052\uffff\100\uffff\125\uffff\001\002\000\006\065\u0172\106" +
    "\u0173\001\002\000\004\065\u0171\001\002\000\010\052\ufffd" +
    "\100\ufffd\125\ufffd\001\002\000\010\052\ufffe\100\ufffe\125" +
    "\ufffe\001\002\000\004\047\u0174\001\002\000\004\065\u0175" +
    "\001\002\000\010\052\000\100\000\125\000\001\002\000" +
    "\004\103\u0177\001\002\000\004\057\u0178\001\002\000\060" +
    "\004\060\012\043\013\057\024\026\027\024\033\045\034" +
    "\017\045\036\046\037\047\056\050\022\052\034\054\015" +
    "\061\030\105\040\111\032\112\053\113\052\115\044\117" +
    "\061\121\041\124\020\127\033\001\002\000\062\004\060" +
    "\012\043\013\057\024\026\027\024\033\045\034\017\045" +
    "\036\046\037\047\056\050\022\052\034\054\015\060\u017a" +
    "\061\030\105\040\111\032\112\053\113\052\115\044\117" +
    "\061\121\041\124\020\127\033\001\002\000\004\002\ufff5" +
    "\001\002\000\004\075\u018e\001\002\000\004\053\u0184\001" +
    "\002\000\004\062\u017e\001\002\000\004\102\u017f\001\002" +
    "\000\004\103\u0180\001\002\000\004\057\u0181\001\002\000" +
    "\060\004\060\012\043\013\057\024\026\027\024\033\045" +
    "\034\017\045\036\046\037\047\056\050\022\052\034\054" +
    "\015\061\030\105\040\111\032\112\053\113\052\115\044" +
    "\117\061\121\041\124\020\127\033\001\002\000\062\004" +
    "\060\012\043\013\057\024\026\027\024\033\045\034\017" +
    "\045\036\046\037\047\056\050\022\052\034\054\015\060" +
    "\u0183\061\030\105\040\111\032\112\053\113\052\115\044" +
    "\117\061\121\041\124\020\127\033\001\002\000\004\002" +
    "\ufff7\001\002\000\006\066\u0185\131\u0186\001\002\000\006" +
    "\047\u0187\055\u0188\001\002\000\010\052\ufffb\100\ufffb\125" +
    "\ufffb\001\002\000\006\065\u018a\106\u018b\001\002\000\004" +
    "\065\u0189\001\002\000\010\052\ufff9\100\ufff9\125\ufff9\001" +
    "\002\000\010\052\ufffa\100\ufffa\125\ufffa\001\002\000\004" +
    "\047\u018c\001\002\000\004\065\u018d\001\002\000\010\052" +
    "\ufffc\100\ufffc\125\ufffc\001\002\000\004\116\u018f\001\002" +
    "\000\004\104\u0190\001\002\000\004\052\u0191\001\002\000" +
    "\004\062\u0192\001\002\000\004\102\u0193\001\002\000\004" +
    "\103\u0194\001\002\000\004\057\u0195\001\002\000\060\004" +
    "\060\012\043\013\057\024\026\027\024\033\045\034\017" +
    "\045\036\046\037\047\056\050\022\052\034\054\015\061" +
    "\030\105\040\111\032\112\053\113\052\115\044\117\061" +
    "\121\041\124\020\127\033\001\002\000\062\004\060\012" +
    "\043\013\057\024\026\027\024\033\045\034\017\045\036" +
    "\046\037\047\056\050\022\052\034\054\015\060\u0197\061" +
    "\030\105\040\111\032\112\053\113\052\115\044\117\061" +
    "\121\041\124\020\127\033\001\002\000\004\002\ufff8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0195\000\006\002\006\014\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\022\004\050\005\034\006\024" +
    "\017\030\020\054\021\026\023\053\025\041\030\046\032" +
    "\020\034\047\035\045\036\015\001\001\000\004\034\u0169" +
    "\001\001\000\002\001\001\000\004\013\u0167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\243\005\237\006\234\017\236\020\245\021\235\023" +
    "\244\025\240\030\242\032\020\034\047\035\241\036\233" +
    "\001\001\000\004\034\u014c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\u0131\033\u0130\001\001\000\002\001\001\000\004\013\u012e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\341\033\340\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\140" +
    "\001\001\000\006\013\063\033\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\101" +
    "\001\001\000\002\001\001\000\004\013\103\001\001\000" +
    "\002\001\001\000\004\013\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\122" +
    "\001\001\000\002\001\001\000\004\031\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\135\001\001" +
    "\000\002\001\001\000\004\031\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\144" +
    "\034\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\147\034\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\227\001\001" +
    "\000\004\034\225\001\001\000\002\001\001\000\004\034" +
    "\223\001\001\000\002\001\001\000\004\034\221\001\001" +
    "\000\004\034\217\001\001\000\004\034\202\001\001\000" +
    "\004\022\213\001\001\000\004\022\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\231\004" +
    "\050\005\034\006\024\017\030\020\054\021\026\023\053" +
    "\025\041\030\046\032\020\034\047\035\045\036\015\001" +
    "\001\000\034\004\243\005\237\006\234\017\236\020\245" +
    "\021\235\023\244\025\240\030\242\032\020\034\047\035" +
    "\241\036\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\251" +
    "\011\262\015\254\034\260\001\001\000\002\001\001\000" +
    "\006\011\322\034\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\314\011\315\034\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\311\001\001" +
    "\000\004\022\306\001\001\000\004\012\263\001\001\000" +
    "\006\011\302\034\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\251\011\262\015\277\034\260\001" +
    "\001\000\002\001\001\000\012\010\251\011\262\015\276" +
    "\034\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\305\034\260\001" +
    "\001\000\006\011\303\034\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\327\011\315\034\260\001\001\000\004\012\323\001\001" +
    "\000\006\011\325\034\260\001\001\000\006\011\326\034" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\251\011\262\015" +
    "\334\034\260\001\001\000\012\010\251\011\262\015\333" +
    "\034\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\351\001\001\000\004\034\u0103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\356\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\361\004\050\005\034" +
    "\006\024\017\030\020\054\021\026\023\053\025\041\030" +
    "\046\032\020\034\047\035\045\036\015\001\001\000\034" +
    "\004\243\005\237\006\234\017\236\020\245\021\235\023" +
    "\244\025\240\030\242\032\020\034\047\035\241\036\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\365\004\050\005\034\006\024\017\030\020\054\021\026" +
    "\023\053\025\041\030\046\032\020\034\047\035\045\036" +
    "\015\001\001\000\034\004\243\005\237\006\234\017\236" +
    "\020\245\021\235\023\244\025\240\030\242\032\020\034" +
    "\047\035\241\036\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\371\004\050\005\034\006\024\017" +
    "\030\020\054\021\026\023\053\025\041\030\046\032\020" +
    "\034\047\035\045\036\015\001\001\000\034\004\243\005" +
    "\237\006\234\017\236\020\245\021\235\023\244\025\240" +
    "\030\242\032\020\034\047\035\241\036\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\375\004\050" +
    "\005\034\006\024\017\030\020\054\021\026\023\053\025" +
    "\041\030\046\032\020\034\047\035\045\036\015\001\001" +
    "\000\034\004\243\005\237\006\234\017\236\020\245\021" +
    "\235\023\244\025\240\030\242\032\020\034\047\035\241" +
    "\036\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\u0106\004\050\005" +
    "\034\006\024\017\030\020\054\021\026\023\053\025\041" +
    "\030\046\032\020\034\047\035\045\036\015\001\001\000" +
    "\034\004\243\005\237\006\234\017\236\020\245\021\235" +
    "\023\244\025\240\030\242\032\020\034\047\035\241\036" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\u010a\004\050\005\034\006\024\017\030\020\054\021" +
    "\026\023\053\025\041\030\046\032\020\034\047\035\045" +
    "\036\015\001\001\000\034\004\243\005\237\006\234\017" +
    "\236\020\245\021\235\023\244\025\240\030\242\032\020" +
    "\034\047\035\241\036\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\u010e\004\050\005\034\006\024" +
    "\017\030\020\054\021\026\023\053\025\041\030\046\032" +
    "\020\034\047\035\045\036\015\001\001\000\034\004\243" +
    "\005\237\006\234\017\236\020\245\021\235\023\244\025" +
    "\240\030\242\032\020\034\047\035\241\036\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\u0116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\u011a\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\u011d\034\u011e\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\u0120\001\001" +
    "\000\002\001\001\000\004\034\u0123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\251\011\262\015\u0127\034\260\001\001\000" +
    "\002\001\001\000\006\017\u0129\034\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\u012c\004\050\005" +
    "\034\006\024\017\030\020\054\021\026\023\053\025\041" +
    "\030\046\032\020\034\047\035\045\036\015\001\001\000" +
    "\034\004\243\005\237\006\234\017\236\020\245\021\235" +
    "\023\244\025\240\030\242\032\020\034\047\035\241\036" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\251\011\262\015\u0135" +
    "\034\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\u0138\004\050\005\034\006\024\017\030\020\054" +
    "\021\026\023\053\025\041\030\046\032\020\034\047\035" +
    "\045\036\015\001\001\000\034\004\243\005\237\006\234" +
    "\017\236\020\245\021\235\023\244\025\240\030\242\032" +
    "\020\034\047\035\241\036\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u0140\001" +
    "\001\000\004\013\u013e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\u0143\034\u0145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\u0148\034" +
    "\u0145\001\001\000\002\001\001\000\006\024\u014a\034\u0145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\251\011\262\015\u014f" +
    "\034\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\u0152\004\050\005\034\006\024\017\030\020\054" +
    "\021\026\023\053\025\041\030\046\032\020\034\047\035" +
    "\045\036\015\001\001\000\034\004\243\005\237\006\234" +
    "\017\236\020\245\021\235\023\244\025\240\030\242\032" +
    "\020\034\047\035\241\036\233\001\001\000\002\001\001" +
    "\000\004\005\u0156\001\001\000\036\003\u0157\004\050\005" +
    "\034\006\024\017\030\020\054\021\026\023\053\025\041" +
    "\030\046\032\020\034\047\035\045\036\015\001\001\000" +
    "\002\001\001\000\034\004\243\005\237\006\234\017\236" +
    "\020\245\021\235\023\244\025\240\030\242\032\020\034" +
    "\047\035\241\036\233\001\001\000\002\001\001\000\004" +
    "\013\u0165\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u015d\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0160\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\u0178" +
    "\004\050\005\034\006\024\017\030\020\054\021\026\023" +
    "\053\025\041\030\046\032\020\034\047\035\045\036\015" +
    "\001\001\000\034\004\243\005\237\006\234\017\236\020" +
    "\245\021\235\023\244\025\240\030\242\032\020\034\047" +
    "\035\241\036\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\u0181\004" +
    "\050\005\034\006\024\017\030\020\054\021\026\023\053" +
    "\025\041\030\046\032\020\034\047\035\045\036\015\001" +
    "\001\000\034\004\243\005\237\006\234\017\236\020\245" +
    "\021\235\023\244\025\240\030\242\032\020\034\047\035" +
    "\241\036\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\u0195\004\050\005\034\006\024\017\030\020\054" +
    "\021\026\023\053\025\041\030\046\032\020\034\047\035" +
    "\045\036\015\001\001\000\034\004\243\005\237\006\234" +
    "\017\236\020\245\021\235\023\244\025\240\030\242\032" +
    "\020\034\047\035\241\036\233\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // SCANF ::= Scanf Parent_a STRING_LITERAL Coma BitAnd Identificador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SCANF",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // COMPLEMENTO ::= Identificador Coma COMPLEMENTO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COMPLEMENTO",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // COMPLEMENTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COMPLEMENTO",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // PRINTF ::= Printf Parent_a STRING_LITERAL Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // PRINTF ::= Printf Parent_a STRING_LITERAL Coma COMPLEMENTO Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Default DosPuntos SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SWITCH ::= Switch Parent_a IDENTIFICADORES Parent_c Llave_a CASE Default DosPuntos SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CASE ::= CASE Case STRING_LITERAL DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CASE ::= CASE Case IDENTIFICADORES DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CASE ::= CASE Case Numero DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CASE ::= Case IDENTIFICADORES DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CASE ::= Case STRING_LITERAL DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CASE ::= Case Numero DosPuntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CIN ::= Cin DobleMayor ENTRADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ENTRADA ::= IDENTIFICADORES DobleMayor ENTRADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ENTRADA",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ENTRADA ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ENTRADA",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SALIDA ::= Endl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SALIDA ::= IDENTIFICADORES DobleMenor SALIDA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SALIDA ::= STRING_LITERAL DobleMenor SALIDA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SALIDA ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SALIDA ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SALIDA",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // COUT ::= Cout DobleMenor SALIDA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FOR ::= For Parent_a FOR_PARTE_UNO P_coma SENTENCIA_BOOLEANA_ANIDADA P_coma OPERACIONES_COMPLEMENTARIAS Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPERACIONES_COMPLEMENTARIAS ::= _System Parent_a STRING_LITERAL Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES ModuloIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES DivisionIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MultiplicacionIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MenosIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MasIgual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Igual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES ModuloIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES DivisionIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MultiplicacionIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MenosIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES MasIgual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Decremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPERACIONES_COMPLEMENTARIAS ::= IDENTIFICADORES Incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPERACIONES_COMPLEMENTARIAS ::= Decremento IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPERACIONES_COMPLEMENTARIAS ::= Incremento IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPERACIONES_COMPLEMENTARIAS ::= Return Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACIONES_COMPLEMENTARIAS",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // IDENTIFICADORES ::= Identificador Corchete_a Numero Corchete_c Identificador Corchete_a Identificador Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IDENTIFICADORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADORES",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FOR_PARTE_UNO ::= Int IDENTIFICADORES Igual IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FOR_PARTE_UNO ::= IDENTIFICADORES Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FOR_PARTE_UNO ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FOR_PARTE_UNO ::= Int IDENTIFICADORES Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR_PARTE_UNO",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // IF ::= If Parent_a SENTENCIA_BOOLEANA_ANIDADA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE O_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE Y_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA O_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA Y_logico SENTENCIA_BOOLEANA_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_BOOLEANA_ANIDADA ::= SENTENCIA_BOOLEANA_COMPUESTA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_ANIDADA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA_BOOLEANA_COMPUESTA ::= Parent_a SENTENCIA_BOOLEANA_COMPUESTA Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES Negador SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_BOOLEANA_COMPUESTA ::= SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_BOOLEANA_COMPUESTA ::= Negador SENTENCIA_BOOLEANA_SIMPLE OPERADORES_RELACIONALES SENTENCIA_BOOLEANA_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_COMPUESTA",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_BOOLEANA_SIMPLE ::= Parent_a SENTENCIA_BOOLEANA_SIMPLE Parent_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_BOOLEANA_SIMPLE ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_BOOLEANA_SIMPLE ::= Numero OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES OPERADORES_ARITMETICOS IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_BOOLEANA_SIMPLE ::= IDENTIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_BOOLEANA_SIMPLE ::= False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_BOOLEANA_SIMPLE ::= True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA_SIMPLE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPERADORES_RELACIONALES ::= MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERADORES_RELACIONALES ::= MenorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERADORES_RELACIONALES ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERADORES_RELACIONALES ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERADORES_RELACIONALES ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERADORES_RELACIONALES ::= ComparadorIgual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERADORES_RELACIONALES ::= BitAnd 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERADORES_RELACIONALES ::= BitOr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERADORES_ARITMETICOS ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERADORES_ARITMETICOS ::= Division 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERADORES_ARITMETICOS ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERADORES_ARITMETICOS ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERADORES_ARITMETICOS ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= DECLARACION_ARREGLO_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= Bool DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= _String DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= Unsigned Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= Char DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Float DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= Long Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Double DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Unsigned Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Long Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Unsigned Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Short Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Unsigned Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Int DECLARACION_ANIDADA P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_ARREGLO ::= Identificador Corchete_a Numero Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_ARREGLO ::= Identificador Corchete_a Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_ARREGLO ::= Identificador Corchete_a Corchete_c Igual Llave_a CREACION_ARREGLO Llave_c Coma DECLARACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_ARREGLO_ANIDADA ::= Char DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_ARREGLO_ANIDADA ::= _String DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_ARREGLO_ANIDADA ::= Int DECLARACION_ARREGLO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ARREGLO_ANIDADA",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CREACION_ARREGLO ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CREACION_ARREGLO ::= STRING_LITERAL Coma CREACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CREACION_ARREGLO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CREACION_ARREGLO ::= Numero Coma CREACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CREACION_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_ANIDADA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_ANIDADA ::= Identificador Igual False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_ANIDADA ::= Identificador Igual True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_ANIDADA ::= Identificador Igual False Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_ANIDADA ::= Identificador Igual True Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_ANIDADA ::= Identificador Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_ANIDADA ::= Identificador Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION_ANIDADA ::= Identificador Igual STRING_LITERAL Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION_ANIDADA ::= Identificador Igual STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION_ANIDADA ::= Identificador Igual Numero Coma DECLARACION_ANIDADA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION_ANIDADA ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_ANIDADA",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA SCANF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= OPERACIONES_COMPLEMENTARIAS P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA OPERACIONES_COMPLEMENTARIAS P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= IMPORTACION Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= IMPORTACION Using Namespace Std P_coma Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Iostream MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTACION ::= IMPORTACION Numeral Include STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTACION ::= IMPORTACION Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTACION ::= Numeral Include MenorQue Iostream MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACION ::= Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTACION ::= Numeral Include STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // IMPORTACION ::= Numeral Include MenorQue Identificador Punto Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IMPORTACION",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

