/* The following code was generated by JFlex 1.6.1 */
package Analizador.semantic;

import java.io.Reader;
import java.io.StringReader;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1 from the specification file
 * <tt>src/c_compiler/c.flex</tt>
 */
public class LexerSemantic implements java_cup.runtime.Scanner {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
     * beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED
            = "\11\4\1\23\1\21\1\101\1\102\1\22\16\4\4\0\1\23\1\62"
            + "\1\100\1\0\1\4\1\56\1\57\1\3\1\70\1\71\1\20\1\55"
            + "\1\66\1\10\1\51\1\17\1\76\11\1\1\67\1\63\1\54\1\53"
            + "\1\52\1\75\1\0\4\6\1\7\1\12\5\2\1\14\10\2\1\16"
            + "\2\2\1\77\2\2\1\72\1\5\1\73\1\60\1\2\1\0\1\24"
            + "\1\27\1\33\1\40\1\31\1\11\1\44\1\35\1\37\1\2\1\32"
            + "\1\13\1\42\1\36\1\26\1\41\1\2\1\30\1\34\1\25\1\15"
            + "\1\50\1\46\1\43\1\47\1\45\1\64\1\61\1\65\1\74\6\4"
            + "\1\103\32\4\2\0\4\4\4\0\1\4\2\0\1\4\7\0\1\4"
            + "\4\0\1\4\5\0\27\4\1\0\37\4\1\0\u01ca\4\4\0\14\4"
            + "\16\0\5\4\7\0\1\4\1\0\1\4\21\0\165\4\1\0\2\4"
            + "\2\0\4\4\10\0\1\4\1\0\3\4\1\0\1\4\1\0\24\4"
            + "\1\0\123\4\1\0\213\4\1\0\5\4\2\0\236\4\11\0\46\4"
            + "\2\0\1\4\7\0\47\4\7\0\1\4\1\0\55\4\1\0\1\4"
            + "\1\0\2\4\1\0\2\4\1\0\1\4\10\0\33\4\5\0\3\4"
            + "\15\0\5\4\6\0\1\4\4\0\13\4\5\0\112\4\4\0\146\4"
            + "\1\0\11\4\1\0\12\4\1\0\23\4\2\0\1\4\17\0\74\4"
            + "\2\0\145\4\16\0\66\4\4\0\1\4\5\0\56\4\22\0\34\4"
            + "\104\0\1\4\1\0\13\4\67\0\33\4\1\0\144\4\2\0\12\4"
            + "\1\0\7\4\1\0\7\4\1\0\3\4\1\0\10\4\2\0\2\4"
            + "\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\2\0\11\4"
            + "\2\0\2\4\2\0\4\4\10\0\1\4\4\0\2\4\1\0\5\4"
            + "\2\0\16\4\7\0\1\4\5\0\3\4\1\0\6\4\4\0\2\4"
            + "\2\0\26\4\1\0\7\4\1\0\2\4\1\0\2\4\1\0\2\4"
            + "\2\0\1\4\1\0\5\4\4\0\2\4\2\0\3\4\3\0\1\4"
            + "\7\0\4\4\1\0\1\4\7\0\20\4\13\0\3\4\1\0\11\4"
            + "\1\0\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4"
            + "\2\0\12\4\1\0\3\4\1\0\3\4\2\0\1\4\17\0\4\4"
            + "\2\0\12\4\1\0\1\4\17\0\3\4\1\0\10\4\2\0\2\4"
            + "\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0\11\4"
            + "\2\0\2\4\2\0\3\4\10\0\2\4\4\0\2\4\1\0\5\4"
            + "\2\0\12\4\1\0\1\4\20\0\2\4\1\0\6\4\3\0\3\4"
            + "\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4"
            + "\3\0\3\4\3\0\14\4\4\0\5\4\3\0\3\4\1\0\4\4"
            + "\2\0\1\4\6\0\1\4\16\0\12\4\11\0\1\4\7\0\3\4"
            + "\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4"
            + "\3\0\10\4\1\0\3\4\1\0\4\4\7\0\2\4\1\0\2\4"
            + "\6\0\4\4\2\0\12\4\22\0\2\4\1\0\10\4\1\0\3\4"
            + "\1\0\27\4\1\0\12\4\1\0\5\4\2\0\11\4\1\0\3\4"
            + "\1\0\4\4\7\0\2\4\7\0\1\4\1\0\4\4\2\0\12\4"
            + "\1\0\2\4\17\0\2\4\1\0\10\4\1\0\3\4\1\0\51\4"
            + "\2\0\10\4\1\0\3\4\1\0\5\4\10\0\1\4\10\0\4\4"
            + "\2\0\12\4\12\0\6\4\2\0\2\4\1\0\22\4\3\0\30\4"
            + "\1\0\11\4\1\0\1\4\2\0\7\4\3\0\1\4\4\0\6\4"
            + "\1\0\1\4\1\0\10\4\22\0\2\4\15\0\72\4\4\0\20\4"
            + "\1\0\12\4\47\0\2\4\1\0\1\4\2\0\2\4\1\0\1\4"
            + "\2\0\1\4\6\0\4\4\1\0\7\4\1\0\3\4\1\0\1\4"
            + "\1\0\1\4\2\0\2\4\1\0\15\4\1\0\3\4\2\0\5\4"
            + "\1\0\1\4\1\0\6\4\2\0\12\4\2\0\4\4\40\0\1\4"
            + "\27\0\2\4\6\0\12\4\13\0\1\4\1\0\1\4\1\0\1\4"
            + "\4\0\12\4\1\0\44\4\4\0\24\4\1\0\22\4\1\0\44\4"
            + "\11\0\1\4\71\0\112\4\6\0\116\4\2\0\46\4\1\0\1\4"
            + "\5\0\1\4\2\0\53\4\1\0\u014d\4\1\0\4\4\2\0\7\4"
            + "\1\0\1\4\1\0\4\4\2\0\51\4\1\0\4\4\2\0\41\4"
            + "\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\17\4"
            + "\1\0\71\4\1\0\4\4\2\0\103\4\2\0\3\4\40\0\20\4"
            + "\20\0\125\4\14\0\u026c\4\2\0\21\4\1\0\32\4\5\0\113\4"
            + "\3\0\3\4\17\0\15\4\1\0\7\4\13\0\25\4\13\0\24\4"
            + "\14\0\15\4\1\0\3\4\1\0\2\4\14\0\124\4\3\0\1\4"
            + "\3\0\3\4\2\0\12\4\41\0\3\4\2\0\12\4\6\0\130\4"
            + "\10\0\53\4\5\0\106\4\12\0\35\4\3\0\14\4\4\0\14\4"
            + "\12\0\50\4\2\0\5\4\13\0\54\4\4\0\32\4\6\0\12\4"
            + "\46\0\34\4\4\0\77\4\1\0\35\4\2\0\13\4\6\0\12\4"
            + "\15\0\1\4\130\0\114\4\4\0\12\4\21\0\11\4\14\0\164\4"
            + "\14\0\70\4\10\0\12\4\3\0\61\4\122\0\3\4\1\0\43\4"
            + "\11\0\347\4\25\0\u011a\4\2\0\6\4\2\0\46\4\2\0\6\4"
            + "\2\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\37\4"
            + "\2\0\65\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0\7\4"
            + "\3\0\4\4\2\0\6\4\4\0\15\4\5\0\3\4\1\0\7\4"
            + "\16\0\5\4\30\0\1\101\1\101\5\4\20\0\2\4\23\0\1\4"
            + "\13\0\5\4\5\0\6\4\1\0\1\4\15\0\1\4\20\0\15\4"
            + "\3\0\33\4\25\0\15\4\4\0\1\4\3\0\14\4\21\0\1\4"
            + "\4\0\1\4\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4"
            + "\1\0\1\4\1\0\1\4\1\0\4\4\1\0\13\4\2\0\4\4"
            + "\5\0\5\4\4\0\1\4\21\0\51\4\u0a77\0\57\4\1\0\57\4"
            + "\1\0\205\4\6\0\11\4\14\0\46\4\1\0\1\4\5\0\1\4"
            + "\2\0\70\4\7\0\1\4\17\0\30\4\11\0\7\4\1\0\7\4"
            + "\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4"
            + "\1\0\7\4\1\0\40\4\57\0\1\4\u01d5\0\3\4\31\0\17\4"
            + "\1\0\5\4\2\0\5\4\4\0\126\4\2\0\2\4\2\0\3\4"
            + "\1\0\132\4\1\0\4\4\5\0\51\4\3\0\136\4\21\0\33\4"
            + "\65\0\20\4\u0200\0\u19b6\4\112\0\u51cd\4\63\0\u048d\4\103\0\56\4"
            + "\2\0\u010d\4\3\0\34\4\24\0\60\4\4\0\12\4\1\0\31\4"
            + "\7\0\123\4\45\0\11\4\2\0\147\4\2\0\4\4\1\0\4\4"
            + "\14\0\13\4\115\0\60\4\20\0\1\4\7\0\64\4\14\0\105\4"
            + "\13\0\12\4\6\0\30\4\3\0\1\4\4\0\56\4\2\0\44\4"
            + "\14\0\35\4\3\0\101\4\16\0\13\4\46\0\67\4\11\0\16\4"
            + "\2\0\12\4\6\0\27\4\3\0\2\4\4\0\103\4\30\0\3\4"
            + "\2\0\20\4\2\0\5\4\12\0\6\4\2\0\6\4\2\0\6\4"
            + "\11\0\7\4\1\0\7\4\221\0\53\4\1\0\2\4\2\0\12\4"
            + "\6\0\u2ba4\4\14\0\27\4\4\0\61\4\u2104\0\u016e\4\2\0\152\4"
            + "\46\0\7\4\14\0\5\4\5\0\14\4\1\0\15\4\1\0\5\4"
            + "\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4"
            + "\22\0\100\4\2\0\66\4\50\0\15\4\3\0\20\4\20\0\7\4"
            + "\14\0\2\4\30\0\3\4\31\0\1\4\6\0\5\4\1\0\207\4"
            + "\2\0\1\4\4\0\1\4\13\0\12\4\7\0\32\4\4\0\1\4"
            + "\1\0\32\4\13\0\131\4\3\0\6\4\2\0\6\4\2\0\6\4"
            + "\2\0\3\4\3\0\2\4\3\0\2\4\22\0\3\4\4\0\14\4"
            + "\1\0\32\4\1\0\23\4\1\0\2\4\1\0\17\4\2\0\16\4"
            + "\42\0\173\4\105\0\65\4\210\0\1\4\202\0\35\4\3\0\61\4"
            + "\57\0\37\4\21\0\33\4\65\0\36\4\2\0\44\4\4\0\10\4"
            + "\1\0\5\4\52\0\236\4\2\0\12\4\u0356\0\6\4\2\0\1\4"
            + "\1\0\54\4\1\0\2\4\3\0\1\4\2\0\27\4\252\0\26\4"
            + "\12\0\32\4\106\0\70\4\6\0\2\4\100\0\4\4\1\0\2\4"
            + "\5\0\10\4\1\0\3\4\1\0\33\4\4\0\3\4\4\0\1\4"
            + "\40\0\35\4\203\0\66\4\12\0\26\4\12\0\23\4\215\0\111\4"
            + "\u03b7\0\107\4\37\0\12\4\20\0\73\4\2\0\1\4\22\0\31\4"
            + "\7\0\12\4\6\0\65\4\1\0\12\4\100\0\105\4\13\0\12\4"
            + "\u04a6\0\70\4\10\0\12\4\u0936\0\u036f\4\221\0\143\4\u0b9d\0\u042f\4"
            + "\u33d1\0\u0239\4\u04c7\0\105\4\13\0\57\4\20\0\21\4\u4060\0\2\4"
            + "\u2163\0\5\4\3\0\26\4\2\0\7\4\36\0\4\4\224\0\3\4"
            + "\u01bb\0\125\4\1\0\107\4\1\0\2\4\2\0\1\4\2\0\2\4"
            + "\2\0\4\4\1\0\14\4\1\0\1\4\1\0\7\4\1\0\101\4"
            + "\1\0\4\4\2\0\10\4\1\0\7\4\1\0\34\4\1\0\4\4"
            + "\1\0\5\4\1\0\1\4\3\0\7\4\1\0\u0154\4\2\0\31\4"
            + "\1\0\31\4\1\0\37\4\1\0\31\4\1\0\37\4\1\0\31\4"
            + "\1\0\37\4\1\0\31\4\1\0\37\4\1\0\31\4\1\0\10\4"
            + "\2\0\62\4\u1600\0\4\4\1\0\33\4\1\0\2\4\1\0\1\4"
            + "\2\0\1\4\1\0\12\4\1\0\4\4\1\0\1\4\1\0\1\4"
            + "\6\0\1\4\4\0\1\4\1\0\1\4\1\0\1\4\1\0\3\4"
            + "\1\0\2\4\1\0\1\4\2\0\1\4\1\0\1\4\1\0\1\4"
            + "\1\0\1\4\1\0\1\4\1\0\2\4\1\0\1\4\2\0\4\4"
            + "\1\0\7\4\1\0\4\4\1\0\4\4\1\0\1\4\1\0\12\4"
            + "\1\0\21\4\5\0\3\4\1\0\5\4\1\0\21\4\u1144\0\ua6d7\4"
            + "\51\0\u1035\4\13\0\336\4\u3fe2\0\u021e\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"
            + "\1\4\36\0\140\4\200\0\360\4\uffff\0\uffff\0\ufe12\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\1\0\1\1\1\2\1\3\1\1\1\4\4\3\1\5"
            + "\1\6\2\7\15\3\1\10\1\11\1\12\1\13\1\14"
            + "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"
            + "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"
            + "\1\2\1\1\1\0\2\2\3\0\1\35\1\36\1\37"
            + "\3\3\2\0\1\3\2\0\1\40\1\41\17\3\1\42"
            + "\1\3\1\43\5\3\1\0\1\44\1\45\1\46\1\47"
            + "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"
            + "\1\60\1\61\2\0\1\62\1\2\1\0\1\2\1\63"
            + "\2\0\1\3\1\64\3\3\2\0\22\3\1\65\7\3"
            + "\1\66\1\67\1\70\1\2\1\3\1\71\2\3\1\0"
            + "\1\72\4\3\1\73\1\74\1\3\1\75\2\3\1\76"
            + "\12\3\1\77\2\3\1\100\1\101\1\3\1\102\1\3"
            + "\1\103\4\3\1\104\2\3\1\105\1\106\6\3\1\107"
            + "\3\3\1\110\1\3\1\111\1\3\1\112\1\113\1\114"
            + "\1\115\1\116\1\117\1\3\1\120\2\3\1\121\2\3"
            + "\1\122\1\3\1\123\1\124\1\125\1\126";

    private static int[] zzUnpackAction() {
        int[] result = new int[231];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"
            + "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\104\0\u0330\0\u0374\0\u03b8"
            + "\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8"
            + "\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8"
            + "\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\104\0\104\0\104"
            + "\0\104\0\u0990\0\104\0\104\0\104\0\104\0\104\0\104"
            + "\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0"
            + "\0\104\0\104\0\104\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0a18"
            + "\0\u0d04\0\u0d48\0\u0d8c\0\104\0\104\0\u0dd0\0\u0e14\0\u0e58"
            + "\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078"
            + "\0\u10bc\0\u1100\0\u1144\0\u1188\0\314\0\u11cc\0\u1210\0\u1254"
            + "\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\104\0\104"
            + "\0\104\0\u1430\0\104\0\104\0\104\0\104\0\104\0\104"
            + "\0\104\0\104\0\104\0\u1474\0\u14b8\0\104\0\u14fc\0\u1540"
            + "\0\104\0\104\0\u1584\0\u15c8\0\u160c\0\314\0\u1650\0\u1694"
            + "\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4"
            + "\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4"
            + "\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\314\0\u1c6c\0\u1cb0"
            + "\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\104\0\104\0\104"
            + "\0\u1e48\0\u1e8c\0\314\0\u1ed0\0\u1f14\0\u1f58\0\314\0\u1f9c"
            + "\0\u1fe0\0\u2024\0\u2068\0\314\0\314\0\u20ac\0\314\0\u20f0"
            + "\0\u2134\0\314\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc"
            + "\0\u2310\0\u2354\0\u2398\0\u23dc\0\314\0\u2420\0\u2464\0\314"
            + "\0\314\0\u24a8\0\314\0\u24ec\0\314\0\u2530\0\u2574\0\u25b8"
            + "\0\u25fc\0\314\0\u2640\0\u2684\0\314\0\314\0\u26c8\0\u270c"
            + "\0\u2750\0\u2794\0\u27d8\0\u281c\0\314\0\u2860\0\u28a4\0\u28e8"
            + "\0\314\0\u292c\0\314\0\u2970\0\314\0\314\0\314\0\314"
            + "\0\314\0\314\0\u29b4\0\314\0\u29f8\0\u2a3c\0\314\0\u2a80"
            + "\0\u2ac4\0\314\0\u2b08\0\314\0\314\0\314\0\314";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[231];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\1\2\1\3\1\4\1\5\2\2\2\4\1\6\1\7"
            + "\1\4\1\10\1\11\1\12\1\4\1\13\1\14\1\15"
            + "\1\16\1\15\1\17\1\20\1\4\1\21\1\22\1\23"
            + "\1\4\1\24\1\25\2\4\1\26\1\27\1\30\2\4"
            + "\1\31\1\4\1\32\1\4\1\33\1\34\1\35\1\36"
            + "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"
            + "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"
            + "\1\57\1\60\1\61\1\4\1\62\1\2\1\15\1\2"
            + "\105\0\1\3\5\0\1\63\3\0\4\64\12\0\1\63"
            + "\17\0\1\65\24\0\1\3\6\0\2\4\3\0\2\4"
            + "\1\0\6\4\5\0\25\4\25\0\2\4\4\0\1\66"
            + "\2\67\1\0\1\67\1\70\2\67\1\66\6\67\5\66"
            + "\25\67\25\66\2\67\3\66\1\67\10\0\1\71\41\0"
            + "\1\72\1\73\31\0\2\4\3\0\2\4\1\0\2\4"
            + "\1\74\3\4\5\0\2\4\1\75\22\4\25\0\2\4"
            + "\5\0\2\4\3\0\2\4\1\0\6\4\5\0\2\4"
            + "\1\76\22\4\25\0\2\4\5\0\2\4\1\77\2\0"
            + "\2\4\1\0\6\4\5\0\25\4\25\0\2\4\1\100"
            + "\4\0\2\4\3\0\2\4\1\0\6\4\5\0\12\4"
            + "\1\101\12\4\25\0\2\4\23\0\1\102\1\103\32\0"
            + "\1\104\103\0\1\105\51\0\1\15\63\0\2\4\3\0"
            + "\2\4\1\0\4\4\1\106\1\4\5\0\25\4\25\0"
            + "\2\4\5\0\2\4\3\0\2\4\1\0\6\4\5\0"
            + "\23\4\1\107\1\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\6\4\5\0\4\4\1\110\20\4\25\0"
            + "\2\4\5\0\2\4\3\0\2\4\1\0\6\4\5\0"
            + "\5\4\1\111\17\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\2\4\1\112\3\4\5\0\12\4\1\113"
            + "\4\4\1\114\5\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\6\4\5\0\1\115\1\4\1\116\6\4"
            + "\1\117\13\4\25\0\2\4\5\0\2\4\3\0\2\4"
            + "\1\0\6\4\5\0\1\4\1\120\5\4\1\121\1\4"
            + "\1\122\1\4\1\123\6\4\1\124\2\4\25\0\2\4"
            + "\5\0\2\4\3\0\2\4\1\0\1\125\5\4\5\0"
            + "\12\4\1\126\12\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\6\4\5\0\2\4\1\127\2\4\1\130"
            + "\17\4\25\0\2\4\5\0\2\4\3\0\2\4\1\0"
            + "\6\4\5\0\4\4\1\131\20\4\25\0\2\4\5\0"
            + "\2\4\3\0\2\4\1\0\6\4\5\0\2\4\1\132"
            + "\22\4\25\0\2\4\5\0\2\4\3\0\2\4\1\0"
            + "\6\4\5\0\11\4\1\133\13\4\25\0\2\4\5\0"
            + "\2\4\3\0\2\4\1\0\6\4\5\0\2\4\1\134"
            + "\22\4\25\0\2\4\5\0\1\65\47\0\1\135\24\0"
            + "\1\65\57\0\1\136\1\137\103\0\1\140\103\0\1\141"
            + "\1\142\1\0\1\47\10\0\1\55\67\0\1\143\1\0"
            + "\1\144\100\0\1\50\1\145\103\0\1\146\3\0\1\147"
            + "\77\0\1\150\103\0\1\151\5\0\1\152\75\0\1\153"
            + "\102\0\1\56\32\0\1\3\5\0\1\63\3\0\4\64"
            + "\12\0\1\63\11\0\1\154\5\0\1\65\24\0\1\3"
            + "\1\154\4\0\5\100\1\155\72\100\1\156\3\100\1\0"
            + "\1\157\6\0\1\160\44\0\1\160\20\0\1\157\20\0"
            + "\4\64\66\0\1\65\5\0\1\63\1\0\4\161\14\0"
            + "\1\63\44\0\1\65\5\0\3\66\1\162\1\66\1\163"
            + "\101\66\1\161\1\66\1\163\77\66\7\67\1\66\6\67"
            + "\2\66\2\0\1\66\25\67\25\66\2\67\1\66\2\0"
            + "\1\164\1\0\2\4\3\0\2\4\1\0\6\4\5\0"
            + "\2\4\1\165\22\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\6\4\5\0\4\4\1\166\20\4\25\0"
            + "\2\4\5\0\2\4\3\0\2\4\1\0\6\4\5\0"
            + "\12\4\1\167\12\4\25\0\2\4\4\0\3\66\1\0"
            + "\1\66\1\163\76\66\1\0\2\4\3\0\2\4\1\0"
            + "\6\4\5\0\10\4\1\170\2\4\1\171\11\4\25\0"
            + "\2\4\4\0\21\102\1\15\1\16\61\102\20\172\1\173"
            + "\63\172\1\0\2\4\3\0\2\4\1\0\6\4\5\0"
            + "\1\4\1\174\23\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\6\4\5\0\15\4\1\175\7\4\25\0"
            + "\2\4\5\0\2\4\3\0\2\4\1\0\6\4\5\0"
            + "\5\4\1\176\17\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\6\4\5\0\1\4\1\177\16\4\1\200"
            + "\4\4\25\0\2\4\5\0\2\4\3\0\2\4\1\0"
            + "\6\4\5\0\10\4\1\201\14\4\25\0\2\4\5\0"
            + "\2\4\3\0\2\4\1\0\4\4\1\202\1\4\5\0"
            + "\25\4\25\0\2\4\5\0\2\4\3\0\2\4\1\0"
            + "\6\4\5\0\1\4\1\203\23\4\25\0\2\4\5\0"
            + "\2\4\3\0\2\4\1\0\6\4\5\0\10\4\1\204"
            + "\14\4\25\0\2\4\5\0\2\4\3\0\2\4\1\0"
            + "\6\4\5\0\12\4\1\205\12\4\25\0\2\4\5\0"
            + "\2\4\3\0\2\4\1\0\6\4\5\0\1\206\24\4"
            + "\25\0\2\4\5\0\2\4\3\0\2\4\1\0\6\4"
            + "\5\0\1\207\3\4\1\210\20\4\25\0\2\4\5\0"
            + "\2\4\3\0\2\4\1\0\6\4\5\0\1\211\24\4"
            + "\25\0\2\4\5\0\2\4\3\0\2\4\1\0\6\4"
            + "\5\0\2\4\1\212\22\4\25\0\2\4\5\0\2\4"
            + "\3\0\2\4\1\0\6\4\5\0\20\4\1\213\1\214"
            + "\3\4\25\0\2\4\5\0\2\4\3\0\2\4\1\0"
            + "\6\4\5\0\13\4\1\215\11\4\25\0\2\4\5\0"
            + "\2\4\3\0\2\4\1\0\6\4\5\0\1\4\1\216"
            + "\23\4\25\0\2\4\5\0\2\4\3\0\2\4\1\0"
            + "\4\4\1\217\1\4\5\0\25\4\25\0\2\4\5\0"
            + "\2\4\3\0\2\4\1\0\1\220\5\4\5\0\25\4"
            + "\25\0\2\4\5\0\2\4\3\0\2\4\1\0\6\4"
            + "\5\0\13\4\1\221\11\4\25\0\2\4\5\0\2\4"
            + "\3\0\2\4\1\0\6\4\5\0\1\4\1\222\23\4"
            + "\25\0\2\4\5\0\2\4\3\0\2\4\1\0\6\4"
            + "\5\0\13\4\1\223\11\4\25\0\2\4\5\0\2\4"
            + "\3\0\2\4\1\0\2\4\1\224\3\4\5\0\13\4"
            + "\1\225\11\4\25\0\2\4\55\0\1\226\105\0\1\227"
            + "\103\0\1\230\31\0\1\231\4\0\2\231\1\0\2\231"
            + "\11\0\1\231\2\0\1\231\1\0\1\231\1\0\1\231"
            + "\4\0\1\231\35\0\1\231\5\0\21\100\2\0\56\100"
            + "\4\0\1\157\7\0\4\161\61\0\1\157\6\0\1\157"
            + "\74\0\1\157\5\0\21\66\2\0\56\66\6\0\1\161"
            + "\101\0\2\4\3\0\2\4\1\0\6\4\5\0\1\232"
            + "\24\4\25\0\2\4\5\0\2\4\3\0\2\4\1\0"
            + "\6\4\5\0\20\4\1\233\4\4\25\0\2\4\5\0"
            + "\2\4\3\0\2\4\1\0\6\4\5\0\13\4\1\234"
            + "\11\4\25\0\2\4\5\0\2\4\3\0\2\4\1\0"
            + "\6\4\5\0\2\4\1\235\22\4\25\0\2\4\4\0"
            + "\20\172\1\236\63\172\17\0\1\15\1\173\64\0\2\4"
            + "\3\0\2\4\1\0\6\4\5\0\2\4\1\237\22\4"
            + "\25\0\2\4\5\0\2\4\3\0\2\4\1\0\6\4"
            + "\5\0\5\4\1\240\17\4\25\0\2\4\5\0\2\4"
            + "\3\0\2\4\1\0\6\4\5\0\1\241\24\4\25\0"
            + "\2\4\5\0\2\4\3\0\2\4\1\0\4\4\1\242"
            + "\1\4\5\0\25\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\6\4\5\0\13\4\1\243\11\4\25\0"
            + "\2\4\5\0\2\4\3\0\2\4\1\0\6\4\5\0"
            + "\5\4\1\244\17\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\6\4\5\0\16\4\1\245\6\4\25\0"
            + "\2\4\5\0\2\4\3\0\2\4\1\0\6\4\5\0"
            + "\5\4\1\246\17\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\6\4\5\0\5\4\1\247\17\4\25\0"
            + "\2\4\5\0\2\4\3\0\2\4\1\0\6\4\5\0"
            + "\1\4\1\250\6\4\1\251\14\4\25\0\2\4\5\0"
            + "\2\4\3\0\2\4\1\0\6\4\5\0\4\4\1\252"
            + "\20\4\25\0\2\4\5\0\2\4\3\0\2\4\1\0"
            + "\6\4\5\0\1\4\1\253\23\4\25\0\2\4\5\0"
            + "\2\4\3\0\2\4\1\0\4\4\1\254\1\4\5\0"
            + "\25\4\25\0\2\4\5\0\2\4\3\0\2\4\1\0"
            + "\6\4\5\0\12\4\1\255\12\4\25\0\2\4\5\0"
            + "\2\4\3\0\2\4\1\0\6\4\5\0\4\4\1\256"
            + "\20\4\25\0\2\4\5\0\2\4\3\0\2\4\1\0"
            + "\6\4\5\0\12\4\1\257\12\4\25\0\2\4\5\0"
            + "\2\4\3\0\2\4\1\0\6\4\5\0\5\4\1\260"
            + "\17\4\25\0\2\4\5\0\2\4\3\0\2\4\1\0"
            + "\6\4\5\0\1\4\1\261\23\4\25\0\2\4\5\0"
            + "\2\4\3\0\2\4\1\0\6\4\5\0\3\4\1\262"
            + "\21\4\25\0\2\4\5\0\2\4\3\0\2\4\1\0"
            + "\6\4\5\0\1\263\24\4\25\0\2\4\5\0\2\4"
            + "\3\0\2\4\1\0\6\4\5\0\12\4\1\264\12\4"
            + "\25\0\2\4\5\0\2\4\3\0\2\4\1\0\6\4"
            + "\5\0\2\4\1\265\22\4\25\0\2\4\5\0\2\4"
            + "\3\0\2\4\1\0\2\4\1\266\3\4\5\0\25\4"
            + "\25\0\2\4\5\0\2\4\3\0\2\4\1\0\6\4"
            + "\5\0\1\267\24\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\6\4\5\0\14\4\1\270\10\4\25\0"
            + "\2\4\5\0\1\231\4\0\2\231\1\0\2\231\4\64"
            + "\5\0\1\231\2\0\1\231\1\0\1\231\1\0\1\231"
            + "\4\0\1\231\35\0\1\231\6\0\2\4\3\0\2\4"
            + "\1\0\6\4\5\0\1\4\1\271\23\4\25\0\2\4"
            + "\5\0\2\4\3\0\2\4\1\0\6\4\5\0\20\4"
            + "\1\272\4\4\25\0\2\4\5\0\2\4\3\0\2\4"
            + "\1\0\6\4\5\0\12\4\1\273\12\4\25\0\2\4"
            + "\4\0\17\172\1\15\1\236\63\172\1\0\2\4\3\0"
            + "\2\4\1\0\6\4\5\0\14\4\1\274\10\4\25\0"
            + "\2\4\5\0\2\4\3\0\2\4\1\0\6\4\5\0"
            + "\6\4\1\275\16\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\6\4\5\0\4\4\1\276\20\4\25\0"
            + "\2\4\5\0\2\4\3\0\2\4\1\0\6\4\5\0"
            + "\10\4\1\277\14\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\6\4\5\0\4\4\1\300\20\4\25\0"
            + "\2\4\5\0\2\4\3\0\2\4\1\0\6\4\5\0"
            + "\13\4\1\301\11\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\6\4\5\0\1\4\1\302\23\4\25\0"
            + "\2\4\5\0\2\4\3\0\2\4\1\0\6\4\5\0"
            + "\13\4\1\303\11\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\6\4\5\0\7\4\1\304\15\4\25\0"
            + "\2\4\5\0\2\4\3\0\2\4\1\0\1\305\5\4"
            + "\5\0\25\4\25\0\2\4\5\0\2\4\3\0\2\4"
            + "\1\0\6\4\5\0\1\4\1\306\23\4\25\0\2\4"
            + "\5\0\2\4\3\0\2\4\1\0\6\4\5\0\5\4"
            + "\1\307\17\4\25\0\2\4\5\0\2\4\3\0\2\4"
            + "\1\0\6\4\5\0\2\4\1\310\22\4\25\0\2\4"
            + "\5\0\2\4\3\0\2\4\1\0\6\4\5\0\7\4"
            + "\1\311\15\4\25\0\2\4\5\0\2\4\3\0\2\4"
            + "\1\0\2\4\1\312\3\4\5\0\25\4\25\0\2\4"
            + "\5\0\2\4\3\0\2\4\1\0\4\4\1\313\1\4"
            + "\5\0\25\4\25\0\2\4\5\0\2\4\3\0\2\4"
            + "\1\0\6\4\5\0\1\4\1\314\23\4\25\0\2\4"
            + "\5\0\2\4\3\0\2\4\1\0\6\4\5\0\5\4"
            + "\1\315\17\4\25\0\2\4\5\0\2\4\3\0\2\4"
            + "\1\0\6\4\5\0\1\4\1\316\23\4\25\0\2\4"
            + "\5\0\2\4\3\0\2\4\1\0\6\4\5\0\12\4"
            + "\1\317\12\4\25\0\2\4\5\0\2\4\3\0\2\4"
            + "\1\0\6\4\5\0\5\4\1\320\17\4\25\0\2\4"
            + "\5\0\2\4\3\0\2\4\1\0\6\4\5\0\12\4"
            + "\1\321\12\4\25\0\2\4\5\0\2\4\3\0\2\4"
            + "\1\0\6\4\5\0\1\4\1\322\23\4\25\0\2\4"
            + "\5\0\2\4\3\0\2\4\1\0\6\4\5\0\12\4"
            + "\1\323\12\4\25\0\2\4\5\0\2\4\3\0\2\4"
            + "\1\0\6\4\5\0\12\4\1\324\12\4\25\0\2\4"
            + "\5\0\2\4\3\0\2\4\1\0\6\4\5\0\7\4"
            + "\1\325\15\4\25\0\2\4\5\0\2\4\3\0\2\4"
            + "\1\0\6\4\5\0\1\4\1\326\23\4\25\0\2\4"
            + "\5\0\2\4\3\0\2\4\1\0\6\4\5\0\14\4"
            + "\1\327\10\4\25\0\2\4\5\0\2\4\3\0\2\4"
            + "\1\0\1\330\5\4\5\0\25\4\25\0\2\4\5\0"
            + "\2\4\3\0\2\4\1\0\6\4\5\0\11\4\1\331"
            + "\13\4\25\0\2\4\5\0\2\4\3\0\2\4\1\0"
            + "\6\4\5\0\5\4\1\332\17\4\25\0\2\4\5\0"
            + "\2\4\3\0\2\4\1\0\2\4\1\333\3\4\5\0"
            + "\25\4\25\0\2\4\5\0\2\4\3\0\2\4\1\0"
            + "\1\334\5\4\5\0\25\4\25\0\2\4\5\0\2\4"
            + "\3\0\2\4\1\0\6\4\5\0\13\4\1\335\11\4"
            + "\25\0\2\4\5\0\2\4\3\0\2\4\1\0\6\4"
            + "\5\0\5\4\1\336\17\4\25\0\2\4\5\0\2\4"
            + "\3\0\2\4\1\0\1\337\5\4\5\0\25\4\25\0"
            + "\2\4\5\0\2\4\3\0\2\4\1\0\6\4\5\0"
            + "\5\4\1\340\17\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\4\4\1\341\1\4\5\0\25\4\25\0"
            + "\2\4\5\0\2\4\3\0\2\4\1\0\6\4\5\0"
            + "\1\4\1\342\23\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\2\4\1\343\3\4\5\0\25\4\25\0"
            + "\2\4\5\0\2\4\3\0\2\4\1\0\6\4\5\0"
            + "\14\4\1\344\10\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\6\4\5\0\4\4\1\345\20\4\25\0"
            + "\2\4\5\0\2\4\3\0\2\4\1\0\6\4\5\0"
            + "\5\4\1\346\17\4\25\0\2\4\5\0\2\4\3\0"
            + "\2\4\1\0\6\4\5\0\5\4\1\347\17\4\25\0"
            + "\2\4\4\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[11084];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unknown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\1\0\1\11\12\1\1\11\30\1\4\11\1\1\6\11"
            + "\2\1\1\0\2\1\3\0\3\11\3\1\2\0\1\1"
            + "\2\0\2\11\27\1\1\0\1\1\3\11\1\1\11\11"
            + "\2\0\1\11\1\1\1\0\2\11\2\0\5\1\2\0"
            + "\32\1\3\11\5\1\1\0\111\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[231];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead. When a
     * lead/high surrogate has been read from the input stream into the final
     * zzBuffer position, this will have a value of 1; otherwise, it will have a
     * value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    public LexerSemantic(Reader in) {
        this.zzReader = in;
    }

    /* user code: */
    public Symbol symbol(int sym) {
        Symbol data = new Symbol(sym, yycolumn, yyline);
        return data;
    }

    public Symbol symbol(int sym, Object val) {
        Symbol data = new Symbol(sym, yycolumn, yyline);
        data.value = new Symbol(sym, yycolumn, yyline, val);
        return data;
    }

    public Symbol symbol(int sym, Object val, int buflength) {
        return new Symbol(sym, yycolumn, yyline, val);
    }

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    LexerSemantic(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;
        /* index in packed string  */
        int j = 0;
        /* index in unpacked array */
        while (i < 2532) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        /* indicate end of file */
        zzEndRead = zzStartRead;
        /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical
     * state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has
     * grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to
     * yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must
     * not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * Contains user EOF-code, which will be executed exactly once, when the end
     * of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                    zzCurrentPosL < zzMarkedPosL;
                    zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) {
                            zzR = false;
                        } else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                } else if (zzAtEOF) {
                    zzPeek = false;
                } else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) {
                        zzPeek = false;
                    } else {
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                    }
                }
                if (zzPeek) {
                    yyline--;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                {
                    return new java_cup.runtime.Symbol(symSemantic.EOF);
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        System.err.println("Error Lexico, token no identificado: " + yytext() + " " + (yyline + 1) + " : " + (yycolumn + 1));
                    }
                    case 87:
                        break;
                    case 2: {
                        return symbol(symSemantic.CONSTANT, yytext());
                    }
                    case 88:
                        break;
                    case 3: {
                        return symbol(symSemantic.IDENTIFIER, yytext());
                    }
                    case 89:
                        break;
                    case 4: {
                        return symbol(symSemantic.MINUS, yytext());
                    }
                    case 90:
                        break;
                    case 5: {
                        return symbol(symSemantic.DIVIDE, "/");
                    }
                    case 91:
                        break;
                    case 6: {
                        return symbol(symSemantic.MUL, "*");
                    }
                    case 92:
                        break;
                    case 7: {
                    }
                    case 93:
                        break;
                    case 8: {
                        return symbol(symSemantic.POINT, yytext());
                    }
                    case 94:
                        break;
                    case 9: {
                        return symbol(symSemantic.GREATER, ">");
                    }
                    case 95:
                        break;
                    case 10: {
                        return symbol(symSemantic.ASSIGN, yytext());
                    }
                    case 96:
                        break;
                    case 11: {
                        return symbol(symSemantic.LESS, "<");
                    }
                    case 97:
                        break;
                    case 12: {
                        return symbol(symSemantic.PLUS, "+");
                    }
                    case 98:
                        break;
                    case 13: {
                        return symbol(symSemantic.MODULUS, "%");
                    }
                    case 99:
                        break;
                    case 14: {
                        return symbol(symSemantic.ADRESS, yytext());
                    }
                    case 100:
                        break;
                    case 15: {
                        return symbol(symSemantic.XOR, yytext());
                    }
                    case 101:
                        break;
                    case 16: {
                        return symbol(symSemantic.OR, yytext());
                    }
                    case 102:
                        break;
                    case 17: {
                        return symbol(symSemantic.NOT, "!");
                    }
                    case 103:
                        break;
                    case 18: {
                        return symbol(symSemantic.SEMI, yytext());
                    }
                    case 104:
                        break;
                    case 19: {
                        return symbol(symSemantic.CURLYL, yytext());
                    }
                    case 105:
                        break;
                    case 20: {
                        return symbol(symSemantic.CURLYR, yytext());
                    }
                    case 106:
                        break;
                    case 21: {
                        return symbol(symSemantic.COMMA, yytext());
                    }
                    case 107:
                        break;
                    case 22: {
                        return symbol(symSemantic.COLON, yytext());
                    }
                    case 108:
                        break;
                    case 23: {
                        return symbol(symSemantic.PARAL, "(");
                    }
                    case 109:
                        break;
                    case 24: {
                        return symbol(symSemantic.PARAR, ")");
                    }
                    case 110:
                        break;
                    case 25: {
                        return symbol(symSemantic.SQUAREDL, yytext());
                    }
                    case 111:
                        break;
                    case 26: {
                        return symbol(symSemantic.SQUAREDR, yytext());
                    }
                    case 112:
                        break;
                    case 27: {
                        return symbol(symSemantic.TILDE, yytext());
                    }
                    case 113:
                        break;
                    case 28: {
                        return symbol(symSemantic.COND, yytext());
                    }
                    case 114:
                        break;
                    case 29: {
                        return symbol(symSemantic.DEC_OP, "--");
                    }
                    case 115:
                        break;
                    case 30: {
                        return symbol(symSemantic.PTR_OP, yytext());
                    }
                    case 116:
                        break;
                    case 31: {
                        return symbol(symSemantic.SUB_ASSIGN, yytext());
                    }
                    case 117:
                        break;
                    case 32: {
                        return symbol(symSemantic.DIV_ASSIGN, yytext());
                    }
                    case 118:
                        break;
                    case 33: {
                        return symbol(symSemantic.MUL_ASSIGN, yytext());
                    }
                    case 119:
                        break;
                    case 34: {
                        return symbol(symSemantic.IF, yytext());
                    }
                    case 120:
                        break;
                    case 35: {
                        return symbol(symSemantic.DO, yytext());
                    }
                    case 121:
                        break;
                    case 36: {
                        return symbol(symSemantic.RIGHT_OP, yytext());
                    }
                    case 122:
                        break;
                    case 37: {
                        return symbol(symSemantic.GE_OP, ">=");
                    }
                    case 123:
                        break;
                    case 38: {
                        return symbol(symSemantic.EQ_OP, "==");
                    }
                    case 124:
                        break;
                    case 39: {
                        return symbol(symSemantic.LE_OP, "<=");
                    }
                    case 125:
                        break;
                    case 40: {
                        return symbol(symSemantic.LEFT_OP, yytext());
                    }
                    case 126:
                        break;
                    case 41: {
                        return symbol(symSemantic.ADD_ASSIGN, yytext());
                    }
                    case 127:
                        break;
                    case 42: {
                        return symbol(symSemantic.INC_OP, "++");
                    }
                    case 128:
                        break;
                    case 43: {
                        return symbol(symSemantic.MOD_ASSIGN, yytext());
                    }
                    case 129:
                        break;
                    case 44: {
                        return symbol(symSemantic.AND_ASSIGN, yytext());
                    }
                    case 130:
                        break;
                    case 45: {
                        return symbol(symSemantic.AND_OP, "&&");
                    }
                    case 131:
                        break;
                    case 46: {
                        return symbol(symSemantic.XOR_ASSIGN, yytext());
                    }
                    case 132:
                        break;
                    case 47: {
                        return symbol(symSemantic.OR_ASSIGN, yytext());
                    }
                    case 133:
                        break;
                    case 48: {
                        return symbol(symSemantic.OR_OP, "||");
                    }
                    case 134:
                        break;
                    case 49: {
                        return symbol(symSemantic.NE_OP, "!=");
                    }
                    case 135:
                        break;
                    case 50: {
                        return symbol(symSemantic.STRING_LITERAL, yytext());
                    }
                    case 136:
                        break;
                    case 51: {
                        System.err.println("Error Lexico, comillas dobles para strings: " + yytext() + " " + (yyline + 1) + " : " + (yycolumn + 1));
                    }
                    case 137:
                        break;
                    case 52: {
                        return symbol(symSemantic.FOR, yytext());
                    }
                    case 138:
                        break;
                    case 53: {
                        return symbol(symSemantic.INT, yytext());
                    }
                    case 139:
                        break;
                    case 54: {
                        return symbol(symSemantic.ELLIPSIS, yytext());
                    }
                    case 140:
                        break;
                    case 55: {
                        return symbol(symSemantic.RIGHT_ASSIGN, yytext());
                    }
                    case 141:
                        break;
                    case 56: {
                        return symbol(symSemantic.LEFT_ASSIGN, yytext());
                    }
                    case 142:
                        break;
                    case 57: {
                        return symbol(symSemantic.LONG, yytext());
                    }
                    case 143:
                        break;
                    case 58: {
                        return symbol(symSemantic.AUTO, yytext());
                    }
                    case 144:
                        break;
                    case 59: {
                        return symbol(symSemantic.ELSE, yytext());
                    }
                    case 145:
                        break;
                    case 60: {
                        return symbol(symSemantic.ENUM, yytext());
                    }
                    case 146:
                        break;
                    case 61: {
                        return symbol(symSemantic.CASE, yytext());
                    }
                    case 147:
                        break;
                    case 62: {
                        return symbol(symSemantic.CHAR, yytext());
                    }
                    case 148:
                        break;
                    case 63: {
                        return symbol(symSemantic.GOTO, yytext());
                    }
                    case 149:
                        break;
                    case 64: {
                        return symbol(symSemantic.VOID, yytext());
                    }
                    case 150:
                        break;
                    case 65: {
                        return symbol(symSemantic.FLOAT, yytext());
                    }
                    case 151:
                        break;
                    case 66: {
                        return symbol(symSemantic.UNION, yytext());
                    }
                    case 152:
                        break;
                    case 67: {
                        return symbol(symSemantic.BREAK, yytext());
                    }
                    case 153:
                        break;
                    case 68: {
                        return symbol(symSemantic.CONST, yytext());
                    }
                    case 154:
                        break;
                    case 69: {
                        return symbol(symSemantic.SCANF, yytext());
                    }
                    case 155:
                        break;
                    case 70: {
                        return symbol(symSemantic.SHORT, yytext());
                    }
                    case 156:
                        break;
                    case 71: {
                        return symbol(symSemantic.WHILE, yytext());
                    }
                    case 157:
                        break;
                    case 72: {
                        return symbol(symSemantic.RETURN, yytext());
                    }
                    case 158:
                        break;
                    case 73: {
                        return symbol(symSemantic.EXTERN, yytext());
                    }
                    case 159:
                        break;
                    case 74: {
                        return symbol(symSemantic.STATIC, yytext());
                    }
                    case 160:
                        break;
                    case 75: {
                        return symbol(symSemantic.STRUCT, yytext());
                    }
                    case 161:
                        break;
                    case 76: {
                        return symbol(symSemantic.SIGNED, yytext());
                    }
                    case 162:
                        break;
                    case 77: {
                        return symbol(symSemantic.SIZEOF, yytext());
                    }
                    case 163:
                        break;
                    case 78: {
                        return symbol(symSemantic.SWITCH, yytext());
                    }
                    case 164:
                        break;
                    case 79: {
                        return symbol(symSemantic.DOUBLE, yytext());
                    }
                    case 165:
                        break;
                    case 80: {
                        return symbol(symSemantic.PRINTF, yytext());
                    }
                    case 166:
                        break;
                    case 81: {
                        return symbol(symSemantic.TYPEDEF, yytext());
                    }
                    case 167:
                        break;
                    case 82: {
                        return symbol(symSemantic.DEFAULT, yytext());
                    }
                    case 168:
                        break;
                    case 83: {
                        return symbol(symSemantic.UNSIGNED, yytext());
                    }
                    case 169:
                        break;
                    case 84: {
                        return symbol(symSemantic.REGISTER, yytext());
                    }
                    case 170:
                        break;
                    case 85: {
                        return symbol(symSemantic.CONTINUE, yytext());
                    }
                    case 171:
                        break;
                    case 86: {
                        return symbol(symSemantic.VOLATILE, yytext());
                    }
                    case 172:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

}
